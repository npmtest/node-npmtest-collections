{"/home/travis/build/npmtest/node-npmtest-collections/test.js":"/* istanbul instrument in package npmtest_collections */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-collections/lib.npmtest_collections.js":"/* istanbul instrument in package npmtest_collections */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_collections = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_collections = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-collections/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-collections && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_collections */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_collections\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_collections.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_collections.rollup.js'] =\n            local.assetsDict['/assets.npmtest_collections.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_collections.__dirname + '/lib.npmtest_collections.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/collections.js":"\n// used exclusively to generate collections.min.js for browsers\n\nvar Shim = require(\"./shim\");\n\nglobal.List = require(\"./list\");\nglobal.Set = require(\"./set\");\nglobal.Map = require(\"./map\");\nglobal.MultiMap = require(\"./multi-map\");\nglobal.WeakMap = require(\"weak-map\");\nglobal.SortedSet = require(\"./sorted-set\");\nglobal.SortedMap = require(\"./sorted-map\");\nglobal.LruSet = require(\"./lru-set\");\nglobal.LruMap = require(\"./lru-map\");\nglobal.SortedArray = require(\"./sorted-array\");\nglobal.SortedArraySet = require(\"./sorted-array-set\");\nglobal.SortedArrayMap = require(\"./sorted-array-map\");\nglobal.FastSet = require(\"./fast-set\");\nglobal.FastMap = require(\"./fast-map\");\nglobal.Dict = require(\"./dict\");\nglobal.Iterator = require(\"./iterator\");\n\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/shim.js":"\nvar Array = require(\"./shim-array\");\nvar Object = require(\"./shim-object\");\nvar Function = require(\"./shim-function\");\nvar RegExp = require(\"./shim-regexp\");\n\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/deque.js":"\"use strict\";\n\nrequire(\"./shim-object\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericOrder = require(\"./generic-order\");\nvar RangeChanges = require(\"./listen/range-changes\");\n\n// by Petka Antonov\n// https://github.com/petkaantonov/deque/blob/master/js/deque.js\n// Deque specifically uses\n// http://en.wikipedia.org/wiki/Circular_buffer#Use_a_Fill_Count\n// 1. Incrementally maintained length\n// 2. Modulus avoided by using only powers of two for the capacity\n\nmodule.exports = Deque;\nfunction Deque(values, capacity) {\n    if (!(this instanceof Deque)) {\n        return new Deque(values, capacity);\n    }\n    this.capacity = this.snap(capacity);\n    this.init();\n    this.length = 0;\n    this.front = 0;\n    this.addEach(values);\n}\n\nObject.addEach(Deque.prototype, GenericCollection.prototype);\nObject.addEach(Deque.prototype, GenericOrder.prototype);\nObject.addEach(Deque.prototype, RangeChanges.prototype);\n\nDeque.from = GenericCollection.from;\n\nDeque.prototype.maxCapacity = (1 << 30) | 0;\nDeque.prototype.minCapacity = 16;\n\nDeque.prototype.constructClone = function (values) {\n    return new this.constructor(values, this.capacity)\n};\n\nDeque.prototype.add = function (value) {\n    this.push(value);\n};\n\nDeque.prototype.push = function (value /* or ...values */) {\n    var argsLength = arguments.length;\n    var length = this.length;\n\n    if (this.dispatchesRangeChanges) {\n        var plus = new Array(argsLength);\n        for (var argIndex = 0; argIndex < argsLength; ++argIndex) {\n            plus[argIndex] = arguments[argIndex];\n        }\n        var minus = [];\n        this.dispatchBeforeRangeChange(plus, minus, length);\n    }\n\n    if (argsLength > 1) {\n        var capacity = this.capacity;\n        if (length + argsLength > capacity) {\n            for (var argIndex = 0; argIndex < argsLength; ++argIndex) {\n                this.ensureCapacity(length + 1);\n                var j = (this.front + length) & (this.capacity - 1);\n                this[j] = arguments[argIndex];\n                length++;\n                this.length = length;\n            }\n        }\n        else {\n            var j = this.front;\n            for (var argIndex = 0; argIndex < argsLength; ++argIndex) {\n                this[(j + length) & (capacity - 1)] = arguments[argIndex];\n                j++;\n            }\n            this.length = length + argsLength;\n        }\n\n    } else if (argsLength === 1) {\n        this.ensureCapacity(length + 1);\n        var index = (this.front + length) & (this.capacity - 1);\n        this[index] = value;\n        this.length = length + 1;\n    }\n\n    if (this.dispatchesRangeChanges) {\n        this.dispatchRangeChange(plus, minus, length);\n    }\n\n    return this.length;\n};\n\nDeque.prototype.pop = function () {\n    var length = this.length;\n    if (length === 0) {\n        return;\n    }\n    var index = (this.front + length - 1) & (this.capacity - 1);\n    var result = this[index];\n\n    if (this.dispatchesRangeChanges) {\n        this.dispatchBeforeRangeChange([], [result], length - 1);\n    }\n\n    this[index] = void 0;\n    this.length = length - 1;\n\n    if (this.dispatchesRangeChanges) {\n        this.dispatchRangeChange([], [result], length - 1);\n    }\n\n    return result;\n};\n\nDeque.prototype.shift = function () {\n    if (this.length !== 0) {\n        var front = this.front;\n        var result = this[front];\n\n        if (this.dispatchesRangeChanges) {\n            this.dispatchBeforeRangeChange([], [result], 0);\n        }\n\n        this[front] = void 0;\n        this.front = (front + 1) & (this.capacity - 1);\n        this.length--;\n\n        if (this.dispatchesRangeChanges) {\n            this.dispatchRangeChange([], [result], 0);\n        }\n\n        return result;\n    }\n};\n\nDeque.prototype.unshift = function (value /* or ...values */) {\n    var length = this.length;\n    var argsLength = arguments.length;\n\n    if (this.dispatchesRangeChanges) {\n        var plus = new Array(argsLength);\n        for (var argIndex = 0; argIndex < argsLength; ++argIndex) {\n            plus[argIndex] = arguments[argIndex];\n        }\n        var minus = [];\n        this.dispatchBeforeRangeChange(plus, minus, 0);\n    }\n\n    if (argsLength > 1) {\n        var capacity = this.capacity;\n        if (length + argsLength > capacity) {\n            for (var argIndex = argsLength - 1; argIndex >= 0; argIndex--) {\n                this.ensureCapacity(length + 1);\n                var capacity = this.capacity;\n                var index = (\n                    (\n                        (\n                            ( this.front - 1 ) &\n                            ( capacity - 1)\n                        ) ^ capacity\n                    ) - capacity\n                );\n                this[index] = arguments[argIndex];\n                length++;\n                this.front = index;\n                this.length = length;\n            }\n        } else {\n            var front = this.front;\n            for (var argIndex = argsLength - 1; argIndex >= 0; argIndex--) {\n                var index = (\n                    (\n                        (\n                            (front - 1) &\n                            (capacity - 1)\n                        ) ^ capacity\n                    ) - capacity\n                );\n                this[index] = arguments[argIndex];\n                front = index;\n            }\n            this.front = front;\n            this.length = length + argsLength;\n        }\n    } else if (argsLength === 1) {\n        this.ensureCapacity(length + 1);\n        var capacity = this.capacity;\n        var index = (\n            (\n                (\n                    (this.front - 1) &\n                    (capacity - 1)\n                ) ^ capacity\n            ) - capacity\n        );\n        this[index] = value;\n        this.length = length + 1;\n        this.front = index;\n    }\n\n    if (this.dispatchesRangeChanges) {\n        this.dispatchRangeChange(plus, minus, 0);\n    }\n\n    return this.length;\n};\n\nDeque.prototype.clear = function () {\n    this.length = 0;\n    this.front = 0;\n    this.init();\n};\n\nDeque.prototype.ensureCapacity = function (capacity) {\n    if (this.capacity < capacity) {\n        this.grow(this.snap(this.capacity * 1.5 + 16));\n    }\n};\n\nDeque.prototype.grow = function (capacity) {\n    var oldFront = this.front;\n    var oldCapacity = this.capacity;\n    var oldContent = new Array(oldCapacity);\n    var length = this.length;\n\n    copy(this, 0, oldContent, 0, oldCapacity);\n    this.capacity = capacity;\n    this.init();\n    this.front = 0;\n    if (oldFront + length <= oldCapacity) {\n        // Can perform direct linear copy.\n        copy(oldContent, oldFront, this, 0, length);\n    } else {\n        // Cannot perform copy directly, perform as much as possible at the\n        // end, and then copy the rest to the beginning of the buffer.\n        var lengthBeforeWrapping = length - ((oldFront + length) & (oldCapacity - 1));\n        copy(oldContent, oldFront, this, 0, lengthBeforeWrapping);\n        copy(oldContent, 0, this, lengthBeforeWrapping, length - lengthBeforeWrapping);\n    }\n};\n\nDeque.prototype.init = function () {\n    for (var index = 0; index < this.capacity; ++index) {\n        this[index] = \"nil\"; // TODO void 0\n    }\n};\n\nDeque.prototype.snap = function (capacity) {\n    if (typeof capacity !== \"number\") {\n        return this.minCapacity;\n    }\n    return pow2AtLeast(\n        Math.min(this.maxCapacity, Math.max(this.minCapacity, capacity))\n    );\n};\n\nDeque.prototype.one = function () {\n    if (this.length > 0) {\n        return this[this.front];\n    }\n};\n\nDeque.prototype.peek = function () {\n    if (this.length === 0) {\n        return;\n    }\n    return this[this.front];\n};\n\nDeque.prototype.poke = function (value) {\n    if (this.length === 0) {\n        return;\n    }\n    this[this.front] = value;\n};\n\nDeque.prototype.peekBack = function () {\n    var length = this.length;\n    if (length === 0) {\n        return;\n    }\n    var index = (this.front + length - 1) & (this.capacity - 1);\n    return this[index];\n};\n\nDeque.prototype.pokeBack = function (value) {\n    var length = this.length;\n    if (length === 0) {\n        return;\n    }\n    var index = (this.front + length - 1) & (this.capacity - 1);\n    this[index] = value;\n};\n\nDeque.prototype.get = function (index) {\n    // Domain only includes integers\n    if (index !== (index | 0)) {\n        return;\n    }\n    // Support negative indicies\n    if (index < 0) {\n        index = index + this.length;\n    }\n    // Out of bounds\n    if (index < 0 || index >= this.length) {\n        return;\n    }\n    return this[(this.front + index) & (this.capacity - 1)];\n};\n\nDeque.prototype.indexOf = function (value, index) {\n    // Default start index at beginning\n    if (index == null) {\n        index = 0;\n    }\n    // Support negative indicies\n    if (index < 0) {\n        index = index + this.length;\n    }\n    // Left to right walk\n    var mask = this.capacity - 1;\n    for (; index < this.length; index++) {\n        var offset = (this.front + index) & mask;\n        if (this[offset] === value) {\n            return index;\n        }\n    }\n    return -1;\n};\n\nDeque.prototype.lastIndexOf = function (value, index) {\n    // Default start position at the end\n    if (index == null) {\n        index = this.length - 1;\n    }\n    // Support negative indicies\n    if (index < 0) {\n        index = index + this.length;\n    }\n    // Right to left walk\n    var mask = this.capacity - 1;\n    for (; index >= 0; index--) {\n        var offset = (this.front + index) & mask;\n        if (this[offset] === value) {\n            return index;\n        }\n    }\n    return -1;\n}\n\n// TODO rename findValue\nDeque.prototype.find = function (value, equals, index) {\n    equals = equals || Object.equals;\n    // Default start index at beginning\n    if (index == null) {\n        index = 0;\n    }\n    // Support negative indicies\n    if (index < 0) {\n        index = index + this.length;\n    }\n    // Left to right walk\n    var mask = this.capacity - 1;\n    for (; index < this.length; index++) {\n        var offset = (this.front + index) & mask;\n        if (equals(value, this[offset])) {\n            return index;\n        }\n    }\n    return -1;\n};\n\n// TODO rename findLastValue\nDeque.prototype.findLast = function (value, equals, index) {\n    equals = equals || Object.equals;\n    // Default start position at the end\n    if (index == null) {\n        index = this.length - 1;\n    }\n    // Support negative indicies\n    if (index < 0) {\n        index = index + this.length;\n    }\n    // Right to left walk\n    var mask = this.capacity - 1;\n    for (; index >= 0; index--) {\n        var offset = (this.front + index) & mask;\n        if (equals(value, this[offset])) {\n            return index;\n        }\n    }\n    return -1;\n};\n\nDeque.prototype.has = function (value, equals) {\n    equals = equals || Object.equals;\n    // Left to right walk\n    var mask = this.capacity - 1;\n    for (var index = 0; index < this.length; index++) {\n        var offset = (this.front + index) & mask;\n        if (this[offset] === value) {\n            return true;\n        }\n    }\n    return false;\n};\n\nDeque.prototype.reduce = function (callback, basis /*, thisp*/) {\n    // TODO account for missing basis argument\n    var thisp = arguments[2];\n    var mask = this.capacity - 1;\n    for (var index = 0; index < this.length; index++) {\n        var offset = (this.front + index) & mask;\n        basis = callback.call(thisp, basis, this[offset], index, this);\n    }\n    return basis;\n};\n\nDeque.prototype.reduceRight = function (callback, basis /*, thisp*/) {\n    // TODO account for missing basis argument\n    var thisp = arguments[2];\n    var mask = this.capacity - 1;\n    for (var index = this.length - 1; index >= 0; index--) {\n        var offset = (this.front + index) & mask;\n        basis = callback.call(thisp, basis, this[offset], index, this);\n    }\n    return basis;\n};\n\nfunction copy(source, sourceIndex, target, targetIndex, length) {\n    for (var index = 0; index < length; ++index) {\n        target[index + targetIndex] = source[index + sourceIndex];\n    }\n}\n\nfunction pow2AtLeast(n) {\n    n = n >>> 0;\n    n = n - 1;\n    n = n | (n >> 1);\n    n = n | (n >> 2);\n    n = n | (n >> 4);\n    n = n | (n >> 8);\n    n = n | (n >> 16);\n    return n + 1;\n}\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/shim-object.js":"\"use strict\";\n\nvar WeakMap = require(\"weak-map\");\n\nmodule.exports = Object;\n\n/*\n    Based in part on extras from Motorola Mobility’s Montage\n    Copyright (c) 2012, Motorola Mobility LLC. All Rights Reserved.\n    3-Clause BSD License\n    https://github.com/motorola-mobility/montage/blob/master/LICENSE.md\n*/\n\n/**\n    Defines extensions to intrinsic <code>Object</code>.\n    @see [Object class]{@link external:Object}\n*/\n\n/**\n    A utility object to avoid unnecessary allocations of an empty object\n    <code>{}</code>.  This object is frozen so it is safe to share.\n\n    @object external:Object.empty\n*/\nObject.empty = Object.freeze(Object.create(null));\n\n/**\n    Returns whether the given value is an object, as opposed to a value.\n    Unboxed numbers, strings, true, false, undefined, and null are not\n    objects.  Arrays are objects.\n\n    @function external:Object.isObject\n    @param {Any} value\n    @returns {Boolean} whether the given value is an object\n*/\nObject.isObject = function (object) {\n    return Object(object) === object;\n};\n\n/**\n    Returns the value of an any value, particularly objects that\n    implement <code>valueOf</code>.\n\n    <p>Note that, unlike the precedent of methods like\n    <code>Object.equals</code> and <code>Object.compare</code> would suggest,\n    this method is named <code>Object.getValueOf</code> instead of\n    <code>valueOf</code>.  This is a delicate issue, but the basis of this\n    decision is that the JavaScript runtime would be far more likely to\n    accidentally call this method with no arguments, assuming that it would\n    return the value of <code>Object</code> itself in various situations,\n    whereas <code>Object.equals(Object, null)</code> protects against this case\n    by noting that <code>Object</code> owns the <code>equals</code> property\n    and therefore does not delegate to it.\n\n    @function external:Object.getValueOf\n    @param {Any} value a value or object wrapping a value\n    @returns {Any} the primitive value of that object, if one exists, or passes\n    the value through\n*/\nObject.getValueOf = function (value) {\n    if (value && typeof value.valueOf === \"function\") {\n        value = value.valueOf();\n    }\n    return value;\n};\n\nvar hashMap = new WeakMap();\nObject.hash = function (object) {\n    if (object && typeof object.hash === \"function\") {\n        return \"\" + object.hash();\n    } else if (Object(object) === object) {\n        if (!hashMap.has(object)) {\n            hashMap.set(object, Math.random().toString(36).slice(2));\n        }\n        return hashMap.get(object);\n    } else {\n        return \"\" + object;\n    }\n};\n\n/**\n    A shorthand for <code>Object.prototype.hasOwnProperty.call(object,\n    key)</code>.  Returns whether the object owns a property for the given key.\n    It does not consult the prototype chain and works for any string (including\n    \"hasOwnProperty\") except \"__proto__\".\n\n    @function external:Object.owns\n    @param {Object} object\n    @param {String} key\n    @returns {Boolean} whether the object owns a property wfor the given key.\n*/\nvar owns = Object.prototype.hasOwnProperty;\nObject.owns = function (object, key) {\n    return owns.call(object, key);\n};\n\n/**\n    A utility that is like Object.owns but is also useful for finding\n    properties on the prototype chain, provided that they do not refer to\n    methods on the Object prototype.  Works for all strings except \"__proto__\".\n\n    <p>Alternately, you could use the \"in\" operator as long as the object\n    descends from \"null\" instead of the Object.prototype, as with\n    <code>Object.create(null)</code>.  However,\n    <code>Object.create(null)</code> only works in fully compliant EcmaScript 5\n    JavaScript engines and cannot be faithfully shimmed.\n\n    <p>If the given object is an instance of a type that implements a method\n    named \"has\", this function defers to the collection, so this method can be\n    used to generically handle objects, arrays, or other collections.  In that\n    case, the domain of the key depends on the instance.\n\n    @param {Object} object\n    @param {String} key\n    @returns {Boolean} whether the object, or any of its prototypes except\n    <code>Object.prototype</code>\n    @function external:Object.has\n*/\nObject.has = function (object, key) {\n    if (typeof object !== \"object\") {\n        throw new Error(\"Object.has can't accept non-object: \" + typeof object);\n    }\n    // forward to mapped collections that implement \"has\"\n    if (object && typeof object.has === \"function\") {\n        return object.has(key);\n    // otherwise report whether the key is on the prototype chain,\n    // as long as it is not one of the methods on object.prototype\n    } else if (typeof key === \"string\") {\n        return key in object && object[key] !== Object.prototype[key];\n    } else {\n        throw new Error(\"Key must be a string for Object.has on plain objects\");\n    }\n};\n\n/**\n    Gets the value for a corresponding key from an object.\n\n    <p>Uses Object.has to determine whether there is a corresponding value for\n    the given key.  As such, <code>Object.get</code> is capable of retriving\n    values from the prototype chain as long as they are not from the\n    <code>Object.prototype</code>.\n\n    <p>If there is no corresponding value, returns the given default, which may\n    be <code>undefined</code>.\n\n    <p>If the given object is an instance of a type that implements a method\n    named \"get\", this function defers to the collection, so this method can be\n    used to generically handle objects, arrays, or other collections.  In that\n    case, the domain of the key depends on the implementation.  For a `Map`,\n    for example, the key might be any object.\n\n    @param {Object} object\n    @param {String} key\n    @param {Any} value a default to return, <code>undefined</code> if omitted\n    @returns {Any} value for key, or default value\n    @function external:Object.get\n*/\nObject.get = function (object, key, value) {\n    if (typeof object !== \"object\") {\n        throw new Error(\"Object.get can't accept non-object: \" + typeof object);\n    }\n    // forward to mapped collections that implement \"get\"\n    if (object && typeof object.get === \"function\") {\n        return object.get(key, value);\n    } else if (Object.has(object, key)) {\n        return object[key];\n    } else {\n        return value;\n    }\n};\n\n/**\n    Sets the value for a given key on an object.\n\n    <p>If the given object is an instance of a type that implements a method\n    named \"set\", this function defers to the collection, so this method can be\n    used to generically handle objects, arrays, or other collections.  As such,\n    the key domain varies by the object type.\n\n    @param {Object} object\n    @param {String} key\n    @param {Any} value\n    @returns <code>undefined</code>\n    @function external:Object.set\n*/\nObject.set = function (object, key, value) {\n    if (object && typeof object.set === \"function\") {\n        object.set(key, value);\n    } else {\n        object[key] = value;\n    }\n};\n\nObject.addEach = function (target, source, overrides) {\n    var overridesExistingProperty = arguments.length === 3 ? overrides : true;\n    if (!source) {\n    } else if (typeof source.forEach === \"function\" && !source.hasOwnProperty(\"forEach\")) {\n        // copy map-alikes\n        if (source.isMap === true) {\n            source.forEach(function (value, key) {\n                target[key] = value;\n            });\n        // iterate key value pairs of other iterables\n        } else {\n            source.forEach(function (pair) {\n                target[pair[0]] = pair[1];\n            });\n        }\n    } else if (typeof source.length === \"number\") {\n        // arguments, strings\n        for (var index = 0; index < source.length; index++) {\n            target[index] = source[index];\n        }\n    } else {\n        // copy other objects as map-alikes\n        for(var keys = Object.keys(source), i = 0, key;(key = keys[i]); i++) {\n            if(overridesExistingProperty || !Object.owns(target,key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n};\n\n\n/*\nvar defineEach = function defineEach(target, prototype) {\n    // console.log(\"Map defineEach: \",Object.keys(prototype));\n    var proto = Map.prototype;\n    for (var name in prototype) {\n        if(!proto.hasOwnProperty(name)) {\n            Object.defineProperty(proto, name, {\n                value: prototype[name],\n                writable: writable,\n                configurable: configurable,\n                enumerable: enumerable\n            });\n        }\n    }\n}\n*/\nObject.defineEach = function (target, source, overrides, configurable, enumerable, writable) {\n    var overridesExistingProperty = arguments.length === 3 ? overrides : true;\n    if (!source) {\n    } else if (typeof source.forEach === \"function\" && !source.hasOwnProperty(\"forEach\")) {\n        // copy map-alikes\n        if (source.isMap === true) {\n            source.forEach(function (value, key) {\n                Object.defineProperty(target, key, {\n                    value: value,\n                    writable: writable,\n                    configurable: configurable,\n                    enumerable: enumerable\n                });\n            });\n        // iterate key value pairs of other iterables\n        } else {\n            source.forEach(function (pair) {\n                Object.defineProperty(target, pair[0], {\n                    value: pair[1],\n                    writable: writable,\n                    configurable: configurable,\n                    enumerable: enumerable\n                });\n\n            });\n        }\n    } else if (typeof source.length === \"number\") {\n        // arguments, strings\n        for (var index = 0; index < source.length; index++) {\n            Object.defineProperty(target, index, {\n                value: source[index],\n                writable: writable,\n                configurable: configurable,\n                enumerable: enumerable\n            });\n\n        }\n    } else {\n        // copy other objects as map-alikes\n        for(var keys = Object.keys(source), i = 0, key;(key = keys[i]); i++) {\n            if(overridesExistingProperty || !Object.owns(target,key)) {\n                Object.defineProperty(target, key, {\n                    value: source[key],\n                    writable: writable,\n                    configurable: configurable,\n                    enumerable: enumerable\n                });\n\n            }\n        }\n    }\n    return target;\n};\n\n/**\n    Iterates over the owned properties of an object.\n\n    @function external:Object.forEach\n    @param {Object} object an object to iterate.\n    @param {Function} callback a function to call for every key and value\n    pair in the object.  Receives <code>value</code>, <code>key</code>,\n    and <code>object</code> as arguments.\n    @param {Object} thisp the <code>this</code> to pass through to the\n    callback\n*/\nObject.forEach = function (object, callback, thisp) {\n\n    var keys = Object.keys(object), i = 0, iKey;\n    for(;(iKey = keys[i]);i++) {\n        callback.call(thisp, object[iKey], iKey, object);\n    }\n\n};\n\n/**\n    Iterates over the owned properties of a map, constructing a new array of\n    mapped values.\n\n    @function external:Object.map\n    @param {Object} object an object to iterate.\n    @param {Function} callback a function to call for every key and value\n    pair in the object.  Receives <code>value</code>, <code>key</code>,\n    and <code>object</code> as arguments.\n    @param {Object} thisp the <code>this</code> to pass through to the\n    callback\n    @returns {Array} the respective values returned by the callback for each\n    item in the object.\n*/\nObject.map = function (object, callback, thisp) {\n    var keys = Object.keys(object), i = 0, result = [], iKey;\n    for(;(iKey = keys[i]);i++) {\n        result.push(callback.call(thisp, object[iKey], iKey, object));\n    }\n    return result;\n};\n\n/**\n    Returns the values for owned properties of an object.\n\n    @function external:Object.map\n    @param {Object} object\n    @returns {Array} the respective value for each owned property of the\n    object.\n*/\nObject.values = function (object) {\n    return Object.map(object, Function.identity);\n};\n\n// TODO inline document concat\nObject.concat = function () {\n    var object = {};\n    for (var i = 0; i < arguments.length; i++) {\n        Object.addEach(object, arguments[i]);\n    }\n    return object;\n};\n\nObject.from = Object.concat;\n\n/**\n    Returns whether two values are identical.  Any value is identical to itself\n    and only itself.  This is much more restictive than equivalence and subtly\n    different than strict equality, <code>===</code> because of edge cases\n    including negative zero and <code>NaN</code>.  Identity is useful for\n    resolving collisions among keys in a mapping where the domain is any value.\n    This method does not delgate to any method on an object and cannot be\n    overridden.\n    @see http://wiki.ecmascript.org/doku.php?id=harmony:egal\n    @param {Any} this\n    @param {Any} that\n    @returns {Boolean} whether this and that are identical\n    @function external:Object.is\n*/\nObject.is = function (x, y) {\n    if (x === y) {\n        // 0 === -0, but they are not identical\n        return x !== 0 || 1 / x === 1 / y;\n    }\n    // NaN !== NaN, but they are identical.\n    // NaNs are the only non-reflexive value, i.e., if x !== x,\n    // then x is a NaN.\n    // isNaN is broken: it converts its argument to number, so\n    // isNaN(\"foo\") => true\n    return x !== x && y !== y;\n};\n\n/**\n    Performs a polymorphic, type-sensitive deep equivalence comparison of any\n    two values.\n\n    <p>As a basic principle, any value is equivalent to itself (as in\n    identity), any boxed version of itself (as a <code>new Number(10)</code> is\n    to 10), and any deep clone of itself.\n\n    <p>Equivalence has the following properties:\n\n    <ul>\n        <li><strong>polymorphic:</strong>\n            If the given object is an instance of a type that implements a\n            methods named \"equals\", this function defers to the method.  So,\n            this function can safely compare any values regardless of type,\n            including undefined, null, numbers, strings, any pair of objects\n            where either implements \"equals\", or object literals that may even\n            contain an \"equals\" key.\n        <li><strong>type-sensitive:</strong>\n            Incomparable types are not equal.  No object is equivalent to any\n            array.  No string is equal to any other number.\n        <li><strong>deep:</strong>\n            Collections with equivalent content are equivalent, recursively.\n        <li><strong>equivalence:</strong>\n            Identical values and objects are equivalent, but so are collections\n            that contain equivalent content.  Whether order is important varies\n            by type.  For Arrays and lists, order is important.  For Objects,\n            maps, and sets, order is not important.  Boxed objects are mutally\n            equivalent with their unboxed values, by virtue of the standard\n            <code>valueOf</code> method.\n    </ul>\n    @param this\n    @param that\n    @returns {Boolean} whether the values are deeply equivalent\n    @function external:Object.equals\n*/\nObject.equals = function (a, b, equals, memo) {\n    equals = equals || Object.equals;\n    //console.log(\"Object.equals: a:\",a, \"b:\",b, \"equals:\",equals);\n    // unbox objects, but do not confuse object literals\n    a = Object.getValueOf(a);\n    b = Object.getValueOf(b);\n    if (a === b)\n        return true;\n    if (Object.isObject(a)) {\n        memo = memo || new WeakMap();\n        if (memo.has(a)) {\n            return true;\n        }\n        memo.set(a, true);\n    }\n    if (Object.isObject(a) && typeof a.equals === \"function\") {\n        return a.equals(b, equals, memo);\n    }\n    // commutative\n    if (Object.isObject(b) && typeof b.equals === \"function\") {\n        return b.equals(a, equals, memo);\n    }\n    if (Object.isObject(a) && Object.isObject(b)) {\n        if (Object.getPrototypeOf(a) === Object.prototype && Object.getPrototypeOf(b) === Object.prototype) {\n            for (var name in a) {\n                if (!equals(a[name], b[name], equals, memo)) {\n                    return false;\n                }\n            }\n            for (var name in b) {\n                if (!(name in a) || !equals(b[name], a[name], equals, memo)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    // NaN !== NaN, but they are equal.\n    // NaNs are the only non-reflexive value, i.e., if x !== x,\n    // then x is a NaN.\n    // isNaN is broken: it converts its argument to number, so\n    // isNaN(\"foo\") => true\n    // We have established that a !== b, but if a !== a && b !== b, they are\n    // both NaN.\n    if (a !== a && b !== b)\n        return true;\n    if (!a || !b)\n        return a === b;\n    return false;\n};\n\n// Because a return value of 0 from a `compare` function  may mean either\n// \"equals\" or \"is incomparable\", `equals` cannot be defined in terms of\n// `compare`.  However, `compare` *can* be defined in terms of `equals` and\n// `lessThan`.  Again however, more often it would be desirable to implement\n// all of the comparison functions in terms of compare rather than the other\n// way around.\n\n/**\n    Determines the order in which any two objects should be sorted by returning\n    a number that has an analogous relationship to zero as the left value to\n    the right.  That is, if the left is \"less than\" the right, the returned\n    value will be \"less than\" zero, where \"less than\" may be any other\n    transitive relationship.\n\n    <p>Arrays are compared by the first diverging values, or by length.\n\n    <p>Any two values that are incomparable return zero.  As such,\n    <code>equals</code> should not be implemented with <code>compare</code>\n    since incomparability is indistinguishable from equality.\n\n    <p>Sorts strings lexicographically.  This is not suitable for any\n    particular international setting.  Different locales sort their phone books\n    in very different ways, particularly regarding diacritics and ligatures.\n\n    <p>If the given object is an instance of a type that implements a method\n    named \"compare\", this function defers to the instance.  The method does not\n    need to be an owned property to distinguish it from an object literal since\n    object literals are incomparable.  Unlike <code>Object</code> however,\n    <code>Array</code> implements <code>compare</code>.\n\n    @param {Any} left\n    @param {Any} right\n    @returns {Number} a value having the same transitive relationship to zero\n    as the left and right values.\n    @function external:Object.compare\n*/\nObject.compare = function (a, b) {\n    // unbox objects, but do not confuse object literals\n    // mercifully handles the Date case\n    a = Object.getValueOf(a);\n    b = Object.getValueOf(b);\n    if (a === b)\n        return 0;\n    var aType = typeof a;\n    var bType = typeof b;\n    if (aType === \"number\" && bType === \"number\")\n        return a - b;\n    if (aType === \"string\" && bType === \"string\")\n        return a < b ? -Infinity : Infinity;\n        // the possibility of equality elimiated above\n    if (a && typeof a.compare === \"function\")\n        return a.compare(b);\n    // not commutative, the relationship is reversed\n    if (b && typeof b.compare === \"function\")\n        return -b.compare(a);\n    return 0;\n};\n\n/**\n    Creates a deep copy of any value.  Values, being immutable, are\n    returned without alternation.  Forwards to <code>clone</code> on\n    objects and arrays.\n\n    @function external:Object.clone\n    @param {Any} value a value to clone\n    @param {Number} depth an optional traversal depth, defaults to infinity.\n    A value of <code>0</code> means to make no clone and return the value\n    directly.\n    @param {Map} memo an optional memo of already visited objects to preserve\n    reference cycles.  The cloned object will have the exact same shape as the\n    original, but no identical objects.  Te map may be later used to associate\n    all objects in the original object graph with their corresponding member of\n    the cloned graph.\n    @returns a copy of the value\n*/\nObject.clone = function (value, depth, memo) {\n    value = Object.getValueOf(value);\n    memo = memo || new WeakMap();\n    if (depth === undefined) {\n        depth = Infinity;\n    } else if (depth === 0) {\n        return value;\n    }\n    if (Object.isObject(value)) {\n        if (!memo.has(value)) {\n            if (value && typeof value.clone === \"function\") {\n                memo.set(value, value.clone(depth, memo));\n            } else {\n                var prototype = Object.getPrototypeOf(value);\n                if (prototype === null || prototype === Object.prototype) {\n                    var clone = Object.create(prototype);\n                    memo.set(value, clone);\n                    for (var key in value) {\n                        clone[key] = Object.clone(value[key], depth - 1, memo);\n                    }\n                } else {\n                    throw new Error(\"Can't clone \" + value);\n                }\n            }\n        }\n        return memo.get(value);\n    }\n    return value;\n};\n\n/**\n    Removes all properties owned by this object making the object suitable for\n    reuse.\n\n    @function external:Object.clear\n    @returns this\n*/\nObject.clear = function (object) {\n    if (object && typeof object.clear === \"function\") {\n        object.clear();\n    } else {\n        var keys = Object.keys(object),\n            i = keys.length;\n        while (i) {\n            i--;\n            delete object[keys[i]];\n        }\n    }\n    return object;\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/generic-collection.js":"\"use strict\";\n\nmodule.exports = GenericCollection;\nfunction GenericCollection() {\n    throw new Error(\"Can't construct. GenericCollection is a mixin.\");\n}\n\nvar DOMTokenList = global.DOMTokenList || function(){};\n\nGenericCollection.EmptyArray = Object.freeze([]);\n\n/* TODO: optimize for DOMTokenList and Array to use for() instead of forEach */\nGenericCollection.prototype.addEach = function (values) {\n    //We want to eliminate everything but array like: Strings, Arrays, DOMTokenList\n    if(values && (values instanceof Array || (values instanceof DOMTokenList) || values instanceof String)) {\n        for (var i = 0; i < values.length; i++) {\n            this.add(values[i], i);\n        }\n    }\n    else if (values && Object(values) === values) {\n        if (typeof values.forEach === \"function\") {\n            values.forEach(this.add, this);\n        } else if (typeof values.length === \"number\") {\n            // Array-like objects that do not implement forEach, ergo,\n            // Arguments\n            for (var i = 0; i < values.length; i++) {\n                this.add(values[i], i);\n            }\n        } else {\n            Object.keys(values).forEach(function (key) {\n                this.add(values[key], key);\n            }, this);\n        }\n    }\n    return this;\n};\n\n// This is sufficiently generic for Map (since the value may be a key)\n// and ordered collections (since it forwards the equals argument)\nGenericCollection.prototype.deleteEach = function (values, equals) {\n    values.forEach(function (value) {\n        this[\"delete\"](value, equals);\n    }, this);\n    return this;\n};\n\n// all of the following functions are implemented in terms of \"reduce\".\n// some need \"constructClone\".\n\nGenericCollection.prototype.forEach = function (callback /*, thisp*/) {\n    var thisp = arguments[1];\n    return this.reduce(function (undefined, value, key, object, depth) {\n        callback.call(thisp, value, key, object, depth);\n    }, undefined);\n};\n\nGenericCollection.prototype.map = function (callback /*, thisp*/) {\n    var thisp = arguments[1];\n    var result = [];\n    this.reduce(function (undefined, value, key, object, depth) {\n        result.push(callback.call(thisp, value, key, object, depth));\n    }, undefined);\n    return result;\n};\n\nGenericCollection.prototype.enumerate = function (start) {\n    if (start == null) {\n        start = 0;\n    }\n    var result = [];\n    this.reduce(function (undefined, value) {\n        result.push([start++, value]);\n    }, undefined);\n    return result;\n};\n\nGenericCollection.prototype.group = function (callback, thisp, equals) {\n    equals = equals || Object.equals;\n    var groups = [];\n    var keys = [];\n    this.forEach(function (value, key, object) {\n        var key = callback.call(thisp, value, key, object);\n        var index = keys.indexOf(key, equals);\n        var group;\n        if (index === -1) {\n            group = [];\n            groups.push([key, group]);\n            keys.push(key);\n        } else {\n            group = groups[index][1];\n        }\n        group.push(value);\n    });\n    return groups;\n};\n\nGenericCollection.prototype.toArray = function () {\n    return this.map(Function.identity);\n};\n\n// this depends on stringable keys, which apply to Array and Iterator\n// because they have numeric keys and all Maps since they may use\n// strings as keys.  List, Set, and SortedSet have nodes for keys, so\n// toObject would not be meaningful.\nGenericCollection.prototype.toObject = function () {\n    var object = {};\n    this.reduce(function (undefined, value, key) {\n        object[key] = value;\n    }, undefined);\n    return object;\n};\n\nGenericCollection.from = function () {\n    return this.apply(this,arguments);\n};\n\nGenericCollection.prototype.filter = function (callback /*, thisp*/) {\n    var thisp = arguments[1];\n    var result = this.constructClone();\n    this.reduce(function (undefined, value, key, object, depth) {\n        if (callback.call(thisp, value, key, object, depth)) {\n            result.add(value, key);\n        }\n    }, undefined);\n    return result;\n};\n\nGenericCollection.prototype.every = function (callback /*, thisp*/) {\n    var thisp = arguments[1];\n    return this.reduce(function (result, value, key, object, depth) {\n        return result && callback.call(thisp, value, key, object, depth);\n    }, true);\n};\n\nGenericCollection.prototype.some = function (callback /*, thisp*/) {\n    var thisp = arguments[1];\n    return this.reduce(function (result, value, key, object, depth) {\n        return result || callback.call(thisp, value, key, object, depth);\n    }, false);\n};\n\nGenericCollection.prototype.all = function () {\n    return this.every(Boolean);\n};\n\nGenericCollection.prototype.any = function () {\n    return this.some(Boolean);\n};\n\nGenericCollection.prototype.min = function (compare) {\n    compare = compare || this.contentCompare || Object.compare;\n    var first = true;\n    return this.reduce(function (result, value) {\n        if (first) {\n            first = false;\n            return value;\n        } else {\n            return compare(value, result) < 0 ? value : result;\n        }\n    }, undefined);\n};\n\nGenericCollection.prototype.max = function (compare) {\n    compare = compare || this.contentCompare || Object.compare;\n    var first = true;\n    return this.reduce(function (result, value) {\n        if (first) {\n            first = false;\n            return value;\n        } else {\n            return compare(value, result) > 0 ? value : result;\n        }\n    }, undefined);\n};\n\nGenericCollection.prototype.sum = function (zero) {\n    zero = zero === undefined ? 0 : zero;\n    return this.reduce(function (a, b) {\n        return a + b;\n    }, zero);\n};\n\nGenericCollection.prototype.average = function (zero) {\n    var sum = zero === undefined ? 0 : zero;\n    var count = zero === undefined ? 0 : zero;\n    this.reduce(function (undefined, value) {\n        sum += value;\n        count += 1;\n    }, undefined);\n    return sum / count;\n};\n\nGenericCollection.prototype.concat = function () {\n    var result = this.constructClone(this);\n    for (var i = 0; i < arguments.length; i++) {\n        result.addEach(arguments[i]);\n    }\n    return result;\n};\n\nGenericCollection.prototype.flatten = function () {\n    var self = this;\n    return this.reduce(function (result, array) {\n        array.forEach(function (value) {\n            this.push(value);\n        }, result, self);\n        return result;\n    }, []);\n};\n\nGenericCollection.prototype.zip = function () {\n    var table = Array.prototype.slice.call(arguments);\n    table.unshift(this);\n    return Array.unzip(table);\n}\n\nGenericCollection.prototype.join = function (delimiter) {\n    return this.reduce(function (result, string) {\n        // work-around for reduce that does not support no-basis form\n        if (result === void 0) {\n            return string;\n        } else {\n            return result + delimiter + string;\n        }\n    }, void 0);\n};\n\nGenericCollection.prototype.sorted = function (compare, by, order) {\n    compare = compare || this.contentCompare || Object.compare;\n    // account for comparators generated by Function.by\n    if (compare.by) {\n        by = compare.by;\n        compare = compare.compare || this.contentCompare || Object.compare;\n    } else {\n        by = by || Function.identity;\n    }\n    if (order === undefined)\n        order = 1;\n    return this.map(function (item) {\n        return {\n            by: by(item),\n            value: item\n        };\n    })\n    .sort(function (a, b) {\n        return compare(a.by, b.by) * order;\n    })\n    .map(function (pair) {\n        return pair.value;\n    });\n};\n\nGenericCollection.prototype.reversed = function () {\n    return this.constructClone(this).reverse();\n};\n\nGenericCollection.prototype.clone = function (depth, memo) {\n    if (depth === undefined) {\n        depth = Infinity;\n    } else if (depth === 0) {\n        return this;\n    }\n    var clone = this.constructClone();\n    this.forEach(function (value, key) {\n        clone.add(Object.clone(value, depth - 1, memo), key);\n    }, this);\n    return clone;\n};\n\nGenericCollection.prototype.only = function () {\n    if (this.length === 1) {\n        return this.one();\n    }\n};\n\nGenericCollection.prototype.iterator = function () {\n    return this.iterate.apply(this, arguments);\n};\n\nGenericCollection._sizePropertyDescriptor = {\n    get: function() {\n        return this.length;\n    },\n    enumerable: false,\n    configurable: true\n};\n\nObject.defineProperty(GenericCollection.prototype,\"size\",GenericCollection._sizePropertyDescriptor);\n\nrequire(\"./shim-array\");\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/shim-array.js":"\"use strict\";\n\n/*\n    Based in part on extras from Motorola Mobility’s Montage\n    Copyright (c) 2012, Motorola Mobility LLC. All Rights Reserved.\n    3-Clause BSD License\n    https://github.com/motorola-mobility/montage/blob/master/LICENSE.md\n*/\n\nvar Function = require(\"./shim-function\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericOrder = require(\"./generic-order\");\nvar WeakMap = require(\"weak-map\");\n\nmodule.exports = Array;\n\nvar array_splice = Array.prototype.splice;\nvar array_slice = Array.prototype.slice;\n\nArray.empty = [];\n\nif (Object.freeze) {\n    Object.freeze(Array.empty);\n}\n\nArray.from = function (values) {\n    var array = [];\n    array.addEach(values);\n    return array;\n};\n\nArray.unzip = function (table) {\n    var transpose = [];\n    var length = Infinity;\n    // compute shortest row\n    for (var i = 0; i < table.length; i++) {\n        var row = table[i];\n        table[i] = row.toArray();\n        if (row.length < length) {\n            length = row.length;\n        }\n    }\n    for (var i = 0; i < table.length; i++) {\n        var row = table[i];\n        for (var j = 0; j < row.length; j++) {\n            if (j < length && j in row) {\n                transpose[j] = transpose[j] || [];\n                transpose[j][i] = row[j];\n            }\n        }\n    }\n    return transpose;\n};\n\nfunction define(key, value) {\n    Object.defineProperty(Array.prototype, key, {\n        value: value,\n        writable: true,\n        configurable: true,\n        enumerable: false\n    });\n}\n\ndefine(\"addEach\", GenericCollection.prototype.addEach);\ndefine(\"deleteEach\", GenericCollection.prototype.deleteEach);\ndefine(\"toArray\", GenericCollection.prototype.toArray);\ndefine(\"toObject\", GenericCollection.prototype.toObject);\ndefine(\"all\", GenericCollection.prototype.all);\ndefine(\"any\", GenericCollection.prototype.any);\ndefine(\"min\", GenericCollection.prototype.min);\ndefine(\"max\", GenericCollection.prototype.max);\ndefine(\"sum\", GenericCollection.prototype.sum);\ndefine(\"average\", GenericCollection.prototype.average);\ndefine(\"only\", GenericCollection.prototype.only);\ndefine(\"flatten\", GenericCollection.prototype.flatten);\ndefine(\"zip\", GenericCollection.prototype.zip);\ndefine(\"enumerate\", GenericCollection.prototype.enumerate);\ndefine(\"group\", GenericCollection.prototype.group);\ndefine(\"sorted\", GenericCollection.prototype.sorted);\ndefine(\"reversed\", GenericCollection.prototype.reversed);\n\ndefine(\"constructClone\", function (values) {\n    var clone = new this.constructor();\n    clone.addEach(values);\n    return clone;\n});\n\ndefine(\"has\", function (value, equals) {\n    return this.find(value, equals) !== -1;\n});\n\ndefine(\"get\", function (index, defaultValue) {\n    if (+index !== index)\n        throw new Error(\"Indicies must be numbers\");\n    if (!index in this) {\n        return defaultValue;\n    } else {\n        return this[index];\n    }\n});\n\ndefine(\"set\", function (index, value) {\n    this[index] = value;\n    return true;\n});\n\ndefine(\"add\", function (value) {\n    this.push(value);\n    return true;\n});\n\ndefine(\"delete\", function (value, equals) {\n    var index = this.find(value, equals);\n    if (index !== -1) {\n        this.spliceOne(index);\n        return true;\n    }\n    return false;\n});\n\ndefine(\"deleteAll\", function (value, equals) {\n    equals = equals || this.contentEquals || Object.equals;\n    var count = 0;\n    for (var index = 0; index < this.length;) {\n        if (equals(value, this[index])) {\n            this.swap(index, 1);\n            count++;\n        } else {\n            index++;\n        }\n    }\n    return count;\n});\n\ndefine(\"find\", function (value, equals) {\n    equals = equals || this.contentEquals || Object.equals;\n    for (var index = 0; index < this.length; index++) {\n        if (index in this && equals(value, this[index])) {\n            return index;\n        }\n    }\n    return -1;\n});\n\ndefine(\"findLast\", function (value, equals) {\n    equals = equals || this.contentEquals || Object.equals;\n    var index = this.length;\n    do {\n        index--;\n        if (index in this && equals(this[index], value)) {\n            return index;\n        }\n    } while (index > 0);\n    return -1;\n});\n\ndefine(\"swap\", function (start, length, plus) {\n    var args, plusLength, i, j, returnValue;\n    if (start > this.length) {\n        this.length = start;\n    }\n    if (typeof plus !== \"undefined\") {\n        args = [start, length];\n        if (!Array.isArray(plus)) {\n            plus = array_slice.call(plus);\n        }\n        i = 0;\n        plusLength = plus.length;\n        // 1000 is a magic number, presumed to be smaller than the remaining\n        // stack length. For swaps this small, we take the fast path and just\n        // use the underlying Array splice. We could measure the exact size of\n        // the remaining stack using a try/catch around an unbounded recursive\n        // function, but this would defeat the purpose of short-circuiting in\n        // the common case.\n        if (plusLength < 1000) {\n            for (i; i < plusLength; i++) {\n                args[i+2] = plus[i];\n            }\n            return array_splice.apply(this, args);\n        } else {\n            // Avoid maximum call stack error.\n            // First delete the desired entries.\n            returnValue = array_splice.apply(this, args);\n            // Second batch in 1000s.\n            for (i; i < plusLength;) {\n                args = [start+i, 0];\n                for (j = 2; j < 1002 && i < plusLength; j++, i++) {\n                    args[j] = plus[i];\n                }\n                array_splice.apply(this, args);\n            }\n            return returnValue;\n        }\n    // using call rather than apply to cut down on transient objects\n    } else if (typeof length !== \"undefined\") {\n        return array_splice.call(this, start, length);\n    }  else if (typeof start !== \"undefined\") {\n        return array_splice.call(this, start);\n    } else {\n        return [];\n    }\n});\n\ndefine(\"peek\", function () {\n    return this[0];\n});\n\ndefine(\"poke\", function (value) {\n    if (this.length > 0) {\n        this[0] = value;\n    }\n});\n\ndefine(\"peekBack\", function () {\n    if (this.length > 0) {\n        return this[this.length - 1];\n    }\n});\n\ndefine(\"pokeBack\", function (value) {\n    if (this.length > 0) {\n        this[this.length - 1] = value;\n    }\n});\n\ndefine(\"one\", function () {\n    for (var i in this) {\n        if (Object.owns(this, i)) {\n            return this[i];\n        }\n    }\n});\n\nif (!Array.prototype.clear) {\n    define(\"clear\", function () {\n        this.length = 0;\n        return this;\n    });\n}\n\ndefine(\"compare\", function (that, compare) {\n    compare = compare || Object.compare;\n    var i;\n    var length;\n    var lhs;\n    var rhs;\n    var relative;\n\n    if (this === that) {\n        return 0;\n    }\n\n    if (!that || !Array.isArray(that)) {\n        return GenericOrder.prototype.compare.call(this, that, compare);\n    }\n\n    length = (this.length < that.length) ? this.length : that.length;\n\n    for (i = 0; i < length; i++) {\n        if (i in this) {\n            if (!(i in that)) {\n                return -1;\n            } else {\n                lhs = this[i];\n                rhs = that[i];\n                relative = compare(lhs, rhs);\n                if (relative) {\n                    return relative;\n                }\n            }\n        } else if (i in that) {\n            return 1;\n        }\n    }\n\n    return this.length - that.length;\n});\n\ndefine(\"equals\", function (that, equals) {\n    equals = equals || Object.equals;\n    var i = 0;\n    var length = this.length;\n    var left;\n    var right;\n\n    if (this === that) {\n        return true;\n    }\n    if (!that || !Array.isArray(that)) {\n        return GenericOrder.prototype.equals.call(this, that);\n    }\n\n    if (length !== that.length) {\n        return false;\n    } else {\n        for (; i < length; ++i) {\n            if (i in this) {\n                if (!(i in that)) {\n                    return false;\n                }\n                left = this[i];\n                right = that[i];\n                if (!equals(left, right)) {\n                    return false;\n                }\n            } else {\n                if (i in that) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n});\n\ndefine(\"clone\", function (depth, memo) {\n    if (depth == null) {\n        depth = Infinity;\n    } else if (depth === 0) {\n        return this;\n    }\n    memo = memo || new WeakMap();\n    if (memo.has(this)) {\n        return memo.get(this);\n    }\n    var clone = new Array(this.length);\n    memo.set(this, clone);\n    for (var i in this) {\n        clone[i] = Object.clone(this[i], depth - 1, memo);\n    };\n    return clone;\n});\n\ndefine(\"iterate\", function (start, end) {\n    return new ArrayIterator(this, start, end);\n});\n\nif(Array.prototype.spliceOne === void 0) {\n    define(\"spliceOne\", function (index,itemToAdd) {\n        var len=this.length;\n        if (!len) { return }\n        if(arguments.length === 1) {\n            while (index<len) {\n                this[index] = this[index+1];\n                index++\n            }\n            this.length--;\n        }\n        else {\n            this[index] = itemToAdd;\n        }\n    });\n}\n\ndefine(\"Iterator\", ArrayIterator);\n\nfunction ArrayIterator(array, start, end) {\n    this.array = array;\n    this.start = start == null ? 0 : start;\n    this.end = end;\n};\nArrayIterator.prototype.__iterationObject = null;\nObject.defineProperty(ArrayIterator.prototype,\"_iterationObject\", {\n    get: function() {\n        return this.__iterationObject || (this.__iterationObject = { done: false, value:null});\n    }\n});\n\nArrayIterator.prototype.next = function () {\n    if (this.start === (this.end == null ? this.array.length : this.end)) {\n        this._iterationObject.done = true;\n        this._iterationObject.value = void 0;\n    } else {\n        this._iterationObject.value = this.array[this.start++];\n    }\n    return this._iterationObject;\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/_dict.js":"\"use strict\";\n\nvar Shim = require(\"./shim\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericMap = require(\"./generic-map\");\n\n// Burgled from https://github.com/domenic/dict\n\nmodule.exports = Dict;\nfunction Dict(values, getDefault) {\n    if (!(this instanceof Dict)) {\n        return new Dict(values, getDefault);\n    }\n    getDefault = getDefault || Function.noop;\n    this.getDefault = getDefault;\n    this.store = Object.create(null);\n    this.length = 0;\n    this.addEach(values);\n}\n\nDict.Dict = Dict; // hack so require(\"dict\").Dict will work in MontageJS.\n\nObject.addEach(Dict.prototype, GenericCollection.prototype);\nObject.addEach(Dict.prototype, GenericMap.prototype);\n\nDict.from = GenericCollection.from;\n\nDict.prototype.constructClone = function (values) {\n    return new this.constructor(values, this.getDefault);\n};\n\nDict.prototype.assertString = function (key) {\n    if (typeof key !== \"string\") {\n        throw new TypeError(\"key must be a string but Got \" + key);\n    }\n}\n\nObject.defineProperty(Dict.prototype,\"$__proto__\",{writable:true});\nObject.defineProperty(Dict.prototype,\"_hasProto\",{\n    get:function() {\n        return this.hasOwnProperty(\"$__proto__\") && typeof this._protoValue !== \"undefined\";\n    }\n});\nObject.defineProperty(Dict.prototype,\"_protoValue\",{\n    get:function() {\n        return this[\"$__proto__\"];\n    },\n    set: function(value) {\n        this[\"$__proto__\"] = value;\n    }\n});\n\nObject.defineProperty(Dict.prototype,\"size\",GenericCollection._sizePropertyDescriptor);\n\n\nDict.prototype.get = function (key, defaultValue) {\n    this.assertString(key);\n    if (key === \"__proto__\") {\n        if (this._hasProto) {\n            return this._protoValue;\n        } else if (arguments.length > 1) {\n            return defaultValue;\n        } else {\n            return this.getDefault(key);\n        }\n    }\n    else {\n        if (key in this.store) {\n            return this.store[key];\n        } else if (arguments.length > 1) {\n            return defaultValue;\n        } else {\n            return this.getDefault(key);\n        }\n    }\n};\n\nDict.prototype.set = function (key, value) {\n    this.assertString(key);\n    var isProtoKey = (key === \"__proto__\");\n\n    if (isProtoKey ? this._hasProto : key in this.store) { // update\n        if (this.dispatchesMapChanges) {\n            this.dispatchBeforeMapChange(key, isProtoKey ? this._protoValue : this.store[key]);\n        }\n\n        isProtoKey\n            ? this._protoValue = value\n            : this.store[key] = value;\n\n        if (this.dispatchesMapChanges) {\n            this.dispatchMapChange(key, value);\n        }\n        return false;\n    } else { // create\n        if (this.dispatchesMapChanges) {\n            this.dispatchBeforeMapChange(key, undefined);\n        }\n        this.length++;\n\n        isProtoKey\n            ? this._protoValue = value\n            : this.store[key] = value;\n\n        if (this.dispatchesMapChanges) {\n            this.dispatchMapChange(key, value);\n        }\n        return true;\n    }\n};\n\nDict.prototype.has = function (key) {\n    this.assertString(key);\n    return key === \"__proto__\" ? this._hasProto : key in this.store;\n};\n\nDict.prototype[\"delete\"] = function (key) {\n    this.assertString(key);\n    if (key === \"__proto__\") {\n        if (this._hasProto) {\n            if (this.dispatchesMapChanges) {\n                this.dispatchBeforeMapChange(key, this._protoValue);\n            }\n            this._protoValue = undefined;\n            this.length--;\n            if (this.dispatchesMapChanges) {\n                this.dispatchMapChange(key, undefined);\n            }\n            return true;\n        }\n        return false;\n    }\n    else {\n        if (key in this.store) {\n            if (this.dispatchesMapChanges) {\n                this.dispatchBeforeMapChange(key, this.store[key]);\n            }\n            delete this.store[key];\n            this.length--;\n            if (this.dispatchesMapChanges) {\n                this.dispatchMapChange(key, undefined);\n            }\n            return true;\n        }\n        return false;\n    }\n};\n\nDict.prototype.clear = function () {\n    var key;\n    if (this._hasProto) {\n        if (this.dispatchesMapChanges) {\n            this.dispatchBeforeMapChange(\"__proto__\", this._protoValue);\n        }\n        this._protoValue = undefined;\n        if (this.dispatchesMapChanges) {\n            this.dispatchMapChange(\"__proto__\", undefined);\n        }\n    }\n    for (key in this.store) {\n        if (this.dispatchesMapChanges) {\n            this.dispatchBeforeMapChange(key, this.store[key]);\n        }\n        delete this.store[key];\n        if (this.dispatchesMapChanges) {\n            this.dispatchMapChange(key, undefined);\n        }\n    }\n    this.length = 0;\n};\n\nDict.prototype.reduce = function (callback, basis, thisp) {\n    if(this._hasProto) {\n        basis = callback.call(thisp, basis, \"$__proto__\", \"__proto__\", this);\n    }\n    var store = this.store;\n    for (var key in this.store) {\n        basis = callback.call(thisp, basis, store[key], key, this);\n    }\n    return basis;\n};\n\nDict.prototype.reduceRight = function (callback, basis, thisp) {\n    var self = this;\n    var store = this.store;\n    basis = Object.keys(this.store).reduceRight(function (basis, key) {\n        return callback.call(thisp, basis, store[key], key, self);\n    }, basis);\n\n    if(this._hasProto) {\n        return callback.call(thisp, basis, this._protoValue, \"__proto__\", self);\n    }\n    return basis;\n};\n\nDict.prototype.one = function () {\n    var key;\n    for (key in this.store) {\n        return this.store[key];\n    }\n    return this._protoValue;\n};\n\nDict.prototype.toJSON = function () {\n    return this.toObject();\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/dict.js":"\"use strict\";\n\nvar Dict = require(\"./_dict\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar MapChanges = require(\"./listen/map-changes\");\n\n// Burgled from https://github.com/domenic/dict\n\nmodule.exports = Dict;\nObject.addEach(Dict.prototype, PropertyChanges.prototype);\nObject.addEach(Dict.prototype, MapChanges.prototype);\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/fast-map.js":"\"use strict\";\n\nvar Shim = require(\"./shim\");\nvar Set = require(\"./fast-set\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericMap = require(\"./generic-map\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar MapChanges = require(\"./listen/map-changes\");\n\nmodule.exports = FastMap;\n\nfunction FastMap(values, equals, hash, getDefault) {\n    if (!(this instanceof FastMap)) {\n        return new FastMap(values, equals, hash, getDefault);\n    }\n    equals = equals || Object.equals;\n    hash = hash || Object.hash;\n    getDefault = getDefault || Function.noop;\n    this.contentEquals = equals;\n    this.contentHash = hash;\n    this.getDefault = getDefault;\n    this.store = new Set(\n        undefined,\n        function keysEqual(a, b) {\n            return equals(a.key, b.key);\n        },\n        function keyHash(item) {\n            return hash(item.key);\n        }\n    );\n    this.length = 0;\n    this.addEach(values);\n}\n\nFastMap.FastMap = FastMap; // hack so require(\"fast-map\").FastMap will work in MontageJS\n\nObject.addEach(FastMap.prototype, GenericCollection.prototype);\nObject.addEach(FastMap.prototype, GenericMap.prototype);\nObject.addEach(FastMap.prototype, PropertyChanges.prototype);\nObject.addEach(FastMap.prototype, MapChanges.prototype);\n\nFastMap.from = GenericCollection.from;\nFastMap.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.contentEquals,\n        this.contentHash,\n        this.getDefault\n    );\n};\n\nFastMap.prototype.log = function (charmap, stringify) {\n    stringify = stringify || this.stringify;\n    this.store.log(charmap, stringify);\n};\n\nFastMap.prototype.stringify = function (item, leader) {\n    return leader + JSON.stringify(item.key) + \": \" + JSON.stringify(item.value);\n}\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/_fast-set.js":"\"use strict\";\n\nvar Shim = require(\"./shim\");\nvar Dict = require(\"./_dict\");\nvar List = require(\"./_list\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericSet = require(\"./generic-set\");\nvar TreeLog = require(\"./tree-log\");\n\nvar object_has = Object.prototype.hasOwnProperty;\n\nmodule.exports = FastSet;\n\nfunction FastSet(values, equals, hash, getDefault) {\n    if (!(this instanceof FastSet)) {\n        return new FastSet(values, equals, hash, getDefault);\n    }\n    equals = equals || Object.equals;\n    hash = hash || Object.hash;\n    getDefault = getDefault || Function.noop;\n    this.contentEquals = equals;\n    this.contentHash = hash;\n    this.getDefault = getDefault;\n    var self = this;\n    this.buckets = new this.Buckets(null, function getDefaultBucket() {\n        return new self.Bucket();\n    });\n    this.length = 0;\n    this.addEach(values);\n}\n\nFastSet.FastSet = FastSet; // hack so require(\"fast-set\").FastSet will work in MontageJS\n\nObject.addEach(FastSet.prototype, GenericCollection.prototype);\nObject.addEach(FastSet.prototype, GenericSet.prototype);\nFastSet.from = GenericCollection.from;\n\nFastSet.prototype.Buckets = Dict;\nFastSet.prototype.Bucket = List;\n\nFastSet.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.contentEquals,\n        this.contentHash,\n        this.getDefault\n    );\n};\n\nFastSet.prototype.has = function (value) {\n    var hash = this.contentHash(value);\n    return this.buckets.get(hash).has(value);\n};\n\nFastSet.prototype.get = function (value, equals) {\n    if (equals) {\n        throw new Error(\"FastSet#get does not support second argument: equals\");\n    }\n    var hash = this.contentHash(value);\n    var buckets = this.buckets;\n    if (buckets.has(hash)) {\n        return buckets.get(hash).get(value);\n    } else {\n        return this.getDefault(value);\n    }\n};\n\nFastSet.prototype[\"delete\"] = function (value, equals) {\n    if (equals) {\n        throw new Error(\"FastSet#delete does not support second argument: equals\");\n    }\n    var hash = this.contentHash(value);\n    var buckets = this.buckets;\n    if (buckets.has(hash)) {\n        var bucket = buckets.get(hash);\n        if (bucket[\"delete\"](value)) {\n            this.length--;\n            if (bucket.length === 0) {\n                buckets[\"delete\"](hash);\n            }\n            return true;\n        }\n    }\n    return false;\n};\n\nFastSet.prototype.clear = function () {\n    this.buckets.clear();\n    this.length = 0;\n};\n\nFastSet.prototype.add = function (value) {\n    var hash = this.contentHash(value);\n    var buckets = this.buckets;\n    if (!buckets.has(hash)) {\n        buckets.set(hash, new this.Bucket(null, this.contentEquals));\n    }\n    if (!buckets.get(hash).has(value)) {\n        buckets.get(hash).add(value);\n        this.length++;\n        return true;\n    }\n    return false;\n};\n\nFastSet.prototype.reduce = function (callback, basis /*, thisp*/) {\n    var thisp = arguments[2];\n    var buckets = this.buckets;\n    var index = 0;\n    return buckets.reduce(function (basis, bucket) {\n        return bucket.reduce(function (basis, value) {\n            return callback.call(thisp, basis, value, index++, this);\n        }, basis, this);\n    }, basis, this);\n};\n\nFastSet.prototype.one = function () {\n    if (this.length > 0) {\n        return this.buckets.one().one();\n    }\n};\n\nFastSet.prototype.iterate = function () {\n    return this.buckets.valuesArray().flatten().iterate();\n};\n\nFastSet.prototype.log = function (charmap, logNode, callback, thisp) {\n    charmap = charmap || TreeLog.unicodeSharp;\n    logNode = logNode || this.logNode;\n    if (!callback) {\n        callback = console.log;\n        thisp = console;\n    }\n    callback = callback.bind(thisp);\n\n    var buckets = this.buckets, bucketsSize = buckets.size,\n        mapIter = buckets.keys(), hash, index = 0,\n        branch, leader, bucket;\n\n    while (hash = mapIter.next().value) {\n        if (index === bucketsSize - 1) {\n            branch = charmap.fromAbove;\n            leader = ' ';\n        } else if (index === 0) {\n            branch = charmap.branchDown;\n            leader = charmap.strafe;\n        } else {\n            branch = charmap.fromBoth;\n            leader = charmap.strafe;\n        }\n        bucket = buckets.get(hash);\n        callback.call(thisp, branch + charmap.through + charmap.branchDown + ' ' + hash);\n        bucket.forEach(function (value, node) {\n            var branch, below, written;\n            if (node === bucket.head.prev) {\n                branch = charmap.fromAbove;\n                below = ' ';\n            } else {\n                branch = charmap.fromBoth;\n                below = charmap.strafe;\n            }\n            logNode(\n                node,\n                function (line) {\n                    if (!written) {\n                        callback.call(thisp, leader + ' ' + branch + charmap.through + charmap.through + line);\n                        written = true;\n                    } else {\n                        callback.call(thisp, leader + ' ' + below + '  ' + line);\n                    }\n                },\n                function (line) {\n                    callback.call(thisp, leader + ' ' + charmap.strafe + '  ' + line);\n                }\n            );\n        });\n        index++;\n    }\n\n    //var hashes = buckets.keysArray();\n    // hashes.forEach(function (hash, index) {\n    //     var branch;\n    //     var leader;\n    //     if (index === hashes.length - 1) {\n    //         branch = charmap.fromAbove;\n    //         leader = ' ';\n    //     } else if (index === 0) {\n    //         branch = charmap.branchDown;\n    //         leader = charmap.strafe;\n    //     } else {\n    //         branch = charmap.fromBoth;\n    //         leader = charmap.strafe;\n    //     }\n    //     var bucket = buckets.get(hash);\n    //     callback.call(thisp, branch + charmap.through + charmap.branchDown + ' ' + hash);\n    //     bucket.forEach(function (value, node) {\n    //         var branch, below;\n    //         if (node === bucket.head.prev) {\n    //             branch = charmap.fromAbove;\n    //             below = ' ';\n    //         } else {\n    //             branch = charmap.fromBoth;\n    //             below = charmap.strafe;\n    //         }\n    //         var written;\n    //         logNode(\n    //             node,\n    //             function (line) {\n    //                 if (!written) {\n    //                     callback.call(thisp, leader + ' ' + branch + charmap.through + charmap.through + line);\n    //                     written = true;\n    //                 } else {\n    //                     callback.call(thisp, leader + ' ' + below + '  ' + line);\n    //                 }\n    //             },\n    //             function (line) {\n    //                 callback.call(thisp, leader + ' ' + charmap.strafe + '  ' + line);\n    //             }\n    //         );\n    //     });\n    // });\n};\n\nFastSet.prototype.logNode = function (node, write) {\n    var value = node.value;\n    if (Object(value) === value) {\n        JSON.stringify(value, null, 4).split(\"\\n\").forEach(function (line) {\n            write(\" \" + line);\n        });\n    } else {\n        write(\" \" + value);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/fast-set.js":"\"use strict\";\n\nvar Shim = require(\"./shim\");\nvar FastSet = require(\"./_fast-set\");\nvar PropertyChanges = require(\"./listen/property-changes\");\n\nmodule.exports = FastSet;\n\nObject.addEach(FastSet.prototype, PropertyChanges.prototype);\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/generic-map.js":"\"use strict\";\n\nvar Object = require(\"./shim-object\");\nvar Iterator = require(\"./iterator\");\n\nmodule.exports = GenericMap;\nfunction GenericMap() {\n    throw new Error(\"Can't construct. GenericMap is a mixin.\");\n}\n\n// all of these methods depend on the constructor providing a `store` set\n\nGenericMap.prototype.isMap = true;\n\nGenericMap.prototype.addEach = function (values) {\n    var i;\n    if (values && Object(values) === values) {\n        if (typeof values.forEach === \"function\") {\n            // copy map-alikes\n            if (values.isMap === true) {\n                values.forEach(function (value, key) {\n                    this.set(key, value);\n                }, this);\n            // iterate key value pairs of other iterables\n            } else {\n                values.forEach(function (pair) {\n                    this.set(pair[0], pair[1]);\n                }, this);\n            }\n        } else if (typeof values.length === \"number\") {\n            // Array-like objects that do not implement forEach, ergo,\n            // Arguments\n            for (i = 0; i < values.length; i++) {\n                this.add(values[i], i);\n            }\n        } else {\n            // copy other objects as map-alikes\n            Object.keys(values).forEach(function (key) {\n                this.set(key, values[key]);\n            }, this);\n        }\n    } else if (values && typeof values.length === \"number\") {\n        // String\n        for (i = 0; i < values.length; i++) {\n            this.add(values[i], i);\n        }\n    }\n    return this;\n};\n\nGenericMap.prototype.get = function (key, defaultValue) {\n    var item = this.store.get(new this.Item(key));\n    if (item) {\n        return item.value;\n    } else if (arguments.length > 1) {\n        console.log(\"Use of a second argument as default value is deprecated to match standards\");\n        return defaultValue;\n    } else {\n        return this.getDefault(key);\n    }\n};\n\nGenericMap.prototype.set = function (key, value) {\n    var item = new this.Item(key, value);\n    var found = this.store.get(item);\n    var grew = false;\n    if (found) { // update\n        if (this.dispatchesMapChanges) {\n            this.dispatchBeforeMapChange(key, found.value);\n        }\n        found.value = value;\n        if (this.dispatchesMapChanges) {\n            this.dispatchMapChange(key, value);\n        }\n    } else { // create\n        if (this.dispatchesMapChanges) {\n            this.dispatchBeforeMapChange(key, undefined);\n        }\n        if (this.store.add(item)) {\n            this.length++;\n            grew = true;\n        }\n        if (this.dispatchesMapChanges) {\n            this.dispatchMapChange(key, value);\n        }\n    }\n    return this;\n};\n\nGenericMap.prototype.add = function (value, key) {\n    return this.set(key, value);\n};\n\nGenericMap.prototype.has = function (key) {\n    return this.store.has(new this.Item(key));\n};\n\nGenericMap.prototype['delete'] = function (key) {\n    var item = new this.Item(key);\n    if (this.store.has(item)) {\n        var from = this.store.get(item).value;\n        if (this.dispatchesMapChanges) {\n            this.dispatchBeforeMapChange(key, from);\n        }\n        this.store[\"delete\"](item);\n        this.length--;\n        if (this.dispatchesMapChanges) {\n            this.dispatchMapChange(key, undefined);\n        }\n        return true;\n    }\n    return false;\n};\n\nGenericMap.prototype.clear = function () {\n    var keys, key;\n    if (this.dispatchesMapChanges) {\n        this.forEach(function (value, key) {\n            this.dispatchBeforeMapChange(key, value);\n        }, this);\n        keys = this.keysArray();\n    }\n    this.store.clear();\n    this.length = 0;\n    if (this.dispatchesMapChanges) {\n        for(var i=0;(key = keys[i]);i++) {\n            this.dispatchMapChange(key);\n        }\n        // keys.forEach(function (key) {\n        //     this.dispatchMapChange(key);\n        // }, this);\n    }\n};\n\nGenericMap.prototype.reduce = function (callback, basis, thisp) {\n    return this.store.reduce(function (basis, item) {\n        return callback.call(thisp, basis, item.value, item.key, this);\n    }, basis, this);\n};\n\nGenericMap.prototype.reduceRight = function (callback, basis, thisp) {\n    return this.store.reduceRight(function (basis, item) {\n        return callback.call(thisp, basis, item.value, item.key, this);\n    }, basis, this);\n};\n\nGenericMap.prototype.keysArray = function () {\n    return this.map(function (value, key) {\n        return key;\n    });\n};\nGenericMap.prototype.keys = function () {\n    return new Iterator(this.keysArray());\n};\n\nGenericMap.prototype.valuesArray = function () {\n    return this.map(Function.identity);\n};\nGenericMap.prototype.values = function () {\n    return new Iterator(this.valuesArray());\n};\n\nGenericMap.prototype.entriesArray = function () {\n    return this.map(function (value, key) {\n        return [key, value];\n    });\n};\nGenericMap.prototype.entries = function () {\n    return new Iterator(this.entriesArray());\n};\n\n// XXX deprecated\nGenericMap.prototype.items = function () {\n    return this.entriesArray();\n};\n\nGenericMap.prototype.equals = function (that, equals) {\n    equals = equals || Object.equals;\n    if (this === that) {\n        return true;\n    } else if (that && typeof that.every === \"function\") {\n        return that.length === this.length && that.every(function (value, key) {\n            return equals(this.get(key), value);\n        }, this);\n    } else {\n        var keys = Object.keys(that);\n        return keys.length === this.length && Object.keys(that).every(function (key) {\n            return equals(this.get(key), that[key]);\n        }, this);\n    }\n};\n\nGenericMap.prototype.toJSON = function () {\n    return this.entriesArray();\n};\n\n\nGenericMap.prototype.Item = Item;\n\nfunction Item(key, value) {\n    this.key = key;\n    this.value = value;\n}\n\nItem.prototype.equals = function (that) {\n    return Object.equals(this.key, that.key) && Object.equals(this.value, that.value);\n};\n\nItem.prototype.compare = function (that) {\n    return Object.compare(this.key, that.key);\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/iterator.js":"\"use strict\";\n\nmodule.exports = Iterator;\n\nvar Object = require(\"./shim-object\");\nvar GenericCollection = require(\"./generic-collection\");\n\n// upgrades an iterable to a Iterator\nfunction Iterator(iterable) {\n\n    var values = iterable && iterable.values && iterable.values();\n    if(values && typeof values.next === \"function\" ) {\n        return values;\n    }\n\n    if (!(this instanceof Iterator)) {\n        return new Iterator(iterable);\n    }\n\n    if (Array.isArray(iterable) || typeof iterable === \"string\")\n        return Iterator.iterate(iterable);\n\n    iterable = Object(iterable);\n\n    if (iterable instanceof Iterator) {\n        return iterable;\n    } else if (iterable.next) {\n        this.next = function () {\n            return iterable.next();\n        };\n    } else if (iterable.iterate) {\n        var iterator = iterable.iterate();\n        this.next = function () {\n            return iterator.next();\n        };\n    } else if (Object.prototype.toString.call(iterable) === \"[object Function]\") {\n        this.next = iterable;\n    } else {\n        throw new TypeError(\"Can't iterate \" + iterable);\n    }\n\n}\n\nIterator.prototype.forEach = GenericCollection.prototype.forEach;\nIterator.prototype.map = GenericCollection.prototype.map;\nIterator.prototype.filter = GenericCollection.prototype.filter;\nIterator.prototype.every = GenericCollection.prototype.every;\nIterator.prototype.some = GenericCollection.prototype.some;\nIterator.prototype.any = GenericCollection.prototype.any;\nIterator.prototype.all = GenericCollection.prototype.all;\nIterator.prototype.min = GenericCollection.prototype.min;\nIterator.prototype.max = GenericCollection.prototype.max;\nIterator.prototype.sum = GenericCollection.prototype.sum;\nIterator.prototype.average = GenericCollection.prototype.average;\nIterator.prototype.flatten = GenericCollection.prototype.flatten;\nIterator.prototype.zip = GenericCollection.prototype.zip;\nIterator.prototype.enumerate = GenericCollection.prototype.enumerate;\nIterator.prototype.sorted = GenericCollection.prototype.sorted;\nIterator.prototype.group = GenericCollection.prototype.group;\nIterator.prototype.reversed = GenericCollection.prototype.reversed;\nIterator.prototype.toArray = GenericCollection.prototype.toArray;\nIterator.prototype.toObject = GenericCollection.prototype.toObject;\nIterator.prototype.iterator = GenericCollection.prototype.iterator;\n\nIterator.prototype.__iterationObject = null;\nObject.defineProperty(Iterator.prototype,\"_iterationObject\", {\n    get: function() {\n        return this.__iterationObject || (this.__iterationObject = { done: false, value:void 0});\n    }\n});\n\n\n// this is a bit of a cheat so flatten and such work with the generic\n// reducible\nIterator.prototype.constructClone = function (values) {\n    var clone = [];\n    clone.addEach(values);\n    return clone;\n};\n\nIterator.prototype.mapIterator = function (callback /*, thisp*/) {\n    var self = Iterator(this),\n        thisp = arguments[1],\n        i = 0;\n\n    if (Object.prototype.toString.call(callback) != \"[object Function]\")\n        throw new TypeError();\n\n    return new self.constructor(function () {\n        if(self._iterationObject.done !== true) {\n            var callbackValue = callback.call(thisp, self.next().value, i++, self);\n            self._iterationObject.value = callbackValue;\n        }\n        return self._iterationObject;\n    });\n};\n\nIterator.prototype.filterIterator = function (callback /*, thisp*/) {\n    var self = Iterator(this),\n        thisp = arguments[1],\n        i = 0;\n\n    if (Object.prototype.toString.call(callback) != \"[object Function]\")\n        throw new TypeError();\n\n    return new self.constructor(function () {\n        var nextEntry;\n        while (true) {\n            nextEntry = self.next();\n            if(nextEntry.done !== true) {\n                if (callback.call(thisp, nextEntry.value, i++, self))\n                    return nextEntry;\n            }\n            else {\n                //done true and value undefined at this point\n                return nextEntry;\n            }\n        }\n    });\n};\n\nIterator.prototype.reduce = function (callback /*, initial, thisp*/) {\n    var self = Iterator(this),\n        result = arguments[1],\n        thisp = arguments[2],\n        i = 0,\n        nextEntry;\n\n    if (Object.prototype.toString.call(callback) != \"[object Function]\")\n        throw new TypeError();\n\n    // first iteration unrolled\n    nextEntry = self.next();\n    if(nextEntry.done === true) {\n        if (arguments.length > 1) {\n            return arguments[1]; // initial\n        } else {\n            throw TypeError(\"cannot reduce a value from an empty iterator with no initial value\");\n        }\n    }\n    if (arguments.length > 1) {\n        result = callback.call(thisp, result, nextEntry.value, i, self);\n    } else {\n        result = nextEntry.value;\n    }\n    i++;\n    // remaining entries\n    while (true) {\n        nextEntry = self.next();\n        if(nextEntry.done === true) {\n            return result;\n        }\n        result = callback.call(thisp, result, nextEntry.value, i, self);\n        i++;\n    }\n\n};\n\nIterator.prototype.concat = function () {\n    return Iterator.concat(\n        Array.prototype.concat.apply(this, arguments)\n    );\n};\n\nIterator.prototype.dropWhile = function (callback /*, thisp */) {\n    var self = Iterator(this),\n        thisp = arguments[1],\n        stopped = false,\n        stopValue,\n        nextEntry,\n        i = 0;\n\n    if (Object.prototype.toString.call(callback) != \"[object Function]\")\n        throw new TypeError();\n\n    while (true) {\n        nextEntry = self.next();\n        if(nextEntry.done === true) {\n            break;\n        }\n        if (!callback.call(thisp, nextEntry.value, i, self)) {\n            stopped = true;\n            stopValue = nextEntry.value;\n            break;\n        }\n        i++;\n    }\n\n    if (stopped) {\n        return self.constructor([stopValue]).concat(self);\n    } else {\n        return self.constructor([]);\n    }\n};\n\nIterator.prototype.takeWhile = function (callback /*, thisp*/) {\n    var self = Iterator(this),\n        thisp = arguments[1],\n        nextEntry,\n        i = 0;\n\n    if (Object.prototype.toString.call(callback) != \"[object Function]\")\n        throw new TypeError();\n\n    return new self.constructor(function () {\n        if(self._iterationObject.done !== true) {\n            var value = self.next().value;\n            if(callback.call(thisp, value, i++, self)) {\n                self._iterationObject.value = value;\n            }\n            else {\n                self._iterationObject.done = true;\n                self._iterationObject.value = void 0;\n            }\n        }\n        return self._iterationObject;\n    });\n\n};\n\nIterator.prototype.zipIterator = function () {\n    return Iterator.unzip(\n        Array.prototype.concat.apply(this, arguments)\n    );\n};\n\nIterator.prototype.enumerateIterator = function (start) {\n    return Iterator.count(start).zipIterator(this);\n};\n\n// creates an iterator for Array and String\nIterator.iterate = function (iterable) {\n    var start;\n    start = 0;\n    return new Iterator(function () {\n        // advance to next owned entry\n        if (typeof iterable === \"object\") {\n            while (!(start in iterable)) {\n                // deliberately late bound\n                if (start >= iterable.length) {\n                    this._iterationObject.done = true;\n                    this._iterationObject.value = void 0;\n                    break;\n                }\n                else start += 1;\n            }\n        } else if (start >= iterable.length) {\n            this._iterationObject.done = true;\n            this._iterationObject.value = void 0;\n        }\n\n        if(!this._iterationObject.done) {\n            this._iterationObject.value = iterable[start];\n            start += 1;\n        }\n        return this._iterationObject;\n    });\n};\n\nIterator.cycle = function (cycle, times) {\n    var next;\n    if (arguments.length < 2)\n        times = Infinity;\n    //cycle = Iterator(cycle).toArray();\n    return new Iterator(function () {\n        var iteration, nextEntry;\n\n        if(next) {\n            nextEntry = next();\n        }\n\n        if(!next || nextEntry.done === true) {\n            if (times > 0) {\n                times--;\n                iteration = Iterator.iterate(cycle);\n                nextEntry = (next = iteration.next.bind(iteration))();\n            }\n            else {\n                this._iterationObject.done = true;\n                nextEntry = this._iterationObject;            }\n        }\n        return nextEntry;\n    });\n};\n\nIterator.concat = function (iterators) {\n    iterators = Iterator(iterators);\n    var next;\n    return new Iterator(function (){\n        var iteration, nextEntry;\n        if(next) nextEntry = next();\n        if(!nextEntry || nextEntry.done === true) {\n            nextEntry = iterators.next();\n            if(nextEntry.done === false) {\n                iteration = Iterator(nextEntry.value);\n                next = iteration.next.bind(iteration);\n                return next();\n            }\n            else {\n                return nextEntry;\n            }\n        }\n        else return nextEntry;\n    });\n};\n\nIterator.unzip = function (iterators) {\n    iterators = Iterator(iterators).map(Iterator);\n    if (iterators.length === 0)\n        return new Iterator([]);\n    return new Iterator(function () {\n        var stopped, nextEntry;\n        var result = iterators.map(function (iterator) {\n            nextEntry = iterator.next();\n            if (nextEntry.done === true ) {\n                stopped = true;\n            }\n            return nextEntry.value;\n        });\n        if (stopped) {\n            this._iterationObject.done = true;\n            this._iterationObject.value = void 0;\n        }\n        else {\n            this._iterationObject.value = result;\n        }\n        return this._iterationObject;\n    });\n};\n\nIterator.zip = function () {\n    return Iterator.unzip(\n        Array.prototype.slice.call(arguments)\n    );\n};\n\nIterator.chain = function () {\n    return Iterator.concat(\n        Array.prototype.slice.call(arguments)\n    );\n};\n\nIterator.range = function (start, stop, step) {\n    if (arguments.length < 3) {\n        step = 1;\n    }\n    if (arguments.length < 2) {\n        stop = start;\n        start = 0;\n    }\n    start = start || 0;\n    step = step || 1;\n    return new Iterator(function () {\n        if (start >= stop) {\n            this._iterationObject.done = true;\n            this._iterationObject.value = void 0;\n        }\n        var result = start;\n        start += step;\n        this._iterationObject.value = result;\n\n        return this._iterationObject;\n    });\n};\n\nIterator.count = function (start, step) {\n    return Iterator.range(start, Infinity, step);\n};\n\nIterator.repeat = function (value, times) {\n    return new Iterator.range(times).mapIterator(function () {\n        return value;\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/generic-order.js":"\nvar Object = require(\"./shim-object\");\n\nmodule.exports = GenericOrder;\nfunction GenericOrder() {\n    throw new Error(\"Can't construct. GenericOrder is a mixin.\");\n}\n\nGenericOrder.prototype.equals = function (that, equals) {\n    equals = equals || this.contentEquals || Object.equals;\n\n    if (this === that) {\n        return true;\n    }\n    if (!that) {\n        return false;\n    }\n\n    var self = this;\n    return (\n        this.length === that.length &&\n        this.zip(that).every(function (pair) {\n            return equals(pair[0], pair[1]);\n        })\n    );\n};\n\nGenericOrder.prototype.compare = function (that, compare) {\n    compare = compare || this.contentCompare || Object.compare;\n\n    if (this === that) {\n        return 0;\n    }\n    if (!that) {\n        return 1;\n    }\n\n    var length = Math.min(this.length, that.length);\n    var comparison = this.zip(that).reduce(function (comparison, pair, index) {\n        if (comparison === 0) {\n            if (index >= length) {\n                return comparison;\n            } else {\n                return compare(pair[0], pair[1]);\n            }\n        } else {\n            return comparison;\n        }\n    }, 0);\n    if (comparison === 0) {\n        return this.length - that.length;\n    }\n    return comparison;\n};\n\nGenericOrder.prototype.toJSON = function () {\n    return this.toArray();\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/generic-set.js":"\nmodule.exports = GenericSet;\nfunction GenericSet() {\n    throw new Error(\"Can't construct. GenericSet is a mixin.\");\n}\n\nGenericSet.prototype.isSet = true;\n\nGenericSet.prototype.union = function (that) {\n    var union =  this.constructClone(this);\n    union.addEach(that);\n    return union;\n};\n\nGenericSet.prototype.intersection = function (that) {\n    return this.constructClone(this.filter(function (value) {\n        return that.has(value);\n    }));\n};\n\nGenericSet.prototype.difference = function (that) {\n    var union =  this.constructClone(this);\n    union.deleteEach(that);\n    return union;\n};\n\nGenericSet.prototype.symmetricDifference = function (that) {\n    var union = this.union(that);\n    var intersection = this.intersection(that);\n    return union.difference(intersection);\n};\n\nGenericSet.prototype.deleteAll = function (value) {\n    // deleteAll is equivalent to delete for sets since they guarantee that\n    // only one value exists for an equivalence class, but deleteAll returns\n    // the count of deleted values instead of whether a value was deleted.\n    return +this[\"delete\"](value);\n};\n\nGenericSet.prototype.equals = function (that, equals) {\n    var self = this;\n    return (\n        that && typeof that.reduce === \"function\" &&\n        this.length === that.length &&\n        that.reduce(function (equal, value) {\n            return equal && self.has(value, equals);\n        }, true)\n    );\n};\n\nGenericSet.prototype.forEach = function (callback /*, thisp*/) {\n    var thisp = arguments[1];\n    return this.reduce(function (undefined, value, key, object, depth) {\n        //ECMASCRIPT Sets send value twice in callback to forEach\n        callback.call(thisp, value, value, object, depth);\n    }, undefined);\n};\n\n\nGenericSet.prototype.toJSON = function () {\n    return this.toArray();\n};\n\n// W3C DOMTokenList API overlap (does not handle variadic arguments)\n\nGenericSet.prototype.contains = function (value) {\n    return this.has(value);\n};\n\nGenericSet.prototype.remove = function (value) {\n    return this[\"delete\"](value);\n};\n\nGenericSet.prototype.toggle = function (value) {\n    if (this.has(value)) {\n        this[\"delete\"](value);\n    } else {\n        this.add(value);\n    }\n};\n\nvar _valuesArrayFunction = function(value,key) {return value;};\nGenericSet.prototype.valuesArray = function() {\n    return this.map(_valuesArrayFunction);\n}\nvar _entriesArrayFunction = function(value,key) {return [key,value];};\nGenericSet.prototype.entriesArray = function() {\n    return this.map(_entriesArrayFunction);\n}\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/heap.js":"\n// Adapted from Eloquent JavaScript by Marijn Haverbeke\n// http://eloquentjavascript.net/appendix2.html\n\nvar ArrayChanges = require(\"./listen/array-changes\");\nvar Shim = require(\"./shim\");\nvar GenericCollection = require(\"./generic-collection\");\nvar MapChanges = require(\"./listen/map-changes\");\nvar RangeChanges = require(\"./listen/range-changes\");\nvar PropertyChanges = require(\"./listen/property-changes\");\n\n// Max Heap by default.  Comparison can be reversed to produce a Min Heap.\n\nmodule.exports = Heap;\n\nfunction Heap(values, equals, compare) {\n    if (!(this instanceof Heap)) {\n        return new Heap(values, equals, compare);\n    }\n    this.contentEquals = equals || Object.equals;\n    this.contentCompare = compare || Object.compare;\n    this.content = [];\n    this.length = 0;\n    this.addEach(values);\n}\n\nHeap.Heap = Heap; // hack so require(\"heap\").Heap will work in MontageJS\n\nObject.addEach(Heap.prototype, GenericCollection.prototype);\nObject.addEach(Heap.prototype, PropertyChanges.prototype);\nObject.addEach(Heap.prototype, RangeChanges.prototype);\nObject.addEach(Heap.prototype, MapChanges.prototype);\n\nHeap.from = GenericCollection.from;\n\nHeap.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.contentEquals,\n        this.contentCompare\n    );\n};\n\n// TODO variadic\nHeap.prototype.push = function (value) {\n    this.content.push(value);\n    this.float(this.content.length - 1);\n    this.length++;\n};\n\nHeap.prototype.pop = function () {\n    // Store the first value so we can return it later.  This will leave a gap\n    // at index 0 that must be filled.\n    var result = this.content[0];\n    // Remove the value at the end of the array.  The value most be removed\n    // from the end to preserve the completness of the tree, despite that the\n    // last child is also among the most likely to need to sink back to the\n    // bottom.\n    var top = this.content.pop();\n    // If there are any values remaining, put the last value on the top and\n    // let it sink back down.\n    if (this.content.length > 0) {\n        this.content.set(0, top);\n        this.sink(0);\n    }\n    this.length--;\n    return result;\n};\n\nHeap.prototype.add = function (value) {\n    this.push(value);\n};\n\n// indexOf must do a linear search since a binary heap does not preserve a\n// strict sort order.  Thus, deletion takes linear time for all values except\n// for the max value.\n\nHeap.prototype.indexOf = function (value) {\n    for (var index = 0; index < this.length; index++) {\n        if (this.contentEquals(this.content[index], value)) {\n            return index;\n        }\n    }\n    return -1;\n};\n\nHeap.prototype[\"delete\"] = function (value, equals) {\n    if (equals) {\n        throw new Error(\"Heap#delete does not support second argument: equals\");\n    }\n    var index = this.indexOf(value);\n    if (index === -1)\n        return false;\n    var top = this.content.pop();\n    this.length = this.content.length;\n    if (index === this.content.length)\n        return true;\n    this.content.set(index, top);\n    var comparison = this.contentCompare(top, value);\n    if (comparison > 0) {\n        this.float(index);\n    } else if (comparison < 0) {\n        this.sink(index);\n    }\n    return true;\n};\n\nHeap.prototype.peek = function () {\n    if (this.length) {\n        return this.content[0];\n    }\n};\n\nHeap.prototype.max = function () {\n    return this.peek();\n};\n\nHeap.prototype.one = function () {\n    return this.peek();\n};\n\n// Brings a value up until its parent is greater than it\nHeap.prototype.float = function (index) {\n    // Grab the value that is being adjusted\n    var value = this.content[index];\n    // A value can go no higher that the top: index 0\n    while (index > 0) {\n        // Compute the parent value's index and fetch it\n        var parentIndex = Math.floor((index + 1) / 2) - 1;\n        var parent = this.content[parentIndex];\n        // If the parent is less than it\n        if (this.contentCompare(parent, value) < 0) {\n            this.content.set(parentIndex, value);\n            this.content.set(index, parent);\n        } else {\n            // Stop propagating if the parent is greater than the value.\n            break;\n        }\n        // Proceed upward\n        index = parentIndex;\n    }\n};\n\n// Brings a value down until its children are both less than it\nHeap.prototype.sink = function (index) {\n    // Moves a value downward until it is greater than its children.\n    var length = this.content.length;\n    var value = this.content[index];\n    var left, right, leftIndex, rightIndex, swapIndex, needsSwap;\n\n    while (true) {\n        // Invariant: the value is at index.\n        // Variant: the index proceedes down the tree.\n\n        // Compute the indicies of the children.\n        rightIndex = (index + 1) * 2;\n        leftIndex = rightIndex - 1;\n\n        // If the left child exists, determine whether it is greater than the\n        // parent (value) and thus whether it can be floated upward.\n        needsSwap = false;\n        if (leftIndex < length) {\n            // Look it up and compare it.\n            var left = this.content[leftIndex];\n            var comparison = this.contentCompare(left, value);\n            // If the child is greater than the parent, it can be floated.\n            if (comparison > 0) {\n                swapIndex = leftIndex;\n                needsSwap = true;\n            }\n        }\n\n        // If the right child exists, determine whether it is greater than the\n        // parent (value), or even greater than the left child.\n        if (rightIndex < length) {\n            var right = this.content[rightIndex];\n            var comparison = this.contentCompare(right, needsSwap ? left : value);\n            if (comparison > 0) {\n                swapIndex = rightIndex;\n                needsSwap = true;\n            }\n        }\n\n        // if there is a child that is less than the value, float the child and\n        // sink the value.\n        if (needsSwap) {\n            this.content.set(index, this.content[swapIndex]);\n            this.content.set(swapIndex, value);\n            index = swapIndex;\n            // and continue sinking\n        } else {\n            // if the children are both less than the value\n            break;\n        }\n\n    }\n\n};\n\nHeap.prototype.clear = function () {\n    this.content.clear();\n    this.length = 0;\n};\n\nHeap.prototype.reduce = function (callback, basis /*, thisp*/) {\n    var thisp = arguments[2];\n    return this.content.reduce(function (basis, value, key) {\n        return callback.call(thisp, basis, value, key, this);\n    }, basis, this);\n};\n\nHeap.prototype.reduceRight = function (callback, basis /*, thisp*/) {\n    var thisp = arguments[2];\n    return this.content.reduceRight(function (basis, value, key) {\n        return callback.call(thisp, basis, value, key, this);\n    }, basis, this);\n};\n\nHeap.prototype.toJSON = function () {\n    return this.toArray();\n};\n\nHeap.prototype.makeObservable = function () {\n    // TODO refactor dispatchers to allow direct forwarding\n    this.content.addRangeChangeListener(this, \"content\");\n    this.content.addBeforeRangeChangeListener(this, \"content\");\n    this.content.addMapChangeListener(this, \"content\");\n    this.content.addBeforeMapChangeListener(this, \"content\");\n};\n\nHeap.prototype.handleContentRangeChange = function (plus, minus, index) {\n    this.dispatchRangeChange(plus, minus, index);\n};\n\nHeap.prototype.handleContentRangeWillChange = function (plus, minus, index) {\n    this.dispatchBeforeRangeChange(plus, minus, index);\n};\n\nHeap.prototype.handleContentMapChange = function (value, key) {\n    this.dispatchMapChange(key, value);\n};\n\nHeap.prototype.handleContentMapWillChange = function (value, key) {\n    this.dispatchBeforeMapChange(key, value);\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/listen/array-changes.js":"/*\n Based in part on observable arrays from Motorola Mobility’s Montage\n Copyright (c) 2012, Motorola Mobility LLC. All Rights Reserved.\n 3-Clause BSD License\n https://github.com/motorola-mobility/montage/blob/master/LICENSE.md\n */\n\n/*\n This module is responsible for observing changes to owned properties of\n objects and changes to the content of arrays caused by method calls.\n The interface for observing array content changes establishes the methods\n necessary for any collection with observable content.\n */\n\nrequire(\"../shim\");\nvar array_splice = Array.prototype.splice,\n    array_spliceOne = Array.prototype.spliceOne,\n    array_slice = Array.prototype.slice,\n    array_reverse = Array.prototype.reverse,\n    array_sort = Array.prototype.sort,\n    array_swap = Array.prototype.swap,\n    array_push = Array.prototype.push,\n\n// use different strategies for making arrays observable between Internet\n// Explorer and other browsers.\n    protoIsSupported = {}.__proto__ === Object.prototype,\n    array_makeObservable,\n    LENGTH = \"length\";\n\nif (protoIsSupported) {\n    array_makeObservable = function () {\n        this.__proto__ = ChangeDispatchArray;\n    };\n} else {\n    array_makeObservable = function () {\n        Object.defineProperties(this, observableArrayProperties);\n    };\n}\n\nObject.defineProperty(Array.prototype, \"makeObservable\", {\n    value: array_makeObservable,\n    writable: true,\n    configurable: true,\n    enumerable: false\n});\n\n//This is a no-op test in property-changes.js - PropertyChanges.prototype.makePropertyObservable, so might as well not pay the price every time....\nObject.defineProperty(Array.prototype, \"makePropertyObservable\", {\n    value: function(){},\n    writable: true,\n    configurable: true,\n    enumerable: false\n});\n\nvar observableArrayProperties = {\n\n    isObservable: {\n        value: true,\n        writable: true,\n        configurable: true\n    },\n\n    makeObservable: {\n        value: Function.noop, // idempotent\n        writable: true,\n        configurable: true\n    },\n\n    reverse: {\n        value: function reverse() {\n\n            var reversed = this.constructClone(this);\n            reversed.reverse();\n            this.swap(0, this.length, reversed);\n\n            return this;\n        },\n        writable: true,\n        configurable: true\n    },\n\n    sort: {\n        value: function sort() {\n            var index, length;\n            // dispatch before change events\n            this.dispatchBeforeRangeChange(this, this, 0);\n            for (index = 0, length = this.length; index < length; index++) {\n                PropertyChanges.dispatchBeforeOwnPropertyChange(this, index, this[index]);\n                this.dispatchBeforeMapChange(index, this[index]);\n            }\n\n            // actual work\n            array_sort.apply(this, arguments);\n\n            // dispatch after change events\n            for (index = 0, length = this.length; index < length; index++) {\n                PropertyChanges.dispatchOwnPropertyChange(this, index, this[index]);\n                this.dispatchMapChange(index, this[index]);\n            }\n            this.dispatchRangeChange(this, this, 0);\n\n            return this;\n        },\n        writable: true,\n        configurable: true\n    },\n\n    _dispatchBeforeOwnPropertyChange: {\n        value: function _dispatchBeforeOwnPropertyChange(start, length) {\n            for (var i = start, countI = start+length; i < countI; i++) {\n                PropertyChanges.dispatchBeforeOwnPropertyChange(this, i, this[i]);\n                this.dispatchBeforeMapChange(i, this[i]);\n            }\n        }\n    },\n\n    _dispatchOwnPropertyChange: {\n        value: function _dispatchOwnPropertyChange(start, length) {\n            for (var i = start, countI = start+length; i < countI; i++) {\n                this.dispatchOwnPropertyChange(i, this[i]);\n                this.dispatchMapChange(i, this[i]);\n            }\n        }\n    },\n\n    swap: {\n        value: function swap(start, length, plus) {\n            var hasOwnPropertyChangeDescriptor, i, j, plusLength;\n            if (plus) {\n                if (!Array.isArray(plus)) {\n                    plus = array_slice.call(plus);\n                }\n            } else {\n                plus = Array.empty;\n            }\n            plusLength = plus.length;\n\n            if (start < 0) {\n                start = this.length + start;\n            } else if (start > this.length) {\n                var holes = start - this.length;\n                var newPlus = Array(holes + plusLength);\n                for (i = 0, j = holes; i < plusLength; i++, j++) {\n                    if (i in plus) {\n                        newPlus[j] = plus[i];\n                    }\n                }\n                plus = newPlus;\n                plusLength = plus.length;\n                start = this.length;\n            }\n\n            var minus;\n            if (length === 0) {\n                // minus will be empty\n                if (plusLength === 0) {\n                    // at this point if plus is empty there is nothing to do.\n                    return []; // [], but spare us an instantiation\n                }\n                minus = Array.empty;\n            } else {\n                minus = array_slice.call(this, start, start + length);\n            }\n            var diff = plusLength - minus.length;\n            var oldLength = this.length;\n            var newLength = Math.max(this.length + diff, start + plusLength);\n            var longest = (oldLength > newLength) ? oldLength : newLength;\n            // dispatch before change events\n            if (diff) {\n                PropertyChanges.dispatchBeforeOwnPropertyChange(this, LENGTH, this.length);\n            }\n            this.dispatchBeforeRangeChange(plus, minus, start);\n            if (diff === 0) { // substring replacement\n                this._dispatchBeforeOwnPropertyChange(start, plusLength);\n            } else if ((hasOwnPropertyChangeDescriptor = PropertyChanges.hasOwnPropertyChangeDescriptor(this))) {\n                // all subsequent values changed or shifted.\n                // avoid (longest - start) long walks if there are no\n                // registered descriptors.\n                this._dispatchBeforeOwnPropertyChange(start, longest-start);\n            }\n\n            // actual work\n            if (start > oldLength) {\n                this.length = start;\n            }\n            var result = array_swap.call(this, start, length, plus);\n\n            // dispatch after change events\n            if (diff === 0) { // substring replacement\n                this._dispatchOwnPropertyChange(start,plusLength);\n            } else if (hasOwnPropertyChangeDescriptor) {\n                // all subsequent values changed or shifted.\n                // avoid (longest - start) long walks if there are no\n                // registered descriptors.\n                this._dispatchOwnPropertyChange(start,longest-start);\n            }\n            this.dispatchRangeChange(plus, minus, start);\n            if (diff) {\n                this.dispatchOwnPropertyChange(LENGTH, this.length);\n            }\n\n            return result;\n        },\n        writable: true,\n        configurable: true\n    },\n\n    splice: {\n        value: function splice(start, length) {\n            // start parameter should be min(start, this.length)\n            // http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.12\n            if (start > this.length) {\n                start = this.length;\n            }\n            return this.swap.call(this, start, length, array_slice.call(arguments, 2));\n        },\n        writable: true,\n        configurable: true\n    },\n\n    // splice is the array content change utility belt.  forward all other\n    // content changes to splice so we only have to write observer code in one\n    // place\n\n    spliceOne: {\n        value: function splice(start,itemToAdd) {\n            //Nothhing to add so length will go down by one.\n            var plus, minus, oldLength = this.length, newLength, longest, argumentsLength = arguments.length, hasOwnPropertyChangeDescriptor;\n            if(argumentsLength === 1) {\n                PropertyChanges.dispatchBeforeOwnPropertyChange(this, LENGTH, this.length);\n                newLength = this.length - 1;\n                plus = Array.empty;\n            }\n            //Care about 2 only\n            else {\n                plus = [itemToAdd];\n                newLength = this.length;\n            }\n            minus = [this[start]];\n            longest = (oldLength > newLength) ? oldLength : newLength;\n\n            this.dispatchBeforeRangeChange(plus, minus, start);\n            if (argumentsLength === 2) { // substring replacement\n                this._dispatchBeforeOwnPropertyChange(start, 1);\n            } else if ((hasOwnPropertyChangeDescriptor = PropertyChanges.hasOwnPropertyChangeDescriptor(this))) {\n                // all subsequent values changed or shifted.\n                // avoid (longest - start) long walks if there are no\n                // registered descriptors.\n                this._dispatchBeforeOwnPropertyChange(start, longest-start);\n            }\n\n            if (argumentsLength === 1) { // substring replacement\n                array_spliceOne.call(this,start);\n            }\n            else {\n                array_spliceOne.call(this,start,itemToAdd);\n            }\n\n            // dispatch after change events\n            if (argumentsLength === 2) { // substring replacement\n                this._dispatchOwnPropertyChange(start,1);\n            } else if (hasOwnPropertyChangeDescriptor) {\n                // all subsequent values changed or shifted.\n                // avoid (longest - start) long walks if there are no\n                // registered descriptors.\n                this._dispatchOwnPropertyChange(start,longest-start);\n            }\n            this.dispatchRangeChange(plus, minus, start);\n\n            if(argumentsLength === 1) {\n                this.dispatchOwnPropertyChange(LENGTH, this.length);\n            }\n\n        },\n        writable: true,\n        configurable: true\n    },\n    _setSwapBuffer: {\n        get: function() {\n            return this.__setSwapBuffer || (Object.defineProperty(this,\"__setSwapBuffer\",{\n                value: [],\n                writable: true,\n                configurable: true,\n                enumerable: false\n            })).__setSwapBuffer;\n        },\n        enumerable: false\n    },\n    set: {\n        value: function set(index, value) {\n            var hasValue = typeof value !== undefined,\n                diff ,\n                plus = hasValue ? [] : Array.empty,\n                minus,\n                start,\n                hasOwnPropertyChangeDescriptor;\n\n\n            if(index >= this.length) {\n                plus[index - this.length] = value;\n                diff = (index + 1) - this.length;\n                start = this.length;\n            }\n            else {\n                plus[0] = value;\n                diff = 0;\n                start = index;\n            }\n            minus = diff === 0 ? [this[index]] : Array.empty;\n\n\n            if(diff>0) {\n                PropertyChanges.dispatchBeforeOwnPropertyChange(this, LENGTH, this.length);\n            }\n            this.dispatchBeforeRangeChange(plus, minus, start);\n            if (diff === 0) { // substring replacement\n                this._dispatchBeforeOwnPropertyChange(start, 1);\n            } else if ((hasOwnPropertyChangeDescriptor = PropertyChanges.hasOwnPropertyChangeDescriptor(this))) {\n                // all subsequent values changed or shifted.\n                // avoid (longest - start) long walks if there are no\n                // registered descriptors.\n                this._dispatchBeforeOwnPropertyChange(start, diff);\n            }\n\n            this[index] = value;\n\n            // dispatch after change events\n            if (diff === 0) { // substring replacement\n                this._dispatchOwnPropertyChange(start,1);\n            } else if (hasOwnPropertyChangeDescriptor) {\n                // all subsequent values changed or shifted.\n                // avoid (longest - start) long walks if there are no\n                // registered descriptors.\n                this._dispatchOwnPropertyChange(start,diff);\n            }\n            this.dispatchRangeChange(plus, minus, start);\n            if (diff) {\n                this.dispatchOwnPropertyChange(LENGTH, this.length);\n            }\n            return true;\n        },\n        writable: true,\n        configurable: true\n    },\n\n    shift: {\n        value: function shift() {\n            return this.splice(0, 1)[0];\n        },\n        writable: true,\n        configurable: true\n    },\n\n    pop: {\n        value: function pop() {\n            if (this.length) {\n                return this.splice(this.length - 1, 1)[0];\n            }\n        },\n        writable: true,\n        configurable: true\n    },\n\n    push: {\n        value: function push(arg) {\n            var start = this.length,\n                addedCount = arguments.length,\n                argArray,\n                hasOwnPropertyChangeDescriptor;\n\n            argArray = addedCount === 1 ? [arguments[0]] : Array.apply(null, arguments);\n\n            if(addedCount > 0) {\n                PropertyChanges.dispatchBeforeOwnPropertyChange(this, LENGTH, start);\n                this.dispatchBeforeRangeChange(argArray, Array.empty, start);\n\n                if(hasOwnPropertyChangeDescriptor = PropertyChanges.hasOwnPropertyChangeDescriptor(this)) {\n                    this._dispatchBeforeOwnPropertyChange(start, addedCount);\n                }\n            }\n\n            array_push.apply(this,arguments);\n\n            if (addedCount > 0) {\n                if (hasOwnPropertyChangeDescriptor) {\n                    this._dispatchOwnPropertyChange(start,addedCount);\n                }\n                this.dispatchRangeChange(argArray,Array.empty, start);\n                this.dispatchOwnPropertyChange(LENGTH, this.length);\n            }\n\n        },\n        writable: true,\n        configurable: true\n    },\n\n    unshift: {\n        value: function unshift(arg) {\n            if (arguments.length === 1) {\n                return this.splice(0, 0, arg);\n            } else {\n                var args = array_slice.call(arguments);\n                return this.swap(0, 0, args);\n            }\n        },\n        writable: true,\n        configurable: true\n    },\n\n    clear: {\n        value: function clear() {\n            return this.splice(0, this.length);\n        },\n        writable: true,\n        configurable: true\n    }\n\n};\n\nvar ChangeDispatchArray = Object.create(Array.prototype, observableArrayProperties);\nexports.observableArrayProperties = observableArrayProperties;\n\nvar PropertyChanges = require(\"./property-changes\");\nvar RangeChanges = require(\"./range-changes\");\nvar MapChanges = require(\"./map-changes\");\n\nObject.defineEach(Array.prototype, PropertyChanges.prototype, false, /*configurable*/true, /*enumerable*/ false, /*writable*/true);\nObject.defineEach(Array.prototype, RangeChanges.prototype, false, /*configurable*/true, /*enumerable*/ false, /*writable*/true);\nObject.defineEach(Array.prototype, MapChanges.prototype, false, /*configurable*/true, /*enumerable*/ false, /*writable*/true);\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/lfu-map.js":"\"use strict\";\n\nvar Shim = require(\"./shim\");\nvar LfuSet = require(\"./lfu-set\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericMap = require(\"./generic-map\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar MapChanges = require(\"./listen/map-changes\");\n\nmodule.exports = LfuMap;\n\nfunction LfuMap(values, maxLength, equals, hash, getDefault) {\n    if (!(this instanceof LfuMap)) {\n        return new LfuMap(values, maxLength, equals, hash, getDefault);\n    }\n    equals = equals || Object.equals;\n    hash = hash || Object.hash;\n    getDefault = getDefault || Function.noop;\n    this.contentEquals = equals;\n    this.contentHash = hash;\n    this.getDefault = getDefault;\n    this.store = new LfuSet(\n        undefined,\n        maxLength,\n        function keysEqual(a, b) {\n            return equals(a.key, b.key);\n        },\n        function keyHash(item) {\n            return hash(item.key);\n        }\n    );\n    this.length = 0;\n    this.addEach(values);\n}\n\nLfuMap.LfuMap = LfuMap; // hack so require(\"lfu-map\").LfuMap will work in MontageJS\n\nObject.addEach(LfuMap.prototype, GenericCollection.prototype);\nObject.addEach(LfuMap.prototype, GenericMap.prototype);\nObject.addEach(LfuMap.prototype, PropertyChanges.prototype);\nObject.addEach(LfuMap.prototype, MapChanges.prototype);\n\nObject.defineProperty(LfuMap.prototype,\"size\",GenericCollection._sizePropertyDescriptor);\nLfuMap.from = GenericCollection.from;\n\nLfuMap.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.maxLength,\n        this.contentEquals,\n        this.contentHash,\n        this.getDefault\n    );\n};\n\nLfuMap.prototype.log = function (charmap, stringify) {\n    stringify = stringify || this.stringify;\n    this.store.log(charmap, stringify);\n};\n\nLfuMap.prototype.stringify = function (item, leader) {\n    return leader + JSON.stringify(item.key) + \": \" + JSON.stringify(item.value);\n};\n\nLfuMap.prototype.addMapChangeListener = function () {\n    if (!this.dispatchesMapChanges) {\n        // Detect LFU deletions in the LfuSet and emit as MapChanges.\n        // Array and Heap have no store.\n        // Dict and FastMap define no listeners on their store.\n        var self = this;\n        this.store.addBeforeRangeChangeListener(function(plus, minus) {\n            if (plus.length && minus.length) {  // LFU item pruned\n                self.dispatchBeforeMapChange(minus[0].key, undefined);\n            }\n        });\n        this.store.addRangeChangeListener(function(plus, minus) {\n            if (plus.length && minus.length) {\n                self.dispatchMapChange(minus[0].key, undefined);\n            }\n        });\n    }\n    MapChanges.prototype.addMapChangeListener.apply(this, arguments);\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/lfu-set.js":"\"use strict\";\n\n// Based on http://dhruvbird.com/lfu.pdf\n\nvar Shim = require(\"./shim\");\nvar Set = require(\"./set\").CollectionsSet;\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericSet = require(\"./generic-set\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar RangeChanges = require(\"./listen/range-changes\");\n\nmodule.exports = LfuSet;\n\nfunction LfuSet(values, capacity, equals, hash, getDefault) {\n    if (!(this instanceof LfuSet)) {\n        return new LfuSet(values, capacity, equals, hash, getDefault);\n    }\n    capacity = capacity || Infinity;\n    equals = equals || Object.equals;\n    hash = hash || Object.hash;\n    getDefault = getDefault || Function.noop;\n\n    // TODO\n    this.store = new Set(\n        undefined,\n        function valueEqual(a, b) {\n            return equals(a.value, b.value);\n        },\n        function valueHash(node) {\n            return hash(node.value);\n        }\n    );\n    this.frequencyHead = new this.FrequencyNode(0);\n\n    this.contentEquals = equals;\n    this.contentHash = hash;\n    this.getDefault = getDefault;\n    this.capacity = capacity;\n    this.length = 0;\n    this.addEach(values);\n}\n\nLfuSet.LfuSet = LfuSet; // hack so require(\"lfu-set\").LfuSet will work in MontageJS\n\nObject.addEach(LfuSet.prototype, GenericCollection.prototype);\nObject.addEach(LfuSet.prototype, GenericSet.prototype);\nObject.addEach(LfuSet.prototype, PropertyChanges.prototype);\nObject.addEach(LfuSet.prototype, RangeChanges.prototype);\nObject.defineProperty(LfuSet.prototype,\"size\",GenericCollection._sizePropertyDescriptor);\nLfuSet.from = GenericCollection.from;\n\nLfuSet.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.capacity,\n        this.contentEquals,\n        this.contentHash,\n        this.getDefault\n    );\n};\n\nLfuSet.prototype.has = function (value) {\n    return this.store.has(new this.Node(value));\n};\n\nLfuSet.prototype.get = function (value, equals) {\n    if (equals) {\n        throw new Error(\"LfuSet#get does not support second argument: equals\");\n    }\n\n    var node = this.store.get(new this.Node(value));\n    if (node !== undefined) {\n        var frequencyNode = node.frequencyNode;\n        var nextFrequencyNode = frequencyNode.next;\n        if (nextFrequencyNode.frequency !== frequencyNode.frequency + 1) {\n            nextFrequencyNode = new this.FrequencyNode(frequencyNode.frequency + 1, frequencyNode, nextFrequencyNode);\n        }\n\n        nextFrequencyNode.values.add(node);\n        node.frequencyNode = nextFrequencyNode;\n        frequencyNode.values[\"delete\"](node);\n\n        if (frequencyNode.values.length === 0) {\n            frequencyNode.prev.next = frequencyNode.next;\n            frequencyNode.next.prev = frequencyNode.prev;\n        }\n\n        return node.value;\n    } else {\n        return this.getDefault(value);\n    }\n};\n\nLfuSet.prototype.add = function (value) {\n    // if the value already exists, get it so that its frequency increases\n    if (this.has(value)) {\n        this.get(value);\n        return false;\n    }\n\n    var plus = [], minus = [], leastFrequentNode, leastFrequent;\n    if (this.capacity > 0) {\n        plus.push(value);\n        if (this.length + 1 > this.capacity) {\n            leastFrequentNode = this.frequencyHead.next;\n            leastFrequent = leastFrequentNode.values.order.head.next.value;\n            minus.push(leastFrequent.value);\n        }\n        if (this.dispatchesRangeChanges) {\n            this.dispatchBeforeRangeChange(plus, minus, 0);\n        }\n\n        // removal must happen before addition, otherwise we could remove\n        // the value we are about to add\n        if (minus.length > 0) {\n            this.store[\"delete\"](leastFrequent);\n            leastFrequentNode.values[\"delete\"](leastFrequent);\n            // Don't remove the frequencyNode with value of 1, because we\n            // are about to use it again in the addition.\n            if (leastFrequentNode.value !== 1 && leastFrequentNode.values.length === 0) {\n                this.frequencyHead.next = leastFrequentNode.next;\n                leastFrequentNode.next.prev = this.frequencyHead;\n            }\n        }\n\n        var node = new this.Node(value);\n        var frequencyNode = this.frequencyHead.next;\n        if (frequencyNode.frequency !== 1) {\n            frequencyNode = new this.FrequencyNode(1, this.frequencyHead, frequencyNode);\n        }\n        this.store.add(node);\n        frequencyNode.values.add(node);\n        node.frequencyNode = frequencyNode;\n\n        this.length = this.length + plus.length - minus.length;\n\n        if (this.dispatchesRangeChanges) {\n            this.dispatchRangeChange(plus, minus, 0);\n        }\n    }\n\n    // whether it grew\n    return plus.length !== minus.length;\n};\n\nLfuSet.prototype[\"delete\"] = function (value, equals) {\n    if (equals) {\n        throw new Error(\"LfuSet#delete does not support second argument: equals\");\n    }\n\n    var node = this.store.get(new this.Node(value));\n    var found = !!node;\n    if (found) {\n        if (this.dispatchesRangeChanges) {\n            this.dispatchBeforeRangeChange([], [value], 0);\n        }\n        var frequencyNode = node.frequencyNode;\n\n        this.store[\"delete\"](node);\n        frequencyNode.values[\"delete\"](node);\n        if (frequencyNode.values.length === 0) {\n            frequencyNode.prev.next = frequencyNode.next;\n            frequencyNode.next.prev = frequencyNode.prev;\n        }\n        this.length--;\n\n        if (this.dispatchesRangeChanges) {\n            this.dispatchRangeChange([], [value], 0);\n        }\n    }\n\n    return found;\n};\n\nLfuSet.prototype.one = function () {\n    if (this.length > 0) {\n        return this.frequencyHead.next.values.one().value;\n    }\n};\n\nLfuSet.prototype.clear = function () {\n    this.store.clear();\n    this.frequencyHead.next = this.frequencyHead;\n    this.length = 0;\n};\n\nLfuSet.prototype.reduce = function (callback, basis /*, thisp*/) {\n    var thisp = arguments[2];\n    var index = 0;\n    var frequencyNode = this.frequencyHead.next;\n\n    while (frequencyNode.frequency !== 0) {\n        var set = frequencyNode.values;\n        basis = set.reduce(function (basis, node) {\n            return callback.call(thisp, basis, node.value, index++, this);\n        }, basis, this);\n\n        frequencyNode = frequencyNode.next;\n    }\n\n    return basis;\n};\n\nLfuSet.prototype.reduceRight = function (callback, basis /*, thisp*/) {\n    var thisp = arguments[2];\n    var index = this.length - 1;\n    var frequencyNode = this.frequencyHead.prev;\n\n    while (frequencyNode.frequency !== 0) {\n        var set = frequencyNode.values;\n        basis = set.reduceRight(function (basis, node) {\n            return callback.call(thisp, basis, node.value, index--, this);\n        }, basis, this);\n\n        frequencyNode = frequencyNode.prev;\n    }\n\n    return basis;\n};\n\nLfuSet.prototype.iterate = function () {\n    return this.store.map(function (node) {\n        return node.value;\n    }).iterate();\n};\n\nLfuSet.prototype.Node = Node;\n\nfunction Node(value, frequencyNode) {\n    this.value = value;\n    this.frequencyNode = frequencyNode;\n}\n\nLfuSet.prototype.FrequencyNode = FrequencyNode;\n\nfunction FrequencyNode(frequency, prev, next) {\n    this.frequency = frequency;\n    this.values = new Set();\n    this.prev = prev || this;\n    this.next = next || this;\n    if (prev) {\n        prev.next = this;\n    }\n    if (next) {\n        next.prev = this;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/_list.js":"\"use strict\";\n\nmodule.exports = List;\n\nvar Shim = require(\"./shim\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericOrder = require(\"./generic-order\");\n\nfunction List(values, equals, getDefault) {\n    return List._init(List, this, values, equals, getDefault);\n}\n\nList._init = function (constructor, object, values, equals, getDefault) {\n    if (!(object instanceof constructor)) {\n        return new constructor(values, equals, getDefault);\n    }\n    var head = object.head = new object.Node();\n    head.next = head;\n    head.prev = head;\n    object.contentEquals = equals || Object.equals;\n    object.getDefault = getDefault || Function.noop;\n    object.length = 0;\n    object.addEach(values);\n}\n\nList.List = List; // hack so require(\"list\").List will work in MontageJS\n\nObject.addEach(List.prototype, GenericCollection.prototype);\nObject.addEach(List.prototype, GenericOrder.prototype);\n\nList.from = GenericCollection.from;\n\nList.prototype.constructClone = function (values) {\n    return new this.constructor(values, this.contentEquals, this.getDefault);\n};\n\nList.prototype.find = function (value, equals, index) {\n    equals = equals || this.contentEquals;\n    var head = this.head;\n    var at = this.scan(index, head.next);\n    while (at !== head) {\n        if (equals(at.value, value)) {\n            return at;\n        }\n        at = at.next;\n    }\n};\n\nList.prototype.findLast = function (value, equals, index) {\n    equals = equals || this.contentEquals;\n    var head = this.head;\n    var at = this.scan(index, head.prev);\n    while (at !== head) {\n        if (equals(at.value, value)) {\n            return at;\n        }\n        at = at.prev;\n    }\n};\n\nList.prototype.has = function (value, equals) {\n    return !!this.find(value, equals);\n};\n\nList.prototype.get = function (value, equals) {\n    var found = this.find(value, equals);\n    if (found) {\n        return found.value;\n    }\n    return this.getDefault(value);\n};\n\n// LIFO (delete removes the most recently added equivalent value)\nList.prototype[\"delete\"] = function (value, equals) {\n    var found = this.findLast(value, equals);\n    if (found) {\n        found[\"delete\"]();\n        this.length--;\n        return true;\n    }\n    return false;\n};\n\nList.prototype.deleteAll = function (value, equals) {\n    equals = equals || this.contentEquals;\n    var head = this.head;\n    var at = head.next;\n    var count = 0;\n    while (at !== head) {\n        if (equals(value, at.value)) {\n            at[\"delete\"]();\n            count++;\n        }\n        at = at.next;\n    }\n    this.length -= count;\n    return count;\n};\n\nList.prototype.clear = function () {\n    this.head.next = this.head.prev = this.head;\n    this.length = 0;\n};\n\nList.prototype.add = function (value) {\n    var node = new this.Node(value)\n    return this._addNode(node);\n};\n\nList.prototype._addNode = function (node) {\n    this.head.addBefore(node);\n    this.length++;\n    return true;\n};\n\nList.prototype.push = function () {\n    var head = this.head;\n    for (var i = 0; i < arguments.length; i++) {\n        var value = arguments[i];\n        var node = new this.Node(value);\n        head.addBefore(node);\n    }\n    this.length += arguments.length;\n};\n\nList.prototype.unshift = function () {\n    var at = this.head;\n    for (var i = 0; i < arguments.length; i++) {\n        var value = arguments[i];\n        var node = new this.Node(value);\n        at.addAfter(node);\n        at = node;\n    }\n    this.length += arguments.length;\n};\n\nList.prototype._shouldPop = function () {\n    var value;\n    var head = this.head;\n    if (head.prev !== head) {\n        value = head.prev.value;\n    }\n    return value;\n}\n\nList.prototype.pop = function (_before, _after) {\n    var value;\n    var head = this.head;\n    if (head.prev !== head) {\n        value = head.prev.value;\n        var index = this.length - 1;\n        var popDispatchValueArray = _before ? _before.call(this,value,index) : void 0;\n        head.prev['delete']();\n        this.length--;\n        _after ? _after.call(this,value,index, popDispatchValueArray) : void 0;\n    }\n    return value;\n};\n\nList.prototype.shift = function (_before, _after) {\n    var value;\n    var head = this.head;\n    if (head.prev !== head) {\n        value = head.next.value;\n        var dispatchValueArray = _before ? _before.call(this,value,0) : void 0;\n        head.next['delete']();\n        this.length--;\n        _after ? _after.call(this,value,0,dispatchValueArray) : void 0;\n    }\n    return value;\n};\n\nList.prototype.peek = function () {\n    if (this.head !== this.head.next) {\n        return this.head.next.value;\n    }\n};\n\nList.prototype.poke = function (value) {\n    if (this.head !== this.head.next) {\n        this.head.next.value = value;\n    } else {\n        this.push(value);\n    }\n};\n\nList.prototype.one = function () {\n    return this.peek();\n};\n\n// TODO\n// List.prototype.indexOf = function (value) {\n// };\n\n// TODO\n// List.prototype.lastIndexOf = function (value) {\n// };\n\n// an internal utility for coercing index offsets to nodes\nList.prototype.scan = function (at, fallback) {\n    var head = this.head;\n    if (typeof at === \"number\") {\n        var count = at;\n        if (count >= 0) {\n            at = head.next;\n            while (count) {\n                count--;\n                at = at.next;\n                if (at == head) {\n                    break;\n                }\n            }\n        } else {\n            at = head;\n            while (count < 0) {\n                count++;\n                at = at.prev;\n                if (at == head) {\n                    break;\n                }\n            }\n        }\n        return at;\n    } else {\n        return at || fallback;\n    }\n};\n\n// at and end may both be positive or negative numbers (in which cases they\n// correspond to numeric indicies, or nodes)\nList.prototype.slice = function (at, end) {\n    var sliced = [];\n    var head = this.head;\n    at = this.scan(at, head.next);\n    end = this.scan(end, head);\n\n    while (at !== end && at !== head) {\n        sliced.push(at.value);\n        at = at.next;\n    }\n\n    return sliced;\n};\n\nList.prototype.splice = function (at, length /*...plus*/) {\n    return this.swap(at, length, Array.prototype.slice.call(arguments, 2));\n};\n\nList.prototype.swap = function (start, length, plus, _before, _after) {\n    var initial = start;\n    // start will be head if start is null or -1 (meaning from the end), but\n    // will be head.next if start is 0 (meaning from the beginning)\n    start = this.scan(start, this.head);\n    if (length == null) {\n        length = Infinity;\n    }\n    plus = Array.from(plus);\n\n    // collect the minus array\n    var minus = [];\n    var at = start;\n    while (length-- && length >= 0 && at !== this.head) {\n        minus.push(at.value);\n        at = at.next;\n    }\n\n    // before range change\n    var index, startNode;\n    index = _before ? _before.call(this, start, plus, minus) : void 0;\n\n    // delete minus\n    var at = start;\n    for (var i = 0, at = start; i < minus.length; i++, at = at.next) {\n        at[\"delete\"]();\n    }\n    // add plus\n    if (initial == null && at === this.head) {\n        at = this.head.next;\n    }\n    for (var i = 0; i < plus.length; i++) {\n        var node = new this.Node(plus[i]);\n        at.addBefore(node);\n    }\n    // adjust length\n    this.length += plus.length - minus.length;\n\n    _after ? _after.call(this, start, plus, minus) : void 0;\n\n    return minus;\n};\n\nList.prototype.reverse = function () {\n    var at = this.head;\n    do {\n        var temp = at.next;\n        at.next = at.prev;\n        at.prev = temp;\n        at = at.next;\n    } while (at !== this.head);\n    return this;\n};\n\nList.prototype.sort = function () {\n    this.swap(0, this.length, this.sorted());\n};\n\n// TODO account for missing basis argument\nList.prototype.reduce = function (callback, basis /*, thisp*/) {\n    var thisp = arguments[2];\n    var head = this.head;\n    var at = head.next;\n    while (at !== head) {\n        basis = callback.call(thisp, basis, at.value, at, this);\n        at = at.next;\n    }\n    return basis;\n};\n\nList.prototype.reduceRight = function (callback, basis /*, thisp*/) {\n    var thisp = arguments[2];\n    var head = this.head;\n    var at = head.prev;\n    while (at !== head) {\n        basis = callback.call(thisp, basis, at.value, at, this);\n        at = at.prev;\n    }\n    return basis;\n};\n\nList.prototype.updateIndexes = function (node, index) {\n    while (node !== this.head) {\n        node.index = index++;\n        node = node.next;\n    }\n};\n\n\nList.prototype.iterate = function () {\n    return new ListIterator(this.head);\n};\n\nfunction ListIterator(head) {\n    this.head = head;\n    this.at = head.next;\n};\n\nListIterator.prototype.__iterationObject = null;\nObject.defineProperty(ListIterator.prototype,\"_iterationObject\", {\n    get: function() {\n        return this.__iterationObject || (this.__iterationObject = { done: false, value:null});\n    }\n});\n\n\nListIterator.prototype.next = function () {\n    if (this.at === this.head) {\n        this._iterationObject.done = true;\n        this._iterationObject.value = void 0;\n    } else {\n        var value = this.at.value;\n        this.at = this.at.next;\n        this._iterationObject.value = value;\n    }\n    return this._iterationObject;\n};\n\nList.prototype.Node = Node;\n\nfunction Node(value) {\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n};\n\nNode.prototype[\"delete\"] = function () {\n    this.prev.next = this.next;\n    this.next.prev = this.prev;\n};\n\nNode.prototype.addBefore = function (node) {\n    var prev = this.prev;\n    this.prev = node;\n    node.prev = prev;\n    prev.next = node;\n    node.next = this;\n};\n\nNode.prototype.addAfter = function (node) {\n    var next = this.next;\n    this.next = node;\n    node.next = next;\n    next.prev = node;\n    node.prev = this;\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/list.js":"\"use strict\";\n\n\nvar _List = require(\"./_list\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar RangeChanges = require(\"./listen/range-changes\");\n\nmodule.exports = List;\n\nfunction List(values, equals, getDefault) {\n    return _List._init(List, this, values, equals, getDefault);\n}\nList.prototype = new _List();\nList.prototype.constructor = List;\nList.List = List; // hack so require(\"list\").List will work in MontageJS\nList.from = _List.from;\n\nObject.addEach(List.prototype, PropertyChanges.prototype);\nObject.addEach(List.prototype, RangeChanges.prototype);\n\nList.prototype.makeObservable = function () {\n    this.head.index = -1;\n    this.updateIndexes(this.head.next, 0);\n    this.dispatchesRangeChanges = true;\n};\n\nObject.defineProperties(List.prototype, {\n    \"_dispatchEmptyArray\": {\n        value: []\n    }\n});\n\n/*\nvar list_clear = _List.prototype.clear,\n    set_add = GlobalSet.prototype.add,\n    set_delete = GlobalSet.prototype.delete;\n*/\n\n// LIFO (delete removes the most recently added equivalent value)\nList.prototype[\"delete\"] = function (value, equals) {\n    var found = this.findLast(value, equals);\n    if (found) {\n        if (this.dispatchesRangeChanges) {\n            var plus = [];\n            var minus = [value];\n            this.dispatchBeforeRangeChange(plus, minus, found.index);\n        }\n        found[\"delete\"]();\n        this.length--;\n        if (this.dispatchesRangeChanges) {\n            this.updateIndexes(found.next, found.index);\n            this.dispatchRangeChange(plus, minus, found.index);\n        }\n        return true;\n    }\n    return false;\n};\n\nObject.defineProperty(List.prototype, \"superClear\", {\n    value: _List.prototype.clear,\n    enumerable: false,\n    configurable: true,\n    writable:true\n});\nList.prototype.clear = function () {\n    var plus, minus;\n    if (this.dispatchesRangeChanges) {\n        minus = this.toArray();\n        plus = [];\n        this.dispatchBeforeRangeChange(plus, minus, 0);\n    }\n    this.superClear();\n    if (this.dispatchesRangeChanges) {\n        this.dispatchRangeChange(plus, minus, 0);\n    }\n};\n\nList.prototype.add = function (value) {\n    var node = new this.Node(value)\n    if (this.dispatchesRangeChanges) {\n        node.index = this.length;\n        this.dispatchBeforeRangeChange([value], [], node.index);\n    }\n\n    this._addNode(node);\n\n    if (this.dispatchesRangeChanges) {\n        this.dispatchRangeChange([value], [], node.index);\n    }\n    return true;\n};\n\nObject.defineProperty(List.prototype, \"superPush\", {\n    value: _List.prototype.push,\n    enumerable: false,\n    configurable: true,\n    writable:true\n});\n\nList.prototype.push = function () {\n    if (this.dispatchesRangeChanges) {\n        var plus = Array.prototype.slice.call(arguments);\n        var minus = []\n        var index = this.length;\n        this.dispatchBeforeRangeChange(plus, minus, index);\n        var start = this.head.prev;\n    }\n\n    arguments.length === 1\n    ? this.superPush.call(this, arguments[0])\n    : (arguments.length === 2)\n        ? this.superPush.call(this, arguments[0],  arguments[1])\n        : this.superPush.apply(this, arguments);\n\n    if (this.dispatchesRangeChanges) {\n        this.updateIndexes(start.next, start.index === undefined ? 0 : start.index + 1);\n        this.dispatchRangeChange(plus, minus, index);\n    }\n};\n\nObject.defineProperty(List.prototype, \"superUnshift\", {\n    value: _List.prototype.unshift,\n    enumerable: false,\n    configurable: true,\n    writable:true\n});\n\nList.prototype.unshift = function () {\n    if (this.dispatchesRangeChanges) {\n        var plus = Array.prototype.slice.call(arguments);\n        var minus = [];\n        this.dispatchBeforeRangeChange(plus, minus, 0);\n    }\n\n    arguments.length === 1\n    ? this.superUnshift.call(this, arguments[0])\n    : (arguments.length === 2)\n        ? this.superUnshift.call(this, arguments[0],  arguments[1])\n        : this.superUnshift.apply(this, arguments);\n\n    if (this.dispatchesRangeChanges) {\n        this.updateIndexes(this.head.next, 0);\n        this.dispatchRangeChange(plus, minus, 0);\n    }\n};\n\nObject.defineProperty(List.prototype, \"_beforePop\", {\n    value: function(value, index) {\n        var popDispatchValueArray;\n        if (this.dispatchesRangeChanges) {\n            popDispatchValueArray = [value];\n            this.dispatchBeforeRangeChange(/*plus*/this._dispatchEmptyArray, /*minus*/popDispatchValueArray, index);\n        }\n        return popDispatchValueArray;\n    },\n    enumerable: false,\n    configurable: true,\n    writable:true\n});\nObject.defineProperty(List.prototype, \"_afterPop\", {\n    value: function(value, index, popDispatchValueArray) {\n        if (this.dispatchesRangeChanges) {\n            this.dispatchRangeChange(/*plus*/this._dispatchEmptyArray, /*minus*/popDispatchValueArray, index);\n        }\n    },\n    enumerable: false,\n    configurable: true,\n    writable:true\n});\nObject.defineProperty(List.prototype, \"superPop\", {\n    value: _List.prototype.pop,\n    enumerable: false,\n    configurable: true,\n    writable:true\n});\n\nList.prototype.pop = function () {\n    return this.superPop(this._beforePop,this._afterPop);\n};\n\nObject.defineProperty(List.prototype, \"_beforeShift\", {\n    value: function(value, index) {\n        var dispatchValueArray;\n        if (this.dispatchesRangeChanges) {\n            dispatchValueArray = [value];\n            this.dispatchBeforeRangeChange(/*plus*/this._dispatchEmptyArray, /*minus*/dispatchValueArray, index);\n        }\n        return dispatchValueArray;\n    },\n    enumerable: false,\n    configurable: true,\n    writable:true\n});\nObject.defineProperty(List.prototype, \"_afterShift\", {\n    value: function(value, index, dispatchValueArray) {\n        if (this.dispatchesRangeChanges) {\n            this.updateIndexes(this.head.next, index);\n            this.dispatchRangeChange(/*plus*/this._dispatchEmptyArray, /*minus*/dispatchValueArray, index);\n        }\n    },\n    enumerable: false,\n    configurable: true,\n    writable:true\n});\nObject.defineProperty(List.prototype, \"superShift\", {\n    value: _List.prototype.shift,\n    enumerable: false,\n    configurable: true,\n    writable:true\n});\nList.prototype.shift = function () {\n    return this.superShift(this._beforeShift,this._afterShift);\n};\n\nObject.defineProperty(List.prototype, \"superSwap\", {\n    value: _List.prototype.swap,\n    enumerable: false,\n    configurable: true,\n    writable:true\n});\nList.prototype.swap = function (start, length, plus) {\n\n    // before range change\n    var index, startNode;\n    var _beforeSwap = function(start, plus, minus) {\n        if (this.dispatchesRangeChanges) {\n            if (start === this.head) {\n                index = this.length;\n            } else if (start.prev === this.head) {\n                index = 0;\n            } else {\n                index = start.index;\n            }\n            startNode = start.prev;\n            this.dispatchBeforeRangeChange(plus, minus, index);\n        }\n    };\n    var _afterSwap = function(start, plus, minus) {\n        // after range change\n        if (this.dispatchesRangeChanges) {\n            if (start === this.head) {\n                this.updateIndexes(this.head.next, 0);\n            } else {\n                this.updateIndexes(startNode.next, startNode.index + 1);\n            }\n            this.dispatchRangeChange(plus, minus, index);\n        }\n    };\n\n    return this.superSwap(start, length, plus, _beforeSwap, _afterSwap);\n};\n\nObject.defineProperty(List.prototype, \"superReverse\", {\n    value: _List.prototype.reverse,\n    enumerable: false,\n    configurable: true,\n    writable:true\n});\nList.prototype.reverse = function () {\n    if (this.dispatchesRangeChanges) {\n        var minus = this.toArray();\n        var plus = minus.reversed();\n        this.dispatchBeforeRangeChange(plus, minus, 0);\n    }\n    this.superReverse();\n    if (this.dispatchesRangeChanges) {\n        this.dispatchRangeChange(plus, minus, 0);\n    }\n    return this;\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/lru-map.js":"\"use strict\";\n\nvar Shim = require(\"./shim\");\nvar LruSet = require(\"./lru-set\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericMap = require(\"./generic-map\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar MapChanges = require(\"./listen/map-changes\");\n\nmodule.exports = LruMap;\n\nfunction LruMap(values, maxLength, equals, hash, getDefault) {\n    if (!(this instanceof LruMap)) {\n        return new LruMap(values, maxLength, equals, hash, getDefault);\n    }\n    equals = equals || Object.equals;\n    hash = hash || Object.hash;\n    getDefault = getDefault || Function.noop;\n    this.contentEquals = equals;\n    this.contentHash = hash;\n    this.getDefault = getDefault;\n    this.store = new LruSet(\n        undefined,\n        maxLength,\n        function keysEqual(a, b) {\n            return equals(a.key, b.key);\n        },\n        function keyHash(item) {\n            return hash(item.key);\n        }\n    );\n    this.length = 0;\n    this.addEach(values);\n}\n\nLruMap.LruMap = LruMap; // hack so require(\"lru-map\").LruMap will work in MontageJS\n\nObject.addEach(LruMap.prototype, GenericCollection.prototype);\nObject.addEach(LruMap.prototype, GenericMap.prototype);\nObject.addEach(LruMap.prototype, PropertyChanges.prototype);\nObject.addEach(LruMap.prototype, MapChanges.prototype);\n\nObject.defineProperty(LruMap.prototype,\"size\",GenericCollection._sizePropertyDescriptor);\nLruMap.from = GenericCollection.from;\n\nLruMap.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.maxLength,\n        this.contentEquals,\n        this.contentHash,\n        this.getDefault\n    );\n};\n\nLruMap.prototype.log = function (charmap, stringify) {\n    stringify = stringify || this.stringify;\n    this.store.log(charmap, stringify);\n};\n\nLruMap.prototype.stringify = function (item, leader) {\n    return leader + JSON.stringify(item.key) + \": \" + JSON.stringify(item.value);\n};\n\nLruMap.prototype.addMapChangeListener = function () {\n    if (!this.dispatchesMapChanges) {\n        // Detect LRU deletions in the LruSet and emit as MapChanges.\n        // Array and Heap have no store.\n        // Dict and FastMap define no listeners on their store.\n        var self = this;\n        this.store.addBeforeRangeChangeListener(function(plus, minus) {\n            if (plus.length && minus.length) {  // LRU item pruned\n                self.dispatchBeforeMapChange(minus[0].key, undefined);\n            }\n        });\n        this.store.addRangeChangeListener(function(plus, minus) {\n            if (plus.length && minus.length) {\n                self.dispatchMapChange(minus[0].key, undefined);\n            }\n        });\n    }\n    MapChanges.prototype.addMapChangeListener.apply(this, arguments);\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/lru-set.js":"\"use strict\";\n\nvar Shim = require(\"./shim\");\nvar Set = require(\"./set\").CollectionsSet;\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericSet = require(\"./generic-set\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar RangeChanges = require(\"./listen/range-changes\");\n\nmodule.exports = LruSet;\n\nfunction LruSet(values, capacity, equals, hash, getDefault) {\n    if (!(this instanceof LruSet)) {\n        return new LruSet(values, capacity, equals, hash, getDefault);\n    }\n    capacity = capacity || Infinity;\n    equals = equals || Object.equals;\n    hash = hash || Object.hash;\n    getDefault = getDefault || Function.noop;\n    this.store = new Set(undefined, equals, hash);\n    this.contentEquals = equals;\n    this.contentHash = hash;\n    this.getDefault = getDefault;\n    this.capacity = capacity;\n    this.length = 0;\n    this.addEach(values);\n}\n\nLruSet.LruSet = LruSet; // hack so require(\"lru-set\").LruSet will work in MontageJS\n\nObject.addEach(LruSet.prototype, GenericCollection.prototype);\nObject.addEach(LruSet.prototype, GenericSet.prototype);\nObject.addEach(LruSet.prototype, PropertyChanges.prototype);\nObject.addEach(LruSet.prototype, RangeChanges.prototype);\nObject.defineProperty(LruSet.prototype,\"size\",GenericCollection._sizePropertyDescriptor);\nLruSet.from = GenericCollection.from;\n\nLruSet.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.capacity,\n        this.contentEquals,\n        this.contentHash,\n        this.getDefault\n    );\n};\n\nLruSet.prototype.has = function (value) {\n    return this.store.has(value);\n};\n\nLruSet.prototype.get = function (value, equals) {\n    if (equals) {\n        throw new Error(\"LruSet#get does not support second argument: equals\");\n    }\n    value = this.store.get(value);\n    if (value !== undefined) {\n        this.store[\"delete\"](value);\n        this.store.add(value);\n    } else {\n        value = this.getDefault(value);\n    }\n    return value;\n};\n\nLruSet.prototype.add = function (value) {\n    var found = this.store.has(value);\n    var plus = [], minus = [], eldest;\n    // if the value already exists, we delete it and add it back again so it\n    // appears at the end of the list of values to truncate\n    if (found) {    // update\n        this.store[\"delete\"](value);\n        this.store.add(value);\n    } else if (this.capacity > 0) {    // add\n        // because minus is constructed before adding value, we must ensure the\n        // set has positive length. hence the capacity check.\n        plus.push(value);\n        if (this.length >= this.capacity) {\n            eldest = this.store.order.head.next;\n            minus.push(eldest.value);\n        }\n        if (this.dispatchesRangeChanges) {\n            this.dispatchBeforeRangeChange(plus, minus, 0);\n        }\n        this.store.add(value);\n        if (minus.length > 0) {\n            this.store['delete'](eldest.value);\n        }\n        // only assign to length once to avoid jitter on length observers\n        this.length = this.length + plus.length - minus.length;\n        // after change\n        if (this.dispatchesRangeChanges) {\n            this.dispatchRangeChange(plus, minus, 0);\n        }\n    }\n    // whether it grew\n    return plus.length !== minus.length;\n};\n\nLruSet.prototype[\"delete\"] = function (value, equals) {\n    if (equals) {\n        throw new Error(\"LruSet#delete does not support second argument: equals\");\n    }\n    var found = this.store.has(value);\n    if (found) {\n        if (this.dispatchesRangeChanges) {\n            this.dispatchBeforeRangeChange([], [value], 0);\n        }\n        this.store[\"delete\"](value);\n        this.length--;\n        if (this.dispatchesRangeChanges) {\n            this.dispatchRangeChange([], [value], 0);\n        }\n    }\n    return found;\n};\n\nLruSet.prototype.one = function () {\n    if (this.length > 0) {\n        return this.store.one();\n    }\n};\n\nLruSet.prototype.clear = function () {\n    this.store.clear();\n    this.length = 0;\n};\n\nLruSet.prototype.reduce = function (callback, basis /*, thisp*/) {\n    var thisp = arguments[2];\n    var set = this.store;\n    var index = 0;\n    return set.reduce(function (basis, value) {\n        return callback.call(thisp, basis, value, index++, this);\n    }, basis, this);\n};\n\nLruSet.prototype.reduceRight = function (callback, basis /*, thisp*/) {\n    var thisp = arguments[2];\n    var set = this.store;\n    var index = this.length - 1;\n    return set.reduceRight(function (basis, value) {\n        return callback.call(thisp, basis, value, index--, this);\n    }, basis, this);\n};\n\nLruSet.prototype.iterate = function () {\n    return this.store.iterate();\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/_map.js":"\"use strict\";\n\nvar Shim = require(\"./shim\");\nvar GenericCollection = require(\"./generic-collection\");\nvar Map, GlobalMap, CollectionsMap;\n\nif((global.Map !== void 0) && (typeof global.Set.prototype.values === \"function\")) {\n\n    Map = module.exports = global.Map,\n    GlobalMap = Map;\n    Map.Map = Map; // hack so require(\"map\").Map will work in MontageJS\n\n    // use different strategies for making sets observable between Internet\n    // Explorer and other browsers.\n    var protoIsSupported = {}.__proto__ === Object.prototype,\n        map_makeObservable;\n\n    if (protoIsSupported) {\n        map_makeObservable = function () {\n            this.__proto__ = ChangeDispatchMap;\n        };\n    } else {\n        map_makeObservable = function () {\n            Object.defineProperties(this, observableSetProperties);\n        };\n    }\n\n    Object.defineProperty(Map.prototype, \"makeObservable\", {\n        value: map_makeObservable,\n        writable: true,\n        configurable: true,\n        enumerable: false\n    });\n\n    //This is a no-op test in property-changes.js - PropertyChanges.prototype.makePropertyObservable, so might as well not pay the price every time....\n    Object.defineProperty(Map.prototype, \"makePropertyObservable\", {\n        value: function(){},\n        writable: true,\n        configurable: true,\n        enumerable: false\n    });\n\n\n    Map.prototype.constructClone = function (values) {\n        return new this.constructor(values);\n    };\n\n    Map.prototype.isMap = true;\n    Map.prototype.addEach = function (values) {\n        if (values && Object(values) === values) {\n            if (typeof values.forEach === \"function\") {\n                // copy map-alikes\n                if (values.isMap === true) {\n                    values.forEach(function (value, key) {\n                        this.set(key, value);\n                    }, this);\n                // iterate key value pairs of other iterables\n                } else {\n                    values.forEach(function (pair) {\n                        this.set(pair[0], pair[1]);\n                    }, this);\n                }\n            } else if (typeof values.length === \"number\") {\n                // Array-like objects that do not implement forEach, ergo,\n                // Arguments\n                for (var i = 0; i < values.length; i++) {\n                    this.add(values[i], i);\n                }\n            } else {\n                // copy other objects as map-alikes\n                Object.keys(values).forEach(function (key) {\n                    this.set(key, values[key]);\n                }, this);\n            }\n        } else if (values && typeof values.length === \"number\") {\n            // String\n            for (var i = 0; i < values.length; i++) {\n                this.add(values[i], i);\n            }\n        }\n        return this;\n    };\n\n    Map.prototype.add = function (value, key) {\n        return this.set(key, value);\n    };\n\n    Map.prototype.reduce = function (callback, basis /*, thisp*/) {\n        var thisp = arguments[2];\n        this.forEach(function(value, key, map) {\n            basis = callback.call(thisp, basis, value, key, this);\n        });\n        return basis;\n    };\n\n    Map.prototype.reduceRight = function (callback, basis /*, thisp*/) {\n        var thisp = arguments[2];\n        var keysIterator = this.keys();\n        var size = this.size;\n        var reverseOrder = new Array(this.size);\n        var aKey, i = 0;\n        while ((aKey = keysIterator.next().value)) {\n            reverseOrder[--size] = aKey;\n        }\n        while (i++ < size) {\n            basis = callback.call(thisp, basis, this.get(reverseOrder[i]), reverseOrder[i], this);\n        }\n        return basis;\n    };\n\n    Map.prototype.equals = function (that, equals) {\n        equals = equals || Object.equals;\n        if (this === that) {\n            return true;\n        } else if (that && typeof that.every === \"function\") {\n            return that.size === this.size && that.every(function (value, key) {\n                return equals(this.get(key), value);\n            }, this);\n        } else {\n            var keys = Object.keys(that);\n            return keys.length === this.size && Object.keys(that).every(function (key) {\n                return equals(this.get(key), that[key]);\n            }, this);\n        }\n    };\n\n    var _keysArrayFunction = function(value,key) {return key;};\n    Map.prototype.keysArray = function() {\n        return this.map(_keysArrayFunction);\n    }\n    var _valuesArrayFunction = function(value,key) {return value;};\n    Map.prototype.valuesArray = function() {\n        return this.map(_valuesArrayFunction);\n    }\n    var _entriesArrayFunction = function(value,key) {return [key,value];};\n    Map.prototype.entriesArray = function() {\n        return this.map(_entriesArrayFunction);\n    }\n    Map.prototype.toJSON = function () {\n        return this.entriesArray();\n    };\n\n    // XXX deprecated\n    Map.prototype.items = function () {\n        return this.entriesArray();\n    };\n\n    // Map.prototype.contentEquals = Object.equals;\n    // Map.prototype.contentHash = Object.hash;\n\n\n    Map.from = function (value) {\n        var result = new this;\n        result.addEach(value);\n        return result;\n    };\n\n\n    //Backward compatibility:\n    Object.defineProperty(Map.prototype,\"length\",{\n        get: function() {\n            return this.size;\n        },\n        enumerable: true,\n        configurable:true\n    });\n\n\n    var map_clear = Map.prototype.clear,\n        map_set = Map.prototype.set,\n        map_delete = Map.prototype.delete;\n\n    var observableMapProperties = {\n        clear : {\n            value: function () {\n                var keys;\n                if (this.dispatchesMapChanges) {\n                    this.forEach(function (value, key) {\n                        this.dispatchBeforeMapChange(key, value);\n                    }, this);\n                    keys = this.keysArray();\n                }\n                map_clear.call(this);\n                if (this.dispatchesMapChanges) {\n                    keys.forEach(function (key) {\n                        this.dispatchMapChange(key);\n                    }, this);\n                }\n            },\n            writable: true,\n            configurable: true\n\n        },\n        set : {\n            value: function (key, value) {\n                var found = this.get(key);\n                if (found) { // update\n                    if (this.dispatchesMapChanges) {\n                        this.dispatchBeforeMapChange(key, found);\n                    }\n\n                    map_set.call(this,key, value);\n\n                    if (this.dispatchesMapChanges) {\n                        this.dispatchMapChange(key, value);\n                    }\n                } else { // create\n                    if (this.dispatchesMapChanges) {\n                        this.dispatchBeforeMapChange(key, undefined);\n                    }\n\n                    map_set.call(this,key, value);\n\n                    if (this.dispatchesMapChanges) {\n                        this.dispatchMapChange(key, value);\n                    }\n                }\n                return this;\n            },\n            writable: true,\n            configurable: true\n        },\n\n        \"delete\": {\n            value: function (key) {\n                if (this.has(key)) {\n                    if (this.dispatchesMapChanges) {\n                        this.dispatchBeforeMapChange(key, this.get(key));\n                    }\n                    map_delete.call(this,key);\n\n                    if (this.dispatchesMapChanges) {\n                        this.dispatchMapChange(key, undefined);\n                    }\n                    return true;\n                }\n                return false;\n            }\n        }\n    };\n\n\n\n    Object.addEach(Map.prototype, GenericCollection.prototype, false);\n\n    var ChangeDispatchMap = Object.create(Map.prototype, observableMapProperties);\n}\n\n    var Set = require(\"./_set\").CollectionsSet;\n    var GenericMap = require(\"./generic-map\");\n\n    CollectionsMap = Map = function Map(values, equals, hash, getDefault) {\n        if (!(this instanceof Map)) {\n            return new Map(values, equals, hash, getDefault);\n        }\n        equals = equals || Object.equals;\n        hash = hash || Object.hash;\n        getDefault = getDefault || Function.noop;\n        this.contentEquals = equals;\n        this.contentHash = hash;\n        this.getDefault = getDefault;\n        this.store = new Set(\n            undefined,\n            function keysEqual(a, b) {\n                return equals(a.key, b.key);\n            },\n            function keyHash(item) {\n                return hash(item.key);\n            }\n        );\n        this.length = 0;\n        this.addEach(values);\n    }\n\n    Map.Map = Map; // hack so require(\"map\").Map will work in MontageJS\n\n    Object.addEach(Map.prototype, GenericCollection.prototype);\n    Object.addEach(Map.prototype, GenericMap.prototype); // overrides GenericCollection\n    Object.defineProperty(Map.prototype,\"size\",GenericCollection._sizePropertyDescriptor);\n\n    Map.from = GenericCollection.from;\n\n    Map.prototype.constructClone = function (values) {\n        return new this.constructor(\n            values,\n            this.contentEquals,\n            this.contentHash,\n            this.getDefault\n        );\n    };\n\n    Map.prototype.log = function (charmap, logNode, callback, thisp) {\n        logNode = logNode || this.logNode;\n        this.store.log(charmap, function (node, log, logBefore) {\n            logNode(node.value.value, log, logBefore);\n        }, callback, thisp);\n    };\n\n    Map.prototype.logNode = function (node, log) {\n        log(' key: ' + node.key);\n        log(' value: ' + node.value);\n    };\n\n    if(!GlobalMap) {\n        module.exports = CollectionsMap;\n    }\n    else {\n        module.exports = GlobalMap;\n        GlobalMap.CollectionsMap = CollectionsMap;\n    }\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/map.js":"\"use strict\";\n\nvar Map = require(\"./_map\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar MapChanges = require(\"./listen/map-changes\");\n\nmodule.exports = Map;\n\nif((global.Map === void 0) || (typeof global.Set.prototype.values !== \"function\")) {\n    Object.addEach(Map.prototype, PropertyChanges.prototype);\n    Object.addEach(Map.prototype, MapChanges.prototype);\n}\nelse {\n    Object.defineEach(Map.prototype, PropertyChanges.prototype, false, /*configurable*/true, /*enumerable*/ false, /*writable*/true);\n    Object.defineEach(Map.prototype, MapChanges.prototype, false, /*configurable*/true, /*enumerable*/ false, /*writable*/true);\n}\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/multi-map.js":"\"use strict\";\n\nvar Map = require(\"./map\").CollectionsMap;\n\nmodule.exports = MultiMap;\nfunction MultiMap(values, bucket, equals, hash) {\n    if (!(this instanceof MultiMap)) {\n        return new MultiMap(values, bucket, equals, hash);\n    }\n    this.bucket = bucket || this.bucket;\n    Map.call(this, values, equals, hash, function getDefault(key) {\n        var bucket = this.bucket(key);\n        Map.prototype.set.call(this, key, bucket);\n        return bucket;\n    });\n}\n\nMultiMap.MultiMap = MultiMap; // hack so require(\"multi-map\").MultiMap will work in MontageJS\n\nMultiMap.prototype = Object.create(Map.prototype);\n\nMultiMap.prototype.constructor = MultiMap;\n\nMultiMap.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.bucket,\n        this.contentEquals,\n        this.contentHash\n    );\n};\n\nMultiMap.prototype.set = function (key, newValues) {\n    var values = this.get(key);\n    values.swap(0, values.length, newValues);\n};\n\nMultiMap.prototype.bucket = function (key) {\n    return [];\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/_set.js":"\"use strict\";\n\nvar Shim = require(\"./shim\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericSet = require(\"./generic-set\");\nvar Set, GlobalSet, CollectionsSet;\n\n\nif((global.Set !== void 0) && (typeof global.Set.prototype.values === \"function\")) {\n\n    GlobalSet = module.exports = global.Set;\n    GlobalSet.Set = GlobalSet; // hack so require(\"set\").Set will work in MontageJS\n\n    GlobalSet.prototype.reduce = function (callback, basis /*, thisp*/) {\n        var thisp = arguments[2];\n        this.forEach(function(value) {\n            basis = callback.call(thisp, basis, value, this);\n        });\n        return basis;\n    };\n\n    GlobalSet.prototype.reduceRight = function (callback, basis /*, thisp*/) {\n        var thisp = arguments[2];\n        var setIterator = this.values();\n        var size = this.size;\n        var reverseOrder = new Array(this.size);\n        var value, i = 0;\n        while ((value = setIterator.next().value)) {\n            reverseOrder[--size] = value;\n        }\n        while (i++ < size) {\n            basis = callback.call(thisp, basis, value, this);\n        }\n        return basis;\n    };\n\n    GlobalSet.prototype.equals = function (that, equals) {\n        var self = this;\n        return (\n            that && typeof that.reduce === \"function\" &&\n            this.size === (that.size || that.length) &&\n            that.reduce(function (equal, value) {\n                return equal && self.has(value, equals);\n            }, true)\n        );\n    };\n\n    GlobalSet.prototype.constructClone = function (values) {\n        return new this.constructor(values, this.contentEquals, this.contentHash, this.getDefault);\n    };\n\n    GlobalSet.prototype.toJSON = function () {\n        return this.entriesArray();\n    };\n\n    GlobalSet.prototype.one = function () {\n        if (this.size > 0) {\n            return this.values().next().value;\n        }\n        return undefined;\n    };\n\n    GlobalSet.prototype.pop = function () {\n        if (this.size) {\n            var setIterator = this.values(), aValue, value;\n            while(aValue = setIterator.next().value) {\n                value = aValue;\n            }\n            this[\"delete\"](value,this.size-1);\n            return value;\n        }\n    };\n\n    GlobalSet.prototype.shift = function () {\n        if (this.size) {\n            var firstValue = this.values().next().value;\n            this[\"delete\"](firstValue,0);\n            return firstValue;\n        }\n    };\n\n    //Backward compatibility:\n    Object.defineProperty(GlobalSet.prototype,\"length\",{\n        get: function() {\n            return this.size;\n        },\n        enumerable: true,\n        configurable:true\n    });\n\n    GlobalSet.from = function (value) {\n        var result = (new this);\n        result.addEach(value);\n        return result;\n    };\n\n    Object.addEach(GlobalSet.prototype, GenericCollection.prototype, false);\n    Object.addEach(GlobalSet.prototype, GenericSet.prototype, false);\n\n}\n\n\n\n    var List = require(\"./_list\");\n    var FastSet = require(\"./_fast-set\");\n    var Iterator = require(\"./iterator\");\n\n    CollectionsSet = function CollectionsSet(values, equals, hash, getDefault) {\n        return CollectionsSet._init(CollectionsSet, this, values, equals, hash, getDefault);\n    }\n\n    CollectionsSet._init = function (constructor, object, values, equals, hash, getDefault) {\n        if (!(object instanceof constructor)) {\n            return new constructor(values, equals, hash, getDefault);\n        }\n        equals = equals || Object.equals;\n        hash = hash || Object.hash;\n        getDefault = getDefault || Function.noop;\n        object.contentEquals = equals;\n        object.contentHash = hash;\n        object.getDefault = getDefault;\n        // a list of values in insertion order, used for all operations that depend\n        // on iterating in insertion order\n        object.order = new object.Order(undefined, equals);\n        // a set of nodes from the order list, indexed by the corresponding value,\n        // used for all operations that need to quickly seek  value in the list\n        object.store = new object.Store(\n            undefined,\n            function (a, b) {\n                return equals(a.value, b.value);\n            },\n            function (node) {\n                return hash(node.value);\n            }\n        );\n        object.length = 0;\n        object.addEach(values);\n\n    }\n\n    CollectionsSet.Set = CollectionsSet; // hack so require(\"set\").Set will work in MontageJS\n    CollectionsSet.CollectionsSet = CollectionsSet;\n\n    Object.addEach(CollectionsSet.prototype, GenericCollection.prototype);\n    Object.addEach(CollectionsSet.prototype, GenericSet.prototype);\n\n    CollectionsSet.from = GenericCollection.from;\n\n    Object.defineProperty(CollectionsSet.prototype,\"size\",GenericCollection._sizePropertyDescriptor);\n\n    //Overrides for consistency:\n    // Set.prototype.forEach = GenericCollection.prototype.forEach;\n\n\n    CollectionsSet.prototype.Order = List;\n    CollectionsSet.prototype.Store = FastSet;\n\n    CollectionsSet.prototype.constructClone = function (values) {\n        return new this.constructor(values, this.contentEquals, this.contentHash, this.getDefault);\n    };\n\n    CollectionsSet.prototype.has = function (value) {\n        var node = new this.order.Node(value);\n        return this.store.has(node);\n    };\n\n    CollectionsSet.prototype.get = function (value, equals) {\n        if (equals) {\n            throw new Error(\"Set#get does not support second argument: equals\");\n        }\n        var node = new this.order.Node(value);\n        node = this.store.get(node);\n        if (node) {\n            return node.value;\n        } else {\n            return this.getDefault(value);\n        }\n    };\n\n    CollectionsSet.prototype.add = function (value) {\n        var node = new this.order.Node(value);\n        if (!this.store.has(node)) {\n            var index = this.length;\n            this.order.add(value);\n            node = this.order.head.prev;\n            this.store.add(node);\n            this.length++;\n            return true;\n        }\n        return false;\n    };\n\n    CollectionsSet.prototype[\"delete\"] = function (value, equals) {\n        if (equals) {\n            throw new Error(\"Set#delete does not support second argument: equals\");\n        }\n        var node = new this.order.Node(value);\n        if (this.store.has(node)) {\n            node = this.store.get(node);\n            this.store[\"delete\"](node); // removes from the set\n            this.order.splice(node, 1); // removes the node from the list\n            this.length--;\n            return true;\n        }\n        return false;\n    };\n\n    CollectionsSet.prototype.pop = function () {\n        if (this.length) {\n            var result = this.order.head.prev.value;\n            this[\"delete\"](result);\n            return result;\n        }\n    };\n\n    CollectionsSet.prototype.shift = function () {\n        if (this.length) {\n            var result = this.order.head.next.value;\n            this[\"delete\"](result);\n            return result;\n        }\n    };\n\n    CollectionsSet.prototype.one = function () {\n        if (this.length > 0) {\n            return this.store.one().value;\n        }\n    };\n\n    CollectionsSet.prototype.clear = function () {\n        this.store.clear();\n        this.order.clear();\n        this.length = 0;\n    };\n    Object.defineProperty(CollectionsSet.prototype,\"_clear\", {\n        value: CollectionsSet.prototype.clear\n    });\n\n    CollectionsSet.prototype.reduce = function (callback, basis /*, thisp*/) {\n        var thisp = arguments[2];\n        var list = this.order;\n        var index = 0;\n        return list.reduce(function (basis, value) {\n            return callback.call(thisp, basis, value, index++, this);\n        }, basis, this);\n    };\n\n    CollectionsSet.prototype.reduceRight = function (callback, basis /*, thisp*/) {\n        var thisp = arguments[2];\n        var list = this.order;\n        var index = this.length - 1;\n        return list.reduceRight(function (basis, value) {\n            return callback.call(thisp, basis, value, index--, this);\n        }, basis, this);\n    };\n\n    CollectionsSet.prototype.iterate = function () {\n        return this.order.iterate();\n    };\n\n    CollectionsSet.prototype.values = function () {\n        return new Iterator(this.valuesArray());\n    };\n\n    CollectionsSet.prototype.log = function () {\n        var set = this.store;\n        return set.log.apply(set, arguments);\n    };\n\n\n\nif(!GlobalSet) {\n    module.exports = CollectionsSet;\n}\nelse {\n    GlobalSet.prototype.valuesArray = GenericSet.prototype.valuesArray;\n    GlobalSet.prototype.entriesArray = GenericSet.prototype.entriesArray;\n    module.exports = GlobalSet;\n    GlobalSet.CollectionsSet = CollectionsSet;\n}\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/set.js":"\"use strict\";\n\nvar Set = require(\"./_set\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar RangeChanges = require(\"./listen/range-changes\");\nvar MapChanges = require(\"./listen/map-changes\");\nvar GlobalSet;\n\n\nif( (global.Set !== void 0) && (typeof global.Set.prototype.values === \"function\")) {\n    GlobalSet = global.Set;\n    module.exports = Set\n\n    // use different strategies for making sets observable between Internet\n    // Explorer and other browsers.\n    var protoIsSupported = {}.__proto__ === Object.prototype,\n        set_makeObservable;\n\n    if (protoIsSupported) {\n        set_makeObservable = function () {\n            this.__proto__ = ChangeDispatchSet;\n        };\n    } else {\n        set_makeObservable = function () {\n            Object.defineProperties(this, observableSetProperties);\n        };\n    }\n\n    Object.defineProperty(GlobalSet.prototype, \"makeObservable\", {\n        value: set_makeObservable,\n        writable: true,\n        configurable: true,\n        enumerable: false\n    });\n\n    var set_clear = GlobalSet.prototype.clear,\n        set_add = GlobalSet.prototype.add,\n        set_delete = GlobalSet.prototype.delete;\n\n    var observableSetProperties = {\n        \"_dispatchEmptyArray\": {\n            value: []\n        },\n        clear : {\n            value: function () {\n                var clearing;\n                if (this.dispatchesRangeChanges) {\n                    clearing = this.toArray();\n                    this.dispatchBeforeRangeChange(this._dispatchEmptyArray, clearing, 0);\n                }\n\n                set_clear.call(this);\n\n                if (this.dispatchesRangeChanges) {\n                    this.dispatchRangeChange(this._dispatchEmptyArray, clearing, 0);\n                }\n            },\n            writable: true,\n            configurable: true\n\n        },\n        add : {\n            value: function (value) {\n                if (!this.has(value)) {\n                    var index = this.size;\n                    var dispatchValueArray = [value];\n                    if (this.dispatchesRangeChanges) {\n                        this.dispatchBeforeRangeChange(dispatchValueArray, this._dispatchEmptyArray, index);\n                    }\n\n                    set_add.call(this,value);\n\n                    if (this.dispatchesRangeChanges) {\n                        this.dispatchRangeChange(dispatchValueArray, this._dispatchEmptyArray, index);\n                    }\n                    return true;\n                }\n                return false;\n            },\n            writable: true,\n            configurable: true\n        },\n\n        \"delete\": {\n            value: function (value,index) {\n                if (this.has(value)) {\n                    if(index === undefined) {\n                        var setIterator = this.values();\n                        index = 0\n                        while(setIterator.next().value !== value) {\n                            index++;\n                        }\n                    }\n                    var dispatchValueArray = [value];\n                    if (this.dispatchesRangeChanges) {\n                        this.dispatchBeforeRangeChange(this._dispatchEmptyArray, dispatchValueArray, index);\n                    }\n\n                    set_delete.call(this,value);\n\n                    if (this.dispatchesRangeChanges) {\n                        this.dispatchRangeChange(this._dispatchEmptyArray, dispatchValueArray, index);\n                    }\n                    return true;\n                }\n                return false;\n            }\n        }\n    };\n\n    var ChangeDispatchSet = Object.create(GlobalSet.prototype, observableSetProperties);\n\n\n    Object.defineEach(Set.prototype, PropertyChanges.prototype, false, /*configurable*/true, /*enumerable*/ false, /*writable*/true);\n    //This is a no-op test in property-changes.js - PropertyChanges.prototype.makePropertyObservable, so might as well not pay the price every time....\n    Object.defineProperty(Set.prototype, \"makePropertyObservable\", {\n        value: function(){},\n        writable: true,\n        configurable: true,\n        enumerable: false\n    });\n\n    Object.defineEach(Set.prototype, RangeChanges.prototype, false, /*configurable*/true, /*enumerable*/ false, /*writable*/true);\n    Object.defineEach(Set.prototype, MapChanges.prototype, false, /*configurable*/true, /*enumerable*/ false, /*writable*/true);\n\n    //This is really only for testing\n    Object.defineProperty(Set, \"_setupCollectionSet\", {\n        value: setupCollectionSet,\n        writable: true,\n        configurable: true,\n        enumerable: false\n    });\n\n}\nelse {\n    setupCollectionSet();\n}\n\nfunction setupCollectionSet() {\n    var _CollectionsSet = Set.CollectionsSet;\n\n    var CollectionsSet = function CollectionsSet(values, equals, hash, getDefault) {\n        return _CollectionsSet._init(CollectionsSet, this, values, equals, hash, getDefault);\n    }\n\n    // hack so require(\"set\").Set will work in MontageJS\n    CollectionsSet.Set = CollectionsSet;\n    CollectionsSet.from = _CollectionsSet.from;\n    Set.CollectionsSet = CollectionsSet;\n\n    CollectionsSet.prototype = new _CollectionsSet();\n    CollectionsSet.prototype.constructor = CollectionsSet;\n\n    var List = require(\"./list\");\n    var FastSet = require(\"./fast-set\");\n    CollectionsSet.prototype.Order = List;\n    CollectionsSet.prototype.Store = FastSet;\n\n    Object.defineProperty(CollectionsSet.prototype,\"_dispatchEmptyArray\", {\n        value: []\n    });\n\n    CollectionsSet.prototype.add = function (value) {\n        var node = new this.order.Node(value);\n        if (!this.store.has(node)) {\n            var index = this.length;\n            var dispatchValueArray = [value];\n            if (this.dispatchesRangeChanges) {\n                this.dispatchBeforeRangeChange(dispatchValueArray, this._dispatchEmptyArray, index);\n            }\n            this.order.add(value);\n            node = this.order.head.prev;\n            this.store.add(node);\n            this.length++;\n            if (this.dispatchesRangeChanges) {\n                this.dispatchRangeChange(dispatchValueArray, this._dispatchEmptyArray, index);\n            }\n            return true;\n        }\n        return false;\n    };\n    CollectionsSet.prototype[\"delete\"] = function (value, equals) {\n        if (equals) {\n            throw new Error(\"Set#delete does not support second argument: equals\");\n        }\n        var node = new this.order.Node(value);\n        if (this.store.has(node)) {\n            node = this.store.get(node);\n            var dispatchValueArray = [value];\n            if (this.dispatchesRangeChanges) {\n                this.dispatchBeforeRangeChange(this._dispatchEmptyArray, dispatchValueArray, node.index);\n            }\n            this.store[\"delete\"](node); // removes from the set\n            this.order.splice(node, 1); // removes the node from the list\n            this.length--;\n            if (this.dispatchesRangeChanges) {\n                this.dispatchRangeChange(this._dispatchEmptyArray, dispatchValueArray, node.index);\n            }\n            return true;\n        }\n        return false;\n    };\n    CollectionsSet.prototype.clear = function () {\n        var clearing;\n        if (this.dispatchesRangeChanges) {\n            clearing = this.toArray();\n            this.dispatchBeforeRangeChange(this._dispatchEmptyArray, clearing, 0);\n        }\n        this._clear();\n        if (this.dispatchesRangeChanges) {\n            this.dispatchRangeChange(this._dispatchEmptyArray, clearing, 0);\n        }\n    };\n\n    Object.addEach(Set.CollectionsSet.prototype, PropertyChanges.prototype);\n    Object.addEach(Set.CollectionsSet.prototype, RangeChanges.prototype);\n    Set.CollectionsSet.prototype.makeObservable = function () {\n        this.order.makeObservable();\n    };\n\n    module.exports = CollectionsSet\n}\n\n\n\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/shim-function.js":"\nmodule.exports = Function;\n\n/**\n    A utility to reduce unnecessary allocations of <code>function () {}</code>\n    in its many colorful variations.  It does nothing and returns\n    <code>undefined</code> thus makes a suitable default in some circumstances.\n\n    @function external:Function.noop\n*/\nFunction.noop = function () {\n};\n\n/**\n    A utility to reduce unnecessary allocations of <code>function (x) {return\n    x}</code> in its many colorful but ultimately wasteful parameter name\n    variations.\n\n    @function external:Function.identity\n    @param {Any} any value\n    @returns {Any} that value\n*/\nFunction.identity = function (value) {\n    return value;\n};\n\n/**\n    A utility for creating a comparator function for a particular aspect of a\n    figurative class of objects.\n\n    @function external:Function.by\n    @param {Function} relation A function that accepts a value and returns a\n    corresponding value to use as a representative when sorting that object.\n    @param {Function} compare an alternate comparator for comparing the\n    represented values.  The default is <code>Object.compare</code>, which\n    does a deep, type-sensitive, polymorphic comparison.\n    @returns {Function} a comparator that has been annotated with\n    <code>by</code> and <code>compare</code> properties so\n    <code>sorted</code> can perform a transform that reduces the need to call\n    <code>by</code> on each sorted object to just once.\n */\nFunction.by = function (by , compare) {\n    compare = compare || Object.compare;\n    by = by || Function.identity;\n    var compareBy = function (a, b) {\n        return compare(by(a), by(b));\n    };\n    compareBy.compare = compare;\n    compareBy.by = by;\n    return compareBy;\n};\n\n// TODO document\nFunction.get = function (key) {\n    return function (object) {\n        return Object.get(object, key);\n    };\n};\n\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/shim-regexp.js":"\n/**\n    accepts a string; returns the string with regex metacharacters escaped.\n    the returned string can safely be used within a regex to match a literal\n    string. escaped characters are [, ], {, }, (, ), -, *, +, ?, ., \\, ^, $,\n    |, #, [comma], and whitespace.\n*/\nif (!RegExp.escape) {\n    var special = /[-[\\]{}()*+?.\\\\^$|,#\\s]/g;\n    RegExp.escape = function (string) {\n        return string.replace(special, \"\\\\$&\");\n    };\n}\n\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/sorted-array.js":"\"use strict\";\n\nmodule.exports = SortedArray;\n\nvar Shim = require(\"./shim\");\nvar GenericCollection = require(\"./generic-collection\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar RangeChanges = require(\"./listen/range-changes\");\n\nfunction SortedArray(values, equals, compare, getDefault) {\n    if (!(this instanceof SortedArray)) {\n        return new SortedArray(values, equals, compare, getDefault);\n    }\n    if (Array.isArray(values)) {\n        this.array = values;\n        values = values.splice(0, values.length);\n    } else {\n        this.array = [];\n    }\n    this.contentEquals = equals || Object.equals;\n    this.contentCompare = compare || Object.compare;\n    this.getDefault = getDefault || Function.noop;\n\n    this.length = 0;\n    this.addEach(values);\n}\n\n// hack so require(\"sorted-array\").SortedArray will work in MontageJS\nSortedArray.SortedArray = SortedArray;\n\nSortedArray.from = GenericCollection.from;\n\nObject.addEach(SortedArray.prototype, GenericCollection.prototype);\nObject.addEach(SortedArray.prototype, PropertyChanges.prototype);\nObject.addEach(SortedArray.prototype, RangeChanges.prototype);\n\nSortedArray.prototype.isSorted = true;\n\nfunction search(array, value, compare) {\n    var first = 0;\n    var last = array.length - 1;\n    while (first <= last) {\n        var middle = (first + last) >> 1; // Math.floor( / 2)\n        var comparison = compare(value, array[middle]);\n        if (comparison > 0) {\n            first = middle + 1;\n        } else if (comparison < 0) {\n            last = middle - 1;\n        } else {\n            return middle;\n        }\n    }\n    return -(first + 1);\n}\n\nfunction searchFirst(array, value, compare, equals) {\n    var index = search(array, value, compare);\n    if (index < 0) {\n        return -1;\n    } else {\n        while (index > 0 && equals(value, array[index - 1])) {\n            index--;\n        }\n        if (!equals(value, array[index])) {\n            return -1;\n        } else {\n            return index;\n        }\n    }\n}\n\nfunction searchLast(array, value, compare, equals) {\n    var index = search(array, value, compare);\n    if (index < 0) {\n        return -1;\n    } else {\n        while (index < array.length - 1 && equals(value, array[index + 1])) {\n            index++;\n        }\n        if (!equals(value, array[index])) {\n            return -1;\n        } else {\n            return index;\n        }\n    }\n}\n\nfunction searchForInsertionIndex(array, value, compare) {\n    var index = search(array, value, compare);\n    if (index < 0) {\n        return -index - 1;\n    } else {\n        var last = array.length - 1;\n        while (index < last && compare(value, array[index + 1]) === 0) {\n            index++;\n        }\n        return index;\n    }\n}\n\nSortedArray.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.contentEquals,\n        this.contentCompare,\n        this.getDefault\n    );\n};\n\nSortedArray.prototype.has = function (value, equals) {\n    if (equals) {\n        throw new Error(\"SortedSet#has does not support second argument: equals\");\n    }\n    var index = search(this.array, value, this.contentCompare);\n    return index >= 0 && this.contentEquals(this.array[index], value);\n};\n\nSortedArray.prototype.get = function (value, equals) {\n    if (equals) {\n        throw new Error(\"SortedArray#get does not support second argument: equals\");\n    }\n    var index = searchFirst(this.array, value, this.contentCompare, this.contentEquals);\n    if (index !== -1) {\n        return this.array[index];\n    } else {\n        return this.getDefault(value);\n    }\n};\n\nSortedArray.prototype.add = function (value) {\n    var index = searchForInsertionIndex(this.array, value, this.contentCompare);\n    if (this.dispatchesRangeChanges) {\n        this.dispatchBeforeRangeChange([value], Array.empty, index);\n    }\n    this.array.splice(index, 0, value);\n    this.length++;\n    if (this.dispatchesRangeChanges) {\n        this.dispatchRangeChange([value], Array.empty, index);\n    }\n    return true;\n};\n\nSortedArray.prototype[\"delete\"] = function (value, equals) {\n    if (equals) {\n        throw new Error(\"SortedArray#delete does not support second argument: equals\");\n    }\n    var index = searchFirst(this.array, value, this.contentCompare, this.contentEquals);\n    if (index !== -1) {\n        if (this.dispatchesRangeChanges) {\n            this.dispatchBeforeRangeChange(Array.empty, [value], index);\n        }\n        this.array.spliceOne(index);\n        this.length--;\n        if (this.dispatchesRangeChanges) {\n            this.dispatchRangeChange(Array.empty, [value], index);\n        }\n        return true;\n    } else {\n        return false;\n    }\n};\n\nSortedArray.prototype.deleteAll = function (value, equals) {\n    if (equals) {\n        var count = this.array.deleteAll(value, equals);\n        this.length -= count;\n        return count;\n    } else {\n        var start = searchFirst(this.array, value, this.contentCompare, this.contentEquals);\n        if (start !== -1) {\n            var end = start;\n            while (this.contentEquals(value, this.array[end])) {\n                end++;\n            }\n            var minus = this.slice(start, end);\n            if (this.dispatchesRangeChanges) {\n                this.dispatchBeforeRangeChange(Array.empty, minus, start);\n            }\n            this.array.splice(start, minus.length);\n            this.length -= minus.length;\n            if (this.dispatchesRangeChanges) {\n                this.dispatchRangeChange(Array.empty, minus, start);\n            }\n            return minus.length;\n        } else {\n            return 0;\n        }\n    }\n};\n\nSortedArray.prototype.indexOf = function (value) {\n    // TODO throw error if provided a start index\n    return searchFirst(this.array, value, this.contentCompare, this.contentEquals);\n};\n\nSortedArray.prototype.lastIndexOf = function (value) {\n    // TODO throw error if provided a start index\n    return searchLast(this.array, value, this.contentCompare, this.contentEquals);\n};\n\nSortedArray.prototype.find = function (value, equals, index) {\n    // TODO throw error if provided a start index\n    if (equals) {\n        throw new Error(\"SortedArray#find does not support second argument: equals\");\n    }\n    if (index) {\n        throw new Error(\"SortedArray#find does not support third argument: index\");\n    }\n    // TODO support initial partition index\n    return searchFirst(this.array, value, this.contentCompare, this.contentEquals);\n};\n\nSortedArray.prototype.findLast = function (value, equals, index) {\n    if (equals) {\n        throw new Error(\"SortedArray#findLast does not support second argument: equals\");\n    }\n    if (index) {\n        throw new Error(\"SortedArray#findLast does not support third argument: index\");\n    }\n    // TODO support initial partition index\n    return searchLast(this.array, value, this.contentCompare, this.contentEquals);\n};\n\nSortedArray.prototype.push = function () {\n    this.addEach(arguments);\n};\n\nSortedArray.prototype.unshift = function () {\n    this.addEach(arguments);\n};\n\nSortedArray.prototype.pop = function () {\n    var val = this.array.pop();\n    this.length = this.array.length;\n    return val;\n};\n\nSortedArray.prototype.shift = function () {\n    var val = this.array.shift();\n    this.length = this.array.length;\n    return val;\n};\n\nSortedArray.prototype.slice = function () {\n    return this.array.slice.apply(this.array, arguments);\n};\n\nSortedArray.prototype.splice = function (index, length /*...plus*/) {\n    return this.swap(index, length, Array.prototype.slice.call(arguments, 2));\n};\n\nSortedArray.prototype.swap = function (index, length, plus) {\n    if (index === undefined && length === undefined) {\n        return Array.empty;\n    }\n    index = index || 0;\n    if (index < 0) {\n        index += this.length;\n    }\n    if (length === undefined) {\n        length = Infinity;\n    }\n    var minus = this.slice(index, index + length);\n    if (this.dispatchesRangeChanges) {\n        this.dispatchBeforeRangeChange(plus, minus, index);\n    }\n    this.array.splice(index, length);\n    this.length -= minus.length;\n    if (this.dispatchesRangeChanges) {\n        this.dispatchRangeChange(Array.empty, minus, index);\n    }\n    this.addEach(plus);\n    return minus;\n};\n\nSortedArray.prototype.reduce = function (callback, basis /*, thisp*/) {\n    var thisp = arguments[2];\n    return this.array.reduce(function (basis, value, key) {\n        return callback.call(thisp, basis, value, key, this);\n    }, basis, this);\n};\n\nSortedArray.prototype.reduceRight = function () {\n    var thisp = arguments[2];\n    return this.array.reduceRight(function (basis, value, key) {\n        return callback.call(thisp, basis, value, key, this);\n    }, basis, this);\n};\n\nSortedArray.prototype.min = function () {\n    if (this.length) {\n        return this.array[0];\n    }\n};\n\nSortedArray.prototype.max = function () {\n    if (this.length) {\n        return this.array[this.length - 1];\n    }\n};\n\nSortedArray.prototype.one = function () {\n    return this.array.one();\n};\n\nSortedArray.prototype.clear = function () {\n    var minus;\n    if (this.dispatchesRangeChanges) {\n        minus = this.array.slice();\n        this.dispatchBeforeRangeChange(Array.empty, minus, 0);\n    }\n    this.length = 0;\n    this.array.clear();\n    if (this.dispatchesRangeChanges) {\n        this.dispatchRangeChange(Array.empty, minus, 0);\n    }\n};\n\nSortedArray.prototype.equals = function (that, equals) {\n    return this.array.equals(that, equals);\n};\n\nSortedArray.prototype.compare = function (that, compare) {\n    return this.array.compare(that, compare);\n};\n\nSortedArray.prototype.iterate = function (start, end) {\n    return new this.Iterator(this.array, start, end);\n};\n\nSortedArray.prototype.toJSON = function () {\n    return this.toArray();\n};\n\nSortedArray.prototype.Iterator = Array.prototype.Iterator;\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/sorted-array-map.js":"\"use strict\";\n\nvar Shim = require(\"./shim\");\nvar SortedArraySet = require(\"./sorted-array-set\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericMap = require(\"./generic-map\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar MapChanges = require(\"./listen/map-changes\");\n\nmodule.exports = SortedArrayMap;\n\nfunction SortedArrayMap(values, equals, compare, getDefault) {\n    if (!(this instanceof SortedArrayMap)) {\n        return new SortedArrayMap(values, equals, compare, getDefault);\n    }\n    equals = equals || Object.equals;\n    compare = compare || Object.compare;\n    getDefault = getDefault || Function.noop;\n    this.contentEquals = equals;\n    this.contentCompare = compare;\n    this.getDefault = getDefault;\n    this.store = new SortedArraySet(\n        null,\n        function keysEqual(a, b) {\n            return equals(a.key, b.key);\n        },\n        function compareKeys(a, b) {\n            return compare(a.key, b.key);\n        }\n    );\n    this.length = 0;\n    this.addEach(values);\n}\n\n// hack so require(\"sorted-array-map\").SortedArrayMap will work in MontageJS\nSortedArrayMap.SortedArrayMap = SortedArrayMap;\n\nObject.addEach(SortedArrayMap.prototype, GenericCollection.prototype);\nObject.addEach(SortedArrayMap.prototype, GenericMap.prototype);\nObject.addEach(SortedArrayMap.prototype, PropertyChanges.prototype);\nObject.addEach(SortedArrayMap.prototype, MapChanges.prototype);\n\nSortedArrayMap.from = GenericCollection.from;\n\nSortedArrayMap.prototype.isSorted = true;\n\nSortedArrayMap.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.contentEquals,\n        this.contentCompare,\n        this.getDefault\n    );\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/sorted-array-set.js":"\"use strict\";\n\nmodule.exports = SortedArraySet;\n\nvar Shim = require(\"./shim\");\nvar SortedArray = require(\"./sorted-array\");\nvar GenericSet = require(\"./generic-set\");\nvar PropertyChanges = require(\"./listen/property-changes\");\n\nfunction SortedArraySet(values, equals, compare, getDefault) {\n    if (!(this instanceof SortedArraySet)) {\n        return new SortedArraySet(values, equals, compare, getDefault);\n    }\n    SortedArray.call(this, values, equals, compare, getDefault);\n}\n\n// hack so require(\"sorted-array-set\".SortedArraySet works in MontageJS\nSortedArraySet.SortedArraySet = SortedArraySet;\n\nSortedArraySet.prototype = Object.create(SortedArray.prototype);\n\nSortedArraySet.prototype.constructor = SortedArraySet;\n\nObject.addEach(SortedArraySet.prototype, GenericSet.prototype);\nObject.addEach(SortedArraySet.prototype, PropertyChanges.prototype);\n\nSortedArraySet.from = SortedArray.from;\n\nSortedArraySet.prototype.isSorted = true;\n\nSortedArraySet.prototype.add = function (value) {\n    if (!this.has(value)) {\n        SortedArray.prototype.add.call(this, value);\n        return true;\n    } else {\n        return false;\n    }\n};\n\nSortedArraySet.prototype.reduce = function (callback, basis /*, thisp*/) {\n    var self = this;\n    var thisp = arguments[2];\n    return this.array.reduce(function (basis, value, index) {\n        return callback.call(thisp, basis, value, index, self);\n    }, basis);\n};\n\nSortedArraySet.prototype.reduceRight = function (callback, basis /*, thisp*/) {\n    var self = this;\n    var thisp = arguments[2];\n    return this.array.reduceRight(function (basis, value, index) {\n        return callback.call(thisp, basis, value, index, self);\n    }, basis);\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/sorted-map.js":"\"use strict\";\n\nvar Shim = require(\"./shim\");\nvar SortedSet = require(\"./sorted-set\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericMap = require(\"./generic-map\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar MapChanges = require(\"./listen/map-changes\");\n\nmodule.exports = SortedMap;\n\nfunction SortedMap(values, equals, compare, getDefault) {\n    if (!(this instanceof SortedMap)) {\n        return new SortedMap(values, equals, compare, getDefault);\n    }\n    equals = equals || Object.equals;\n    compare = compare || Object.compare;\n    getDefault = getDefault || Function.noop;\n    this.contentEquals = equals;\n    this.contentCompare = compare;\n    this.getDefault = getDefault;\n    this.store = new SortedSet(\n        null,\n        function keysEqual(a, b) {\n            return equals(a.key, b.key);\n        },\n        function compareKeys(a, b) {\n            return compare(a.key, b.key);\n        }\n    );\n    this.length = 0;\n    this.addEach(values);\n}\n\n// hack so require(\"sorted-map\").SortedMap will work in MontageJS\nSortedMap.SortedMap = SortedMap;\n\nSortedMap.from = GenericCollection.from;\n\nObject.addEach(SortedMap.prototype, GenericCollection.prototype);\nObject.addEach(SortedMap.prototype, GenericMap.prototype);\nObject.addEach(SortedMap.prototype, PropertyChanges.prototype);\nObject.addEach(SortedMap.prototype, MapChanges.prototype);\nObject.defineProperty(SortedMap.prototype,\"size\",GenericCollection._sizePropertyDescriptor);\n\nSortedMap.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.contentEquals,\n        this.contentCompare,\n        this.getDefault\n    );\n};\nSortedMap.prototype.iterate = function () {\n    return this.store.iterate();\n};\n\nSortedMap.prototype.log = function (charmap, logNode, callback, thisp) {\n    logNode = logNode || this.logNode\n    this.store.log(charmap, function (node, log, logBefore) {\n        logNode(node.value, log, logBefore);\n    }, callback, thisp);\n};\n\nSortedMap.prototype.logNode = function (node, log) {\n    log(\" key: \" + node.key);\n    log(\" value: \" + node.value);\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/sorted-set.js":"\"use strict\";\n\nmodule.exports = SortedSet;\n\nvar Shim = require(\"./shim\");\nvar GenericCollection = require(\"./generic-collection\");\nvar GenericSet = require(\"./generic-set\");\nvar PropertyChanges = require(\"./listen/property-changes\");\nvar RangeChanges = require(\"./listen/range-changes\");\nvar TreeLog = require(\"./tree-log\");\n\nfunction SortedSet(values, equals, compare, getDefault) {\n    if (!(this instanceof SortedSet)) {\n        return new SortedSet(values, equals, compare, getDefault);\n    }\n    this.contentEquals = equals || Object.equals;\n    this.contentCompare = compare || Object.compare;\n    this.getDefault = getDefault || Function.noop;\n    this.root = null;\n    this.length = 0;\n    this.addEach(values);\n}\n\n// hack so require(\"sorted-set\").SortedSet will work in MontageJS\nSortedSet.SortedSet = SortedSet;\n\nObject.addEach(SortedSet.prototype, GenericCollection.prototype);\nObject.addEach(SortedSet.prototype, GenericSet.prototype);\nObject.addEach(SortedSet.prototype, PropertyChanges.prototype);\nObject.addEach(SortedSet.prototype, RangeChanges.prototype);\nObject.defineProperty(SortedSet.prototype,\"size\",GenericCollection._sizePropertyDescriptor);\nSortedSet.from = GenericCollection.from;\n\nSortedSet.prototype.isSorted = true;\n\nSortedSet.prototype.constructClone = function (values) {\n    return new this.constructor(\n        values,\n        this.contentEquals,\n        this.contentCompare,\n        this.getDefault\n    );\n};\n\nSortedSet.prototype.has = function (value, equals) {\n    if (equals) {\n        throw new Error(\"SortedSet#has does not support second argument: equals\");\n    }\n    if (this.root) {\n        this.splay(value);\n        return this.contentEquals(value, this.root.value);\n    } else {\n        return false;\n    }\n};\n\nSortedSet.prototype.get = function (value, equals) {\n    if (equals) {\n        throw new Error(\"SortedSet#get does not support second argument: equals\");\n    }\n    if (this.root) {\n        this.splay(value);\n        if (this.contentEquals(value, this.root.value)) {\n            return this.root.value;\n        }\n    }\n    return this.getDefault(value);\n};\n\nSortedSet.prototype.add = function (value) {\n    var node = new this.Node(value);\n    if (this.root) {\n        this.splay(value);\n        if (!this.contentEquals(value, this.root.value)) {\n            var comparison = this.contentCompare(value, this.root.value);\n            if (comparison === 0) {\n                throw new Error(\"SortedSet cannot contain incomparable but inequal values: \" + value + \" and \" + this.root.value);\n            }\n            if (this.dispatchesRangeChanges) {\n                this.dispatchBeforeRangeChange([value], [], this.root.index);\n            }\n            if (comparison < 0) {\n                // rotate right\n                //   R        N\n                //  / \\  ->  / \\\n                // l   r    l   R\n                // :   :    :    \\\n                //                r\n                //                :\n                node.right = this.root;\n                node.left = this.root.left;\n                this.root.left = null;\n                this.root.touch();\n            } else {\n                // rotate left\n                //   R        N\n                //  / \\  ->  / \\\n                // l   r    R   r\n                // :   :   /    :\n                //        l\n                //        :\n                node.left = this.root;\n                node.right = this.root.right;\n                this.root.right = null;\n                this.root.touch();\n            }\n            node.touch();\n            this.root = node;\n            this.length++;\n            if (this.dispatchesRangeChanges) {\n                this.dispatchRangeChange([value], [], this.root.index);\n            }\n            return true;\n        }\n    } else {\n        if (this.dispatchesRangeChanges) {\n            this.dispatchBeforeRangeChange([value], [], 0);\n        }\n        this.root = node;\n        this.length++;\n        if (this.dispatchesRangeChanges) {\n            this.dispatchRangeChange([value], [], 0);\n        }\n        return true;\n    }\n    return false;\n};\n\nSortedSet.prototype['delete'] = function (value, equals) {\n    if (equals) {\n        throw new Error(\"SortedSet#delete does not support second argument: equals\");\n    }\n    if (this.root) {\n        this.splay(value);\n        if (this.contentEquals(value, this.root.value)) {\n            var index = this.root.index;\n            if (this.dispatchesRangeChanges) {\n                this.dispatchBeforeRangeChange([], [value], index);\n            }\n            if (!this.root.left) {\n                this.root = this.root.right;\n            } else {\n                // remove the right side of the tree,\n                var right = this.root.right;\n                this.root = this.root.left;\n                // the tree now only contains the left side of the tree, so all\n                // values are less than the value deleted.\n                // splay so that the root has an empty right child\n                this.splay(value);\n                // put the right side of the tree back\n                this.root.right = right;\n            }\n            this.length--;\n            if (this.root) {\n                this.root.touch();\n            }\n            if (this.dispatchesRangeChanges) {\n                this.dispatchRangeChange([], [value], index);\n            }\n            return true;\n        }\n    }\n    return false;\n};\n\nSortedSet.prototype.indexOf = function (value, index) {\n    if (index) {\n        throw new Error(\"SortedSet#indexOf does not support second argument: startIndex\");\n    }\n    if (this.root) {\n        this.splay(value);\n        if (this.contentEquals(value, this.root.value)) {\n            return this.root.index;\n        }\n    }\n    return -1;\n};\n\nSortedSet.prototype.find = function (value, equals, index) {\n    if (equals) {\n        throw new Error(\"SortedSet#find does not support second argument: equals\");\n    }\n    if (index) {\n        // TODO contemplate using splayIndex to isolate a subtree in\n        // which to search.\n        throw new Error(\"SortedSet#find does not support third argument: index\");\n    }\n    if (this.root) {\n        this.splay(value);\n        if (this.contentEquals(value, this.root.value)) {\n            return this.root;\n        }\n    }\n};\n\nSortedSet.prototype.findGreatest = function (at) {\n    if (this.root) {\n        at = at || this.root;\n        while (at.right) {\n            at = at.right;\n        }\n        return at;\n    }\n};\n\nSortedSet.prototype.findLeast = function (at) {\n    if (this.root) {\n        at = at || this.root;\n        while (at.left) {\n            at = at.left;\n        }\n        return at;\n    }\n};\n\nSortedSet.prototype.findGreatestLessThanOrEqual = function (value) {\n    if (this.root) {\n        this.splay(value);\n        if (this.contentCompare(this.root.value, value) > 0) {\n            return this.root.getPrevious();\n        } else {\n            return this.root;\n        }\n    }\n};\n\nSortedSet.prototype.findGreatestLessThan = function (value) {\n    if (this.root) {\n        this.splay(value);\n        if (this.contentCompare(this.root.value, value) >= 0) {\n            return this.root.getPrevious();\n        } else {\n            return this.root;\n        }\n    }\n};\n\nSortedSet.prototype.findLeastGreaterThanOrEqual = function (value) {\n    if (this.root) {\n        this.splay(value);\n        if (this.contentCompare(this.root.value, value) >= 0) {\n            return this.root;\n        } else {\n            return this.root.getNext();\n        }\n    }\n};\n\nSortedSet.prototype.findLeastGreaterThan = function (value) {\n    if (this.root) {\n        this.splay(value);\n        if (this.contentCompare(this.root.value, value) <= 0) {\n            return this.root.getNext();\n        } else {\n            return this.root;\n        }\n    }\n};\n\nSortedSet.prototype.pop = function () {\n    if (this.root) {\n        var found = this.findGreatest();\n        this[\"delete\"](found.value);\n        return found.value;\n    }\n};\n\nSortedSet.prototype.shift = function () {\n    if (this.root) {\n        var found = this.findLeast();\n        this[\"delete\"](found.value);\n        return found.value;\n    }\n};\n\nSortedSet.prototype.push = function () {\n    this.addEach(arguments);\n};\n\nSortedSet.prototype.unshift = function () {\n    this.addEach(arguments);\n};\n\nSortedSet.prototype.slice = function (start, end) {\n    var temp;\n    start = start || 0;\n    end = end || this.length;\n    if (start < 0) {\n        start += this.length;\n    }\n    if (end < 0) {\n        end += this.length;\n    }\n    var sliced = [];\n    if (this.root) {\n        this.splayIndex(start);\n        while (this.root.index < end) {\n            sliced.push(this.root.value);\n            if (!this.root.right) {\n                break;\n            }\n            this.splay(this.root.getNext().value);\n        }\n    }\n    return sliced;\n};\n\nSortedSet.prototype.splice = function (at, length /*...plus*/) {\n    return this.swap(at, length, Array.prototype.slice.call(arguments, 2));\n};\n\nSortedSet.prototype.swap = function (start, length, plus) {\n    if (start === undefined && length === undefined) {\n        return [];\n    }\n    start = start || 0;\n    if (start < 0) {\n        start += this.length;\n    }\n    if (length === undefined) {\n        length = Infinity;\n    }\n    var swapped = [];\n\n    if (this.root) {\n\n        // start\n        this.splayIndex(start);\n\n        // minus length\n        for (var i = 0; i < length; i++) {\n            swapped.push(this.root.value);\n            var next = this.root.getNext();\n            this[\"delete\"](this.root.value);\n            if (!next) {\n                break;\n            }\n            this.splay(next.value);\n        }\n    }\n\n    // plus\n    this.addEach(plus);\n\n    return swapped;\n};\n\n// This is the simplified top-down splaying algorithm from: \"Self-adjusting\n// Binary Search Trees\" by Sleator and Tarjan. Guarantees that root.value\n// equals value if value exists. If value does not exist, then root will be\n// the node whose value either immediately preceeds or immediately follows value.\n// - as described in https://github.com/hij1nx/forest\nSortedSet.prototype.splay = function (value) {\n    var stub, left, right, temp, root, history;\n\n    if (!this.root) {\n        return;\n    }\n\n    // Create a stub node.  The use of the stub node is a bit\n    // counter-intuitive: The right child of the stub node will hold the L tree\n    // of the algorithm.  The left child of the stub node will hold the R tree\n    // of the algorithm.  Using a stub node, left and right will always be\n    // nodes and we avoid special cases.\n    // - http://code.google.com/p/v8/source/browse/branches/bleeding_edge/src/splay-tree-inl.h\n    stub = left = right = new this.Node();\n    // The history is an upside down tree used to propagate new tree sizes back\n    // up the left and right arms of a traversal.  The right children of the\n    // transitive left side of the tree will be former roots while linking\n    // left.  The left children of the transitive walk to the right side of the\n    // history tree will all be previous roots from linking right.  The last\n    // node of the left and right traversal will each become a child of the new\n    // root.\n    history = new this.Node();\n    root = this.root;\n\n    while (true) {\n        var comparison = this.contentCompare(value, root.value);\n        if (comparison < 0) {\n            if (root.left) {\n                if (this.contentCompare(value, root.left.value) < 0) {\n                    // rotate right\n                    //        Root         L(temp)\n                    //      /     \\       / \\\n                    //     L(temp) R    LL    Root\n                    //    / \\                /    \\\n                    //  LL   LR            LR      R\n                    temp = root.left;\n                    root.left = temp.right;\n                    root.touch();\n                    temp.right = root;\n                    temp.touch();\n                    root = temp;\n                    if (!root.left) {\n                        break;\n                    }\n                }\n                // remember former root for repropagating length\n                temp = new Node();\n                temp.right = root;\n                temp.left = history.left;\n                history.left = temp;\n                // link left\n                right.left = root;\n                right.touch();\n                right = root;\n                root = root.left;\n            } else {\n                break;\n            }\n        } else if (comparison > 0) {\n            if (root.right) {\n                if (this.contentCompare(value, root.right.value) > 0) {\n                    // rotate left\n                    //        Root         L(temp)\n                    //      /     \\       / \\\n                    //     L(temp) R    LL    Root\n                    //    / \\                /    \\\n                    //  LL   LR            LR      R\n                    temp = root.right;\n                    root.right = temp.left;\n                    root.touch();\n                    temp.left = root;\n                    temp.touch();\n                    root = temp;\n                    if (!root.right) {\n                        break;\n                    }\n                }\n                // remember former root for repropagating length\n                temp = new Node();\n                temp.left = root;\n                temp.right = history.right;\n                history.right = temp;\n                // link right\n                left.right = root;\n                left.touch();\n                left = root;\n                root = root.right;\n            } else {\n                break;\n            }\n        } else { // equal or incomparable\n            break;\n        }\n    }\n\n    // reassemble\n    left.right = root.left;\n    left.touch();\n    right.left = root.right;\n    right.touch();\n    root.left = stub.right;\n    root.right = stub.left;\n\n    // propagate new lengths\n    while (history.left) {\n        history.left.right.touch();\n        history.left = history.left.left;\n    }\n    while (history.right) {\n        history.right.left.touch();\n        history.right = history.right.right;\n    }\n    root.touch();\n\n    this.root = root;\n};\n\n// an internal utility for splaying a node based on its index\nSortedSet.prototype.splayIndex = function (index) {\n    if (this.root) {\n        var at = this.root;\n        var atIndex = this.root.index;\n\n        while (atIndex !== index) {\n            if (atIndex > index && at.left) {\n                at = at.left;\n                atIndex -= 1 + (at.right ? at.right.length : 0);\n            } else if (atIndex < index && at.right) {\n                at = at.right;\n                atIndex += 1 + (at.left ? at.left.length : 0);\n            } else {\n                break;\n            }\n        }\n\n        this.splay(at.value);\n\n        return this.root.index === index;\n    }\n    return false;\n};\n\nSortedSet.prototype.reduce = function (callback, basis, thisp) {\n    if (this.root) {\n        basis = this.root.reduce(callback, basis, 0, thisp, this);\n    }\n    return basis;\n};\n\nSortedSet.prototype.reduceRight = function (callback, basis, thisp) {\n    if (this.root) {\n        basis = this.root.reduceRight(callback, basis, this.length - 1, thisp, this);\n    }\n    return basis;\n};\n\nSortedSet.prototype.min = function (at) {\n    var least = this.findLeast(at);\n    if (least) {\n        return least.value;\n    }\n};\n\nSortedSet.prototype.max = function (at) {\n    var greatest = this.findGreatest(at);\n    if (greatest) {\n        return greatest.value;\n    }\n};\n\nSortedSet.prototype.one = function () {\n    return this.min();\n};\n\nSortedSet.prototype.clear = function () {\n    var minus;\n    if (this.dispatchesRangeChanges) {\n        minus = this.toArray();\n        this.dispatchBeforeRangeChange([], minus, 0);\n    }\n    this.root = null;\n    this.length = 0;\n    if (this.dispatchesRangeChanges) {\n        this.dispatchRangeChange([], minus, 0);\n    }\n};\n\nSortedSet.prototype.iterate = function (start, end) {\n    return new this.Iterator(this, start, end);\n};\n\nSortedSet.prototype.Iterator = Iterator;\n\nSortedSet.prototype.summary = function () {\n    if (this.root) {\n        return this.root.summary();\n    } else {\n        return \"()\";\n    }\n};\n\nSortedSet.prototype.log = function (charmap, logNode, callback, thisp) {\n    charmap = charmap || TreeLog.unicodeRound;\n    logNode = logNode || this.logNode;\n    if (!callback) {\n        callback = console.log;\n        thisp = console;\n    }\n    callback = callback.bind(thisp);\n    if (this.root) {\n        this.root.log(charmap, logNode, callback, callback);\n    }\n};\n\nSortedSet.prototype.logNode = function (node, log, logBefore) {\n    log(\" \" + node.value);\n};\n\nSortedSet.logCharsets = TreeLog;\n\nSortedSet.prototype.Node = Node;\n\nfunction Node(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n    this.length = 1;\n}\n\n// TODO case where no basis is provided for reduction\n\nNode.prototype.reduce = function (callback, basis, index, thisp, tree, depth) {\n    depth = depth || 0;\n    if (this.left) {\n        // prerecord length to be resistant to mutation\n        var length = this.left.length;\n        basis = this.left.reduce(callback, basis, index, thisp, tree, depth + 1);\n        index += length;\n    }\n    basis = callback.call(thisp, basis, this.value, index, tree, this, depth);\n    index += 1;\n    if (this.right) {\n        basis = this.right.reduce(callback, basis, index, thisp, tree, depth + 1);\n    }\n    return basis;\n};\n\nNode.prototype.reduceRight = function (callback, basis, index, thisp, tree, depth) {\n    depth = depth || 0;\n    if (this.right) {\n        basis = this.right.reduce(callback, basis, index, thisp, tree, depth + 1);\n        index -= this.right.length;\n    }\n    basis = callback.call(thisp, basis, this.value, this.value, tree, this, depth);\n    index -= 1;\n    if (this.left) {\n        basis = this.left.reduce(callback, basis, index, thisp, tree, depth + 1);\n    }\n    return basis;\n};\n\nNode.prototype.touch = function () {\n    this.length = 1 +\n        (this.left ? this.left.length : 0) +\n        (this.right ? this.right.length : 0);\n    this.index = this.left ? this.left.length : 0;\n};\n\nNode.prototype.checkIntegrity = function () {\n    var length = 1;\n    length += this.left ? this.left.checkIntegrity() : 0;\n    length += this.right ? this.right.checkIntegrity() : 0;\n    if (this.length !== length)\n        throw new Error(\"Integrity check failed: \" + this.summary());\n    return length;\n}\n\n// get the next node in this subtree\nNode.prototype.getNext = function () {\n    var node = this;\n    if (node.right) {\n        node = node.right;\n        while (node.left) {\n            node = node.left;\n        }\n        return node;\n    }\n};\n\n// get the previous node in this subtree\nNode.prototype.getPrevious = function () {\n    var node = this;\n    if (node.left) {\n        node = node.left;\n        while (node.right) {\n            node = node.right;\n        }\n        return node;\n    }\n};\n\nNode.prototype.summary = function () {\n    var value = this.value || \"-\";\n    value += \" <\" + this.length;\n    if (!this.left && !this.right) {\n        return \"(\" + value + \")\";\n    }\n    return \"(\" + value + \" \" + (\n        this.left ? this.left.summary() : \"()\"\n    ) + \", \" + (\n        this.right ? this.right.summary() : \"()\"\n    ) + \")\";\n};\n\nNode.prototype.log = function (charmap, logNode, log, logAbove) {\n    var self = this;\n\n    var branch;\n    if (this.left && this.right) {\n        branch = charmap.intersection;\n    } else if (this.left) {\n        branch = charmap.branchUp;\n    } else if (this.right) {\n        branch = charmap.branchDown;\n    } else {\n        branch = charmap.through;\n    }\n\n    var loggedAbove;\n    this.left && this.left.log(\n        charmap,\n        logNode,\n        function innerWrite(line) {\n            if (!loggedAbove) {\n                loggedAbove = true;\n                // leader\n                logAbove(charmap.fromBelow + charmap.through + line);\n            } else {\n                // below\n                logAbove(charmap.strafe + \" \" + line);\n            }\n        },\n        function innerWriteAbove(line) {\n            // above\n            logAbove(\"  \" + line);\n        }\n    );\n\n    var loggedOn;\n    logNode(\n        this,\n        function innerWrite(line) {\n            if (!loggedOn) {\n                loggedOn = true;\n                log(branch + line);\n            } else {\n                log((self.right ? charmap.strafe : \" \") + line);\n            }\n        },\n        function innerWriteAbove(line) {\n            logAbove((self.left ? charmap.strafe : \" \") + line);\n        }\n    );\n\n    var loggedBelow;\n    this.right && this.right.log(\n        charmap,\n        logNode,\n        function innerWrite(line) {\n            if (!loggedBelow) {\n                loggedBelow = true;\n                log(charmap.fromAbove + charmap.through + line);\n            } else {\n                log(\"  \" + line);\n            }\n        },\n        function innerWriteAbove(line) {\n            log(charmap.strafe + \" \" + line);\n        }\n    );\n};\n\nfunction Iterator(set, start, end) {\n    this.set = set;\n    this.prev = null;\n    this.end = end;\n    if (start) {\n        var next = this.set.findLeastGreaterThanOrEqual(start);\n        if (next) {\n            this.set.splay(next.value);\n            this.prev = next.getPrevious();\n        }\n    }\n}\nIterator.prototype.__iterationObject = null;\nObject.defineProperty(Iterator.prototype,\"_iterationObject\", {\n    get: function() {\n        return this.__iterationObject || (this.__iterationObject = { done: false, value:null});\n    }\n});\n\nIterator.prototype.next = function () {\n    var next;\n    if (this.prev) {\n        next = this.set.findLeastGreaterThan(this.prev.value);\n    } else {\n        next = this.set.findLeast();\n    }\n    if (!next) {\n        this._iterationObject.done = true;\n        this._iterationObject.value = void 0;\n    }\n    else {\n        if (\n            this.end !== undefined &&\n            this.set.contentCompare(next.value, this.end) >= 0\n        ) {\n            this._iterationObject.done = true;\n            this._iterationObject.value = void 0;\n        }\n        else {\n            this.prev = next;\n            this._iterationObject.value =  next.value;\n        }\n\n    }\n    return this._iterationObject;\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/weak-map.js":"module.exports = (global.WeakMap !== void 0) ? global.WeakMap : require(\"weak-map\");\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/listen/change-descriptor.js":"/*\n    Copyright (c) 2016, Montage Studio Inc. All Rights Reserved.\n    3-Clause BSD License\n    https://github.com/montagejs/montage/blob/master/LICENSE.md\n*/\n\nvar Map = require(\"../_map\");\n\nvar ObjectChangeDescriptor = module.exports.ObjectChangeDescriptor = function ObjectChangeDescriptor(name) {\n    this.name = name;\n    this.isActive = false;\n    this._willChangeListeners = null;\n    this._changeListeners = null;\n\treturn this;\n}\n\nObject.defineProperties(ObjectChangeDescriptor.prototype,{\n    name: {\n\t\tvalue:null,\n\t\twritable: true\n\t},\n    isActive: {\n\t\tvalue:false,\n\t\twritable: true\n\t},\n\t_willChangeListeners: {\n\t\tvalue:null,\n\t\twritable: true\n\t},\n\twillChangeListeners: {\n\t\tget: function() {\n\t\t\treturn this._willChangeListeners || (this._willChangeListeners = new this.willChangeListenersRecordConstructor(this.name));\n\t\t}\n\t},\n\t_changeListeners: {\n\t\tvalue:null,\n\t\twritable: true\n\t},\n    changeListeners: {\n\t\tget: function() {\n\t\t\treturn this._changeListeners || (this._changeListeners = new this.changeListenersRecordConstructor(this.name));\n\t\t}\n\t},\n    changeListenersRecordConstructor: {\n        value:ChangeListenersRecord,\n        writable: true\n    },\n    willChangeListenersRecordConstructor: {\n        value:ChangeListenersRecord,\n        writable: true\n    }\n\n});\n\nvar ListenerGhost = module.exports.ListenerGhost = Object.create(null);\nvar ChangeListenerSpecificHandlerMethodName = new Map();\n\n module.exports.ChangeListenersRecord = ChangeListenersRecord;\nfunction ChangeListenersRecord(name) {\n    var specificHandlerMethodName = ChangeListenerSpecificHandlerMethodName.get(name);\n    if(!specificHandlerMethodName) {\n        specificHandlerMethodName = \"handle\";\n        specificHandlerMethodName += name;\n        specificHandlerMethodName += \"Change\";\n        ChangeListenerSpecificHandlerMethodName.set(name,specificHandlerMethodName);\n    }\n    this._current = null;\n    this._current = null;\n    this.specificHandlerMethodName = specificHandlerMethodName;\n    return this;\n}\n\nObject.defineProperties(ChangeListenersRecord.prototype,{\n    _current: {\n\t\tvalue: null,\n\t\twritable: true\n\t},\n\tcurrent: {\n\t\tget: function() {\n            // if(this._current) {\n            //     console.log(this.constructor.name,\" with \",this._current.length,\" listeners: \", this._current);\n            // }\n            return this._current;\n            //return this._current || (this._current = []);\n\t\t},\n        set: function(value) {\n            this._current = value;\n        }\n\t},\n    ListenerGhost: {\n        value:ListenerGhost,\n        writable: true\n    },\n    ghostCount: {\n        value:0,\n        writable: true\n    },\n    maxListenerGhostRatio: {\n        value:0.3,\n        writable: true\n    },\n    listenerGhostFilter: {\n        value: function listenerGhostFilter(value) {\n          return value !== this.ListenerGhost;\n      }\n    },\n    removeCurrentGostListenersIfNeeded: {\n        value: function() {\n            if(this._current && this.ghostCount/this._current.length>this.maxListenerGhostRatio) {\n                this.ghostCount = 0;\n                this._current = this._current.filter(this.listenerGhostFilter,this);\n            }\n            return this._current;\n        }\n    },\n    dispatchBeforeChange: {\n        value: false,\n        writable: true\n    },\n    genericHandlerMethodName: {\n\t\tvalue: \"handlePropertyChange\",\n        writable: true\n\t}\n});\n\nmodule.exports.WillChangeListenersRecord = WillChangeListenersRecord;\nvar WillChangeListenerSpecificHandlerMethodName = new Map();\nfunction WillChangeListenersRecord(name) {\n    var specificHandlerMethodName = WillChangeListenerSpecificHandlerMethodName.get(name);\n    if(!specificHandlerMethodName) {\n        specificHandlerMethodName = \"handle\";\n        specificHandlerMethodName += name;\n        specificHandlerMethodName += \"WillChange\";\n        WillChangeListenerSpecificHandlerMethodName.set(name,specificHandlerMethodName);\n    }\n    this.specificHandlerMethodName = specificHandlerMethodName;\n\treturn this;\n}\nWillChangeListenersRecord.prototype = new ChangeListenersRecord();\nWillChangeListenersRecord.prototype.constructor = WillChangeListenersRecord;\nWillChangeListenersRecord.prototype.genericHandlerMethodName = \"handlePropertyWillChange\";\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/listen/map-changes.js":"\"use strict\";\n\nvar WeakMap = require(\"weak-map\"),\n    Map = require(\"../_map\"),\n    ChangeDescriptor = require(\"./change-descriptor\"),\n    ObjectChangeDescriptor = ChangeDescriptor.ObjectChangeDescriptor,\n    ChangeListenersRecord = ChangeDescriptor.ChangeListenersRecord,\n    ListenerGhost = ChangeDescriptor.ListenerGhost;\n\nmodule.exports = MapChanges;\nfunction MapChanges() {\n    throw new Error(\"Can't construct. MapChanges is a mixin.\");\n}\n\nvar object_owns = Object.prototype.hasOwnProperty;\n\n/*\n    Object map change descriptors carry information necessary for adding,\n    removing, dispatching, and shorting events to listeners for map changes\n    for a particular key on a particular object.  These descriptors are used\n    here for shallow map changes.\n\n    {\n        willChangeListeners:Array(Fgunction)\n        changeListeners:Array(Function)\n    }\n*/\n\nvar mapChangeDescriptors = new WeakMap();\n\nfunction MapChangeDescriptor(name) {\n    this.name = name;\n    this.isActive = false;\n    this._willChangeListeners = null;\n    this._changeListeners = null;\n};\n\nMapChangeDescriptor.prototype = new ObjectChangeDescriptor();\nMapChangeDescriptor.prototype.constructor = MapChangeDescriptor;\n\nMapChangeDescriptor.prototype.changeListenersRecordConstructor = MapChangeListenersRecord;\nMapChangeDescriptor.prototype.willChangeListenersRecordConstructor = MapWillChangeListenersRecord;\n\nvar MapChangeListenersSpecificHandlerMethodName = new Map();\n\nfunction MapChangeListenersRecord(name) {\n    var specificHandlerMethodName = MapChangeListenersSpecificHandlerMethodName.get(name);\n    if(!specificHandlerMethodName) {\n        specificHandlerMethodName = \"handle\";\n        specificHandlerMethodName += name.slice(0, 1).toUpperCase();\n        specificHandlerMethodName += name.slice(1);\n        specificHandlerMethodName += \"MapChange\";\n        MapChangeListenersSpecificHandlerMethodName.set(name,specificHandlerMethodName);\n    }\n    this.specificHandlerMethodName = specificHandlerMethodName;\n\treturn this;\n}\nMapChangeListenersRecord.prototype = new ChangeListenersRecord();\nMapChangeListenersRecord.prototype.constructor = MapChangeListenersRecord;\nMapChangeListenersRecord.prototype.genericHandlerMethodName = \"handleMapChange\";\n\nvar MapWillChangeListenersSpecificHandlerMethodName = new Map();\n\nfunction MapWillChangeListenersRecord(name) {\n    var specificHandlerMethodName = MapWillChangeListenersSpecificHandlerMethodName.get(name);\n    if(!specificHandlerMethodName) {\n        specificHandlerMethodName = \"handle\";\n        specificHandlerMethodName += name.slice(0, 1).toUpperCase();\n        specificHandlerMethodName += name.slice(1);\n        specificHandlerMethodName += \"MapWillChange\";\n        MapWillChangeListenersSpecificHandlerMethodName.set(name,specificHandlerMethodName);\n    }\n    this.specificHandlerMethodName = specificHandlerMethodName;\n    return this;\n}\nMapWillChangeListenersRecord.prototype = new ChangeListenersRecord();\nMapWillChangeListenersRecord.prototype.constructor = MapWillChangeListenersRecord;\nMapWillChangeListenersRecord.prototype.genericHandlerMethodName = \"handleMapWillChange\";\n\n\nMapChanges.prototype.getAllMapChangeDescriptors = function () {\n    if (!mapChangeDescriptors.has(this)) {\n        mapChangeDescriptors.set(this, new Map());\n    }\n    return mapChangeDescriptors.get(this);\n};\n\nMapChanges.prototype.getMapChangeDescriptor = function (token) {\n    var tokenChangeDescriptors = this.getAllMapChangeDescriptors();\n    token = token || \"\";\n    if (!tokenChangeDescriptors.has(token)) {\n        tokenChangeDescriptors.set(token, new MapChangeDescriptor(token));\n    }\n    return tokenChangeDescriptors.get(token);\n};\n\nvar ObjectsDispatchesMapChanges = new WeakMap(),\n    dispatchesMapChangesGetter = function() {\n        return ObjectsDispatchesMapChanges.get(this);\n    },\n    dispatchesMapChangesSetter = function(value) {\n        return ObjectsDispatchesMapChanges.set(this,value);\n    },\n    dispatchesChangesMethodName = \"dispatchesMapChanges\",\n    dispatchesChangesPropertyDescriptor = {\n        get: dispatchesMapChangesGetter,\n        set: dispatchesMapChangesSetter,\n        configurable: true,\n        enumerable: false\n    };\n\nMapChanges.prototype.addMapChangeListener = function addMapChangeListener(listener, token, beforeChange) {\n    //console.log(\"this:\",this,\" addMapChangeListener(\",listener,\",\",token,\",\",beforeChange);\n\n    if (!this.isObservable && this.makeObservable) {\n        // for Array\n        this.makeObservable();\n    }\n    var descriptor = this.getMapChangeDescriptor(token);\n    var listeners;\n    if (beforeChange) {\n        listeners = descriptor.willChangeListeners;\n    } else {\n        listeners = descriptor.changeListeners;\n    }\n\n    // console.log(\"addMapChangeListener()\",listener, token);\n    //console.log(\"this:\",this,\" addMapChangeListener()  listeners._current is \",listeners._current);\n\n    if(!listeners._current) {\n        listeners._current = listener;\n    }\n    else if(!Array.isArray(listeners._current)) {\n        listeners._current = [listeners._current,listener]\n    }\n    else {\n        listeners._current.push(listener);\n    }\n\n    if(Object.getOwnPropertyDescriptor((this.__proto__||Object.getPrototypeOf(this)),dispatchesChangesMethodName) === void 0) {\n        Object.defineProperty((this.__proto__||Object.getPrototypeOf(this)), dispatchesChangesMethodName, dispatchesChangesPropertyDescriptor);\n    }\n    this.dispatchesMapChanges = true;\n\n    var self = this;\n    return function cancelMapChangeListener() {\n        if (!self) {\n            // TODO throw new Error(\"Can't remove map change listener again\");\n            return;\n        }\n        self.removeMapChangeListener(listener, token, beforeChange);\n        self = null;\n    };\n};\n\nMapChanges.prototype.removeMapChangeListener = function (listener, token, beforeChange) {\n    var descriptor = this.getMapChangeDescriptor(token);\n\n    var listeners;\n    if (beforeChange) {\n        listeners = descriptor.willChangeListeners;\n    } else {\n        listeners = descriptor.changeListeners;\n    }\n\n    if(listeners._current) {\n        if(listeners._current === listener) {\n            listeners._current = null;\n        }\n        else {\n            var index = listeners._current.lastIndexOf(listener);\n            if (index === -1) {\n                throw new Error(\"Can't remove map change listener: does not exist: token \" + JSON.stringify(token));\n            }\n            else {\n                if(descriptor.isActive) {\n                    listeners.ghostCount = listeners.ghostCount+1\n                    listeners._current[index]=ListenerGhost\n                }\n                else {\n                    listeners._current.spliceOne(index);\n                }\n            }\n        }\n    }\n\n\n};\n\nMapChanges.prototype.dispatchMapChange = function (key, value, beforeChange) {\n    var descriptors = this.getAllMapChangeDescriptors(),\n        Ghost = ListenerGhost;\n\n    descriptors.forEach(function (descriptor, token) {\n\n        if (descriptor.isActive) {\n            return;\n        }\n\n        var listeners = beforeChange ? descriptor.willChangeListeners : descriptor.changeListeners;\n        if(listeners && listeners._current) {\n\n            var tokenName = listeners.specificHandlerMethodName;\n            if(Array.isArray(listeners._current) && listeners._current.length) {\n\n                //removeGostListenersIfNeeded returns listeners.current or a new filtered one when conditions are met\n                var currentListeners = listeners.removeCurrentGostListenersIfNeeded(),\n                    i, countI, listener;\n                descriptor.isActive = true;\n\n                try {\n                    for(i=0, countI = currentListeners.length;i<countI;i++) {\n                        // dispatch to each listener\n                        if ((listener = currentListeners[i]) !== Ghost) {\n                            if (listener[tokenName]) {\n                                listener[tokenName](value, key, this);\n                            } else if (listener.call) {\n                                listener.call(listener, value, key, this);\n                            } else {\n                                throw new Error(\"Handler \" + listener + \" has no method \" + tokenName + \" and is not callable\");\n                            }\n                        }\n                    }\n                } finally {\n                    descriptor.isActive = false;\n                }\n            }\n            else {\n                descriptor.isActive = true;\n                // dispatch each listener\n\n                try {\n                    listener = listeners._current;\n                    if (listener[tokenName]) {\n                        listener[tokenName](value, key, this);\n                    } else if (listener.call) {\n                        listener.call(listener, value, key, this);\n                    } else {\n                        throw new Error(\"Handler \" + listener + \" has no method \" + tokenName + \" and is not callable\");\n                    }\n                } finally {\n                    descriptor.isActive = false;\n                }\n\n            }\n        }\n\n    }, this);\n};\n\nMapChanges.prototype.addBeforeMapChangeListener = function (listener, token) {\n    return this.addMapChangeListener(listener, token, true);\n};\n\nMapChanges.prototype.removeBeforeMapChangeListener = function (listener, token) {\n    return this.removeMapChangeListener(listener, token, true);\n};\n\nMapChanges.prototype.dispatchBeforeMapChange = function (key, value) {\n    return this.dispatchMapChange(key, value, true);\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/listen/property-changes.js":"/*\n    Based in part on observable arrays from Motorola Mobility’s Montage\n    Copyright (c) 2012, Motorola Mobility LLC. All Rights Reserved.\n    3-Clause BSD License\n    https://github.com/motorola-mobility/montage/blob/master/LICENSE.md\n*/\n\n/*\n    This module is responsible for observing changes to owned properties of\n    objects and changes to the content of arrays caused by method calls.\n    The interface for observing array content changes establishes the methods\n    necessary for any collection with observable content.\n*/\n\n\n\n// objectHasOwnProperty.call(myObject, key) will be used instead of\n// myObject.hasOwnProperty(key) to allow myObject have defined\n// a own property called \"hasOwnProperty\".\n\nvar objectHasOwnProperty = Object.prototype.hasOwnProperty;\n\n// Object property descriptors carry information necessary for adding,\n// removing, dispatching, and shorting events to listeners for property changes\n// for a particular key on a particular object.  These descriptors are used\n// here for shallow property changes.  The current listeners are the ones\n// modified by add and remove own property change listener methods.  During\n// property change dispatch, we capture a snapshot of the current listeners in\n// the active change listeners array.  The descriptor also keeps a memo of the\n// corresponding handler method names.\n//\n// {\n//     willChangeListeners:{current, active:Array<Function>, ...method names}\n//     changeListeners:{current, active:Array<Function>, ...method names}\n// }\n\n// Maybe remove entries from this table if the corresponding object no longer\n// has any property change listeners for any key.  However, the cost of\n// book-keeping is probably not warranted since it would be rare for an\n// observed object to no longer be observed unless it was about to be disposed\n// of or reused as an observable.  The only benefit would be in avoiding bulk\n// calls to dispatchOwnPropertyChange events on objects that have no listeners.\n\n//  To observe shallow property changes for a particular key of a particular\n//  object, we install a property descriptor on the object that overrides the previous\n//  descriptor.  The overridden descriptors are stored in this weak map.  The\n//  weak map associates an object with another object that maps property names\n//  to property descriptors.\n//\n//  object.__overriddenPropertyDescriptors__[key]\n//\n//  We retain the old descriptor for various purposes.  For one, if the property\n//  is no longer being observed by anyone, we revert the property descriptor to\n//  the original.  For \"value\" descriptors, we store the actual value of the\n//  descriptor on the overridden descriptor, so when the property is reverted, it\n//  retains the most recently set value.  For \"get\" and \"set\" descriptors,\n//  we observe then forward \"get\" and \"set\" operations to the original descriptor.\n\nmodule.exports = PropertyChanges;\n\nfunction PropertyChanges() {\n    throw new Error(\"This is an abstract interface. Mix it. Don't construct it\");\n}\n\nrequire(\"../shim\");\nvar Map = require(\"../_map\");\nvar WeakMap = require(\"../weak-map\");\nvar ChangeDescriptor = require(\"./change-descriptor\"),\n    ObjectChangeDescriptor = ChangeDescriptor.ObjectChangeDescriptor,\n    ListenerGhost = ChangeDescriptor.ListenerGhost;\n\nPropertyChanges.debug = true;\n\nvar ObjectsPropertyChangeListeners = new WeakMap();\n\nvar ObjectChangeDescriptorName = new Map();\n\nPropertyChanges.ObjectChangeDescriptor = function() {\n\n}\n\nPropertyChanges.prototype.getOwnPropertyChangeDescriptor = function (key) {\n    var objectPropertyChangeDescriptors = ObjectsPropertyChangeListeners.get(this), keyChangeDescriptor;\n    if (!objectPropertyChangeDescriptors) {\n        objectPropertyChangeDescriptors = Object.create(null);\n        ObjectsPropertyChangeListeners.set(this,objectPropertyChangeDescriptors);\n    }\n    if ( (keyChangeDescriptor = objectPropertyChangeDescriptors[key]) === void 0) {\n        var propertyName = ObjectChangeDescriptorName.get(key);\n        if(!propertyName) {\n            propertyName = String(key);\n            propertyName = propertyName && propertyName[0].toUpperCase() + propertyName.slice(1);\n            ObjectChangeDescriptorName.set(key,propertyName);\n        }\n        return objectPropertyChangeDescriptors[key] = new ObjectChangeDescriptor(propertyName);\n    }\n    else return keyChangeDescriptor;\n};\n\nPropertyChanges.prototype.hasOwnPropertyChangeDescriptor = function (key) {\n    var objectPropertyChangeDescriptors = ObjectsPropertyChangeListeners.get(this);\n    if (!objectPropertyChangeDescriptors) {\n        return false;\n    }\n    if (!key) {\n        return true;\n    }\n    if (objectPropertyChangeDescriptors[key] === void 0) {\n        return false;\n    }\n    return true;\n};\n\nPropertyChanges.prototype.addOwnPropertyChangeListener = function (key, listener, beforeChange) {\n    if (this.makeObservable && !this.isObservable) {\n        this.makeObservable(); // particularly for observable arrays, for\n        // their length property\n    }\n    var descriptor = PropertyChanges.getOwnPropertyChangeDescriptor(this, key),\n        listeners = beforeChange ? descriptor.willChangeListeners : descriptor.changeListeners;\n\n    PropertyChanges.makePropertyObservable(this, key);\n\n    if(!listeners._current) {\n        listeners._current = listener;\n    }\n    else if(!Array.isArray(listeners._current)) {\n        listeners._current = [listeners._current,listener]\n    }\n    else {\n        listeners._current.push(listener);\n    }\n\n    var self = this;\n    return function cancelOwnPropertyChangeListener() {\n        PropertyChanges.removeOwnPropertyChangeListener(self, key, listener, beforeChange);\n        self = null;\n    };\n};\n\nPropertyChanges.prototype.addBeforeOwnPropertyChangeListener = function (key, listener) {\n    return PropertyChanges.addOwnPropertyChangeListener(this, key, listener, true);\n};\n\nPropertyChanges.prototype.removeOwnPropertyChangeListener = function removeOwnPropertyChangeListener(key, listener, beforeChange) {\n    var descriptor = PropertyChanges.getOwnPropertyChangeDescriptor(this, key);\n\n    var listeners;\n    if (beforeChange) {\n        listeners = descriptor._willChangeListeners;\n    } else {\n        listeners = descriptor._changeListeners;\n    }\n\n    if(listeners) {\n        if(listeners._current) {\n            if(listeners._current === listener) {\n                listeners._current = null;\n            }\n            else {\n\n                var index = listeners._current.lastIndexOf(listener);\n                if (index === -1) {\n                    throw new Error(\"Can't remove property change listener: does not exist: property name\" + JSON.stringify(key));\n                }\n                if(descriptor.isActive) {\n                    listeners.ghostCount = listeners.ghostCount+1;\n                    listeners._current[index]=removeOwnPropertyChangeListener.ListenerGhost;\n                }\n                else {\n                    listeners._current.spliceOne(index);\n                }\n            }\n        }\n    }\n};\nPropertyChanges.prototype.removeOwnPropertyChangeListener.ListenerGhost = ListenerGhost;\n\nPropertyChanges.prototype.removeBeforeOwnPropertyChangeListener = function (key, listener) {\n    return PropertyChanges.removeOwnPropertyChangeListener(this, key, listener, true);\n};\n\nPropertyChanges.prototype.dispatchOwnPropertyChange = function dispatchOwnPropertyChange(key, value, beforeChange) {\n    var descriptor = PropertyChanges.getOwnPropertyChangeDescriptor(this, key),\n        listeners;\n\n    if (!descriptor.isActive) {\n        descriptor.isActive = true;\n        listeners = beforeChange ? descriptor._willChangeListeners: descriptor._changeListeners;\n        try {\n            dispatchOwnPropertyChange.dispatchEach(listeners, key, value, this);\n        } finally {\n            descriptor.isActive = false;\n        }\n    }\n};\nPropertyChanges.prototype.dispatchOwnPropertyChange.dispatchEach = dispatchEach;\n\nfunction dispatchEach(listeners, key, value, object) {\n    if(listeners && listeners._current) {\n        // copy snapshot of current listeners to active listeners\n        var current,\n            listener,\n            i,\n            countI,\n            thisp,\n            specificHandlerMethodName = listeners.specificHandlerMethodName,\n            genericHandlerMethodName = listeners.genericHandlerMethodName,\n            Ghost = ListenerGhost;\n\n        if(Array.isArray(listeners._current)) {\n            //removeGostListenersIfNeeded returns listeners.current or a new filtered one when conditions are met\n            current = listeners.removeCurrentGostListenersIfNeeded();\n            //We use a for to guarantee we won't dispatch to listeners that would be added after we started\n            for(i=0, countI = current.length;i<countI;i++) {\n                if ((thisp = current[i]) !== Ghost) {\n                    //This is fixing the issue causing a regression in Montage's repetition\n                    listener = (\n                        thisp[specificHandlerMethodName] ||\n                        thisp[genericHandlerMethodName] ||\n                        thisp\n                    );\n                    if (!listener.call) {\n                        throw new Error(\"No event listener for \" + listeners.specificHandlerName + \" or \" + listeners.genericHandlerName + \" or call on \" + listener);\n                    }\n                    listener.call(thisp, value, key, object);\n                }\n            }\n        }\n        else {\n            thisp = listeners._current;\n            listener = (\n                thisp[specificHandlerMethodName] ||\n                thisp[genericHandlerMethodName] ||\n                thisp\n            );\n            if (!listener.call) {\n                throw new Error(\"No event listener for \" + listeners.specificHandlerName + \" or \" + listeners.genericHandlerName + \" or call on \" + listener);\n            }\n            listener.call(thisp, value, key, object);\n        }\n\n    }\n}\n\ndispatchEach.ListenerGhost = ListenerGhost;\n\n\nPropertyChanges.prototype.dispatchBeforeOwnPropertyChange = function (key, listener) {\n    return PropertyChanges.dispatchOwnPropertyChange(this, key, listener, true);\n};\n\nvar ObjectsOverriddenPropertyDescriptors = new WeakMap(),\n    Objects__state__ = new WeakMap(),\n    propertyListener = {\n        get: void 0,\n        set: void 0,\n        configurable: true,\n        enumerable: false\n    };\n\nPropertyChanges.prototype.makePropertyObservable = function (key) {\n    // arrays are special.  we do not support direct setting of properties\n    // on an array.  instead, call .set(index, value).  this is observable.\n    // 'length' property is observable for all mutating methods because\n    // our overrides explicitly dispatch that change.\n\n\n    var overriddenPropertyDescriptors = ObjectsOverriddenPropertyDescriptors.get(this);\n    if (overriddenPropertyDescriptors && overriddenPropertyDescriptors.get(key) !== void 0) {\n        // if we have already recorded an overridden property descriptor,\n        // we have already installed the observer, so short-here\n        return;\n    }\n\n    // memoize overridden property descriptor table\n    if (!overriddenPropertyDescriptors) {\n        if (Array.isArray(this)) {\n            return;\n        }\n        if (!Object.isExtensible(this)) {\n            throw new Error(\"Can't make property \" + JSON.stringify(key) + \" observable on \" + this + \" because object is not extensible\");\n        }\n        overriddenPropertyDescriptors = new Map();\n        ObjectsOverriddenPropertyDescriptors.set(this,overriddenPropertyDescriptors);\n    }\n\n    // var state = Objects__state__.get(this);\n    // if (typeof state !== \"object\") {\n    //     Objects__state__.set(this,(state = {}));\n    // }\n    // state[key] = this[key];\n\n\n\n    // walk up the prototype chain to find a property descriptor for\n    // the property name\n    var overriddenDescriptor;\n    var attached = this;\n    do {\n        overriddenDescriptor = Object.getOwnPropertyDescriptor(attached, key);\n        if (overriddenDescriptor) {\n            break;\n        }\n        attached = Object.getPrototypeOf(attached);\n    } while (attached);\n    // or default to an undefined value\n    if (!overriddenDescriptor) {\n        overriddenDescriptor = {\n            value: void 0,\n            enumerable: true,\n            writable: true,\n            configurable: true\n        };\n    } else {\n        if (!overriddenDescriptor.configurable) {\n            return;\n        }\n        if (!overriddenDescriptor.writable && !overriddenDescriptor.set) {\n            return;\n        }\n    }\n\n    // memoize the descriptor so we know not to install another layer,\n    // and so we can reuse the overridden descriptor when uninstalling\n    overriddenPropertyDescriptors.set(key,overriddenDescriptor);\n\n\n    // TODO reflect current value on a displayed property\n\n    // in both of these new descriptor variants, we reuse the overridden\n    // descriptor to either store the current value or apply getters\n    // and setters.  this is handy since we can reuse the overridden\n    // descriptor if we uninstall the observer.  We even preserve the\n    // assignment semantics, where we get the value from up the\n    // prototype chain, and set as an owned property.\n    if ('value' in overriddenDescriptor) {\n        propertyListener.get = function dispatchingGetter() {\n            return dispatchingGetter.overriddenDescriptor.value;\n        };\n        propertyListener.set = function dispatchingSetter(value) {\n            var descriptor,\n                isActive,\n                overriddenDescriptor = dispatchingSetter.overriddenDescriptor;\n\n            if (value !== overriddenDescriptor.value) {\n                if (!(isActive = (descriptor = dispatchingSetter.descriptor).isActive)) {\n                    descriptor.isActive = true;\n                    try {\n                        dispatchingSetter.dispatchEach(descriptor._willChangeListeners, dispatchingSetter.key, overriddenDescriptor.value, this);\n                    } finally {}\n                }\n                overriddenDescriptor.value = value;\n                if (!isActive) {\n                    try {\n                        dispatchingSetter.dispatchEach(descriptor._changeListeners, dispatchingSetter.key, value, this);\n                    } finally {\n                        descriptor.isActive = false;\n                    }\n                }\n            }\n        };\n        propertyListener.set.dispatchEach = dispatchEach;\n        propertyListener.set.key = key;\n        propertyListener.get.overriddenDescriptor = propertyListener.set.overriddenDescriptor = overriddenDescriptor;\n        propertyListener.set.descriptor = ObjectsPropertyChangeListeners.get(this)[key];\n\n        propertyListener.enumerable = overriddenDescriptor.enumerable;\n\n        propertyListener.configurable = true\n\n    } else { // 'get' or 'set', but not necessarily both\n            propertyListener.get = overriddenDescriptor.get;\n            propertyListener.set = function dispatchingSetter() {\n                var formerValue = dispatchingSetter.overriddenGetter.call(this),\n                    descriptor,\n                    isActive,\n                    newValue;\n\n\n                    if(arguments.length === 1) {\n                        dispatchingSetter.overriddenSetter.call(this,arguments[0]);\n                    }\n                    else if(arguments.length === 2) {\n                        dispatchingSetter.overriddenSetter.call(this,arguments[0],arguments[1]);\n                    }\n                    else {\n                        dispatchingSetter.overriddenSetter.apply(this, arguments);\n                    }\n\n                if ((newValue = dispatchingSetter.overriddenGetter.call(this)) !== formerValue) {\n                    descriptor = dispatchingSetter.descriptor;\n                    if (!(isActive = descriptor.isActive)) {\n                        descriptor.isActive = true;\n                        try {\n                            dispatchingSetter.dispatchEach(descriptor._willChangeListeners, key, formerValue, this);\n                        } finally {}\n                    }\n                    if (!isActive) {\n                        try {\n                            dispatchingSetter.dispatchEach(descriptor._changeListeners, key, newValue, this);\n                        } finally {\n                            descriptor.isActive = false;\n                        }\n                    }\n                }\n            };\n            propertyListener.enumerable = overriddenDescriptor.enumerable;\n            propertyListener.configurable = true;\n        propertyListener.set.dispatchEach = dispatchEach;\n        propertyListener.set.overriddenSetter = overriddenDescriptor.set;\n        propertyListener.set.overriddenGetter = overriddenDescriptor.get;\n        propertyListener.set.descriptor = ObjectsPropertyChangeListeners.get(this)[key];\n    }\n\n    Object.defineProperty(this, key, propertyListener);\n};\n\n// constructor functions\n\nPropertyChanges.getOwnPropertyChangeDescriptor = function (object, key) {\n    if (object.getOwnPropertyChangeDescriptor) {\n        return object.getOwnPropertyChangeDescriptor(key);\n    } else {\n        return PropertyChanges.prototype.getOwnPropertyChangeDescriptor.call(object, key);\n    }\n};\n\nPropertyChanges.hasOwnPropertyChangeDescriptor = function (object, key) {\n    if (object.hasOwnPropertyChangeDescriptor) {\n        return object.hasOwnPropertyChangeDescriptor(key);\n    } else {\n        return PropertyChanges.prototype.hasOwnPropertyChangeDescriptor.call(object, key);\n    }\n};\n\nPropertyChanges.addOwnPropertyChangeListener = function (object, key, listener, beforeChange) {\n    if (Object.isObject(object)) {\n        return object.addOwnPropertyChangeListener\n            ? object.addOwnPropertyChangeListener(key, listener, beforeChange)\n            : this.prototype.addOwnPropertyChangeListener.call(object, key, listener, beforeChange);\n    }\n};\n\nPropertyChanges.removeOwnPropertyChangeListener = function (object, key, listener, beforeChange) {\n    if (!Object.isObject(object)) {\n    } else if (object.removeOwnPropertyChangeListener) {\n        return object.removeOwnPropertyChangeListener(key, listener, beforeChange);\n    } else {\n        return PropertyChanges.prototype.removeOwnPropertyChangeListener.call(object, key, listener, beforeChange);\n    }\n};\n\nPropertyChanges.dispatchOwnPropertyChange = function (object, key, value, beforeChange) {\n    if (!Object.isObject(object)) {\n    } else if (object.dispatchOwnPropertyChange) {\n        return object.dispatchOwnPropertyChange(key, value, beforeChange);\n    } else {\n        return PropertyChanges.prototype.dispatchOwnPropertyChange.call(object, key, value, beforeChange);\n    }\n};\n\nPropertyChanges.addBeforeOwnPropertyChangeListener = function (object, key, listener) {\n    return PropertyChanges.addOwnPropertyChangeListener(object, key, listener, true);\n};\n\nPropertyChanges.removeBeforeOwnPropertyChangeListener = function (object, key, listener) {\n    return PropertyChanges.removeOwnPropertyChangeListener(object, key, listener, true);\n};\n\nPropertyChanges.dispatchBeforeOwnPropertyChange = function (object, key, value) {\n    return PropertyChanges.dispatchOwnPropertyChange(object, key, value, true);\n};\n\nPropertyChanges.makePropertyObservable = function (object, key) {\n    if (object.makePropertyObservable) {\n        return object.makePropertyObservable(key);\n    } else {\n        return PropertyChanges.prototype.makePropertyObservable.call(object, key);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-collections/node_modules/collections/listen/range-changes.js":"\"use strict\";\n\n//TODO:\n// Remove Dict and use native Map as much as possible here\n//Use ObjectChangeDescriptor to avoid creating useless arrays and benefit from similar gains made in property-changes\n\n\nvar WeakMap = require(\"weak-map\"),\n    Map = require(\"../_map\"),\n    ChangeDescriptor = require(\"./change-descriptor\"),\n    ObjectChangeDescriptor = ChangeDescriptor.ObjectChangeDescriptor,\n    ChangeListenersRecord = ChangeDescriptor.ChangeListenersRecord,\n    ListenerGhost = ChangeDescriptor.ListenerGhost;\n\nvar rangeChangeDescriptors = new WeakMap(); // {isActive, willChangeListeners, changeListeners}\n\n\n//\nfunction RangeChangeDescriptor(name) {\n    this.name = name;\n    this.isActive = false;\n    this._willChangeListeners = null;\n    this._changeListeners = null;\n};\n\nRangeChangeDescriptor.prototype = new ObjectChangeDescriptor();\nRangeChangeDescriptor.prototype.constructor = RangeChangeDescriptor;\n\nRangeChangeDescriptor.prototype.changeListenersRecordConstructor = RangeChangeListenersRecord;\nRangeChangeDescriptor.prototype.willChangeListenersRecordConstructor = RangeWillChangeListenersRecord;\nObject.defineProperty(RangeChangeDescriptor.prototype,\"active\",{\n    get: function() {\n        return this._active || (this._active = this._current ? this._current.slice():[]);\n    }\n});\n\n\nvar RangeChangeListenersSpecificHandlerMethodName = new Map();\n\nfunction RangeChangeListenersRecord(name) {\n    var specificHandlerMethodName = RangeChangeListenersSpecificHandlerMethodName.get(name);\n    if(!specificHandlerMethodName) {\n        specificHandlerMethodName = \"handle\";\n        specificHandlerMethodName += name.slice(0, 1).toUpperCase();\n        specificHandlerMethodName += name.slice(1);\n        specificHandlerMethodName += \"RangeChange\";\n        RangeChangeListenersSpecificHandlerMethodName.set(name,specificHandlerMethodName);\n    }\n    this.specificHandlerMethodName = specificHandlerMethodName;\n\treturn this;\n}\nRangeChangeListenersRecord.prototype = new ChangeListenersRecord();\nRangeChangeListenersRecord.prototype.constructor = RangeChangeListenersRecord;\n\nvar RangeWillChangeListenersSpecificHandlerMethodName = new Map();\n\nfunction RangeWillChangeListenersRecord(name) {\n    var specificHandlerMethodName = RangeWillChangeListenersSpecificHandlerMethodName.get(name);\n    if(!specificHandlerMethodName) {\n        specificHandlerMethodName = \"handle\";\n        specificHandlerMethodName += name.slice(0, 1).toUpperCase();\n        specificHandlerMethodName += name.slice(1);\n        specificHandlerMethodName += \"RangeWillChange\";\n        RangeWillChangeListenersSpecificHandlerMethodName.set(name,specificHandlerMethodName);\n    }\n    this.specificHandlerMethodName = specificHandlerMethodName;\n    return this;\n}\nRangeWillChangeListenersRecord.prototype = new ChangeListenersRecord();\nRangeWillChangeListenersRecord.prototype.constructor = RangeWillChangeListenersRecord;\n\nmodule.exports = RangeChanges;\nfunction RangeChanges() {\n    throw new Error(\"Can't construct. RangeChanges is a mixin.\");\n}\n\nRangeChanges.prototype.getAllRangeChangeDescriptors = function () {\n    if (!rangeChangeDescriptors.has(this)) {\n        rangeChangeDescriptors.set(this, new Map());\n    }\n    return rangeChangeDescriptors.get(this);\n};\n\nRangeChanges.prototype.getRangeChangeDescriptor = function (token) {\n    var tokenChangeDescriptors = this.getAllRangeChangeDescriptors();\n    token = token || \"\";\n    if (!tokenChangeDescriptors.has(token)) {\n        tokenChangeDescriptors.set(token, new RangeChangeDescriptor(token));\n    }\n    return tokenChangeDescriptors.get(token);\n};\n\nvar ObjectsDispatchesRangeChanges = new WeakMap(),\n    dispatchesRangeChangesGetter = function() {\n        return ObjectsDispatchesRangeChanges.get(this);\n    },\n    dispatchesRangeChangesSetter = function(value) {\n        return ObjectsDispatchesRangeChanges.set(this,value);\n    },\n    dispatchesChangesMethodName = \"dispatchesRangeChanges\",\n    dispatchesChangesPropertyDescriptor = {\n        get: dispatchesRangeChangesGetter,\n        set: dispatchesRangeChangesSetter,\n        configurable: true,\n        enumerable: false\n    };\n\nRangeChanges.prototype.addRangeChangeListener = function addRangeChangeListener(listener, token, beforeChange) {\n    // a concession for objects like Array that are not inherently observable\n    if (!this.isObservable && this.makeObservable) {\n        this.makeObservable();\n    }\n\n    var descriptor = this.getRangeChangeDescriptor(token);\n\n    var listeners;\n    if (beforeChange) {\n        listeners = descriptor.willChangeListeners;\n    } else {\n        listeners = descriptor.changeListeners;\n    }\n\n    // even if already registered\n    if(!listeners._current) {\n        listeners._current = listener;\n    }\n    else if(!Array.isArray(listeners._current)) {\n        listeners._current = [listeners._current,listener]\n    }\n    else {\n        listeners._current.push(listener);\n    }\n\n    if(Object.getOwnPropertyDescriptor((this.__proto__||Object.getPrototypeOf(this)),dispatchesChangesMethodName) === void 0) {\n        Object.defineProperty((this.__proto__||Object.getPrototypeOf(this)), dispatchesChangesMethodName, dispatchesChangesPropertyDescriptor);\n    }\n    this.dispatchesRangeChanges = true;\n\n    var self = this;\n    return function cancelRangeChangeListener() {\n        if (!self) {\n            // TODO throw new Error(\"Range change listener \" + JSON.stringify(token) + \" has already been canceled\");\n            return;\n        }\n        self.removeRangeChangeListener(listener, token, beforeChange);\n        self = null;\n    };\n};\n\n\nRangeChanges.prototype.removeRangeChangeListener = function (listener, token, beforeChange) {\n    var descriptor = this.getRangeChangeDescriptor(token);\n\n    var listeners;\n    if (beforeChange) {\n        listeners = descriptor._willChangeListeners;\n    } else {\n        listeners = descriptor._changeListeners;\n    }\n\n    if(listeners._current) {\n        if(listeners._current === listener) {\n            listeners._current = null;\n        }\n        else {\n            var index = listeners._current.lastIndexOf(listener);\n            if (index === -1) {\n                throw new Error(\"Can't remove range change listener: does not exist: token \" + JSON.stringify(token));\n            }\n            else {\n                if(descriptor.isActive) {\n                    listeners.ghostCount = listeners.ghostCount+1\n                    listeners._current[index]=ListenerGhost\n                }\n                else {\n                    listeners._current.spliceOne(index);\n                }\n            }\n        }\n    }\n\n};\n\nRangeChanges.prototype.dispatchRangeChange = function (plus, minus, index, beforeChange) {\n    var descriptors = this.getAllRangeChangeDescriptors(),\n        descriptor,\n        mapIter  = descriptors.values(),\n        listeners,\n        tokenName,\n        i,\n        countI,\n        listener,\n        currentListeners,\n        Ghost;\n\n    descriptors.dispatchBeforeChange = beforeChange;\n\n     while (descriptor = mapIter.next().value) {\n\n        if (descriptor.isActive) {\n            return;\n        }\n\n        // before or after\n        listeners = beforeChange ? descriptor._willChangeListeners : descriptor._changeListeners;\n        if(listeners && listeners._current) {\n            tokenName = listeners.specificHandlerMethodName;\n            if(Array.isArray(listeners._current)) {\n                if(listeners._current.length) {\n                    // notably, defaults to \"handleRangeChange\" or \"handleRangeWillChange\"\n                    // if token is \"\" (the default)\n\n                    descriptor.isActive = true;\n                    // dispatch each listener\n                    try {\n                            //removeGostListenersIfNeeded returns listeners.current or a new filtered one when conditions are met\n                            currentListeners = listeners.removeCurrentGostListenersIfNeeded();\n                            Ghost = ListenerGhost;\n                        for(i=0, countI = currentListeners.length;i<countI;i++) {\n                            if ((listener = currentListeners[i]) !== Ghost) {\n                                if (listener[tokenName]) {\n                                    listener[tokenName](plus, minus, index, this, beforeChange);\n                                } else if (listener.call) {\n                                    listener.call(this, plus, minus, index, this, beforeChange);\n                                } else {\n                                    throw new Error(\"Handler \" + listener + \" has no method \" + tokenName + \" and is not callable\");\n                                }\n                            }\n                        }\n                    } finally {\n                        descriptor.isActive = false;\n                    }\n                }\n            }\n            else {\n                descriptor.isActive = true;\n                // dispatch each listener\n                try {\n                    listener = listeners._current;\n                    if (listener[tokenName]) {\n                        listener[tokenName](plus, minus, index, this, beforeChange);\n                    } else if (listener.call) {\n                        listener.call(this, plus, minus, index, this, beforeChange);\n                    } else {\n                        throw new Error(\"Handler \" + listener + \" has no method \" + tokenName + \" and is not callable\");\n                    }\n                } finally {\n                    descriptor.isActive = false;\n                }\n\n            }\n        }\n\n    }\n};\n\nRangeChanges.prototype.addBeforeRangeChangeListener = function (listener, token) {\n    return this.addRangeChangeListener(listener, token, true);\n};\n\nRangeChanges.prototype.removeBeforeRangeChangeListener = function (listener, token) {\n    return this.removeRangeChangeListener(listener, token, true);\n};\n\nRangeChanges.prototype.dispatchBeforeRangeChange = function (plus, minus, index) {\n    return this.dispatchRangeChange(plus, minus, index, true);\n};\n"}